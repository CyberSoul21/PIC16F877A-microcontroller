CCS PCM C Compiler, Version 4.104, 5967               08-Nov-11 22:53

               Filename: C:\Documents and Settings\Administrador\Escritorio\PRACTICA LCD\LCD123.lst

               ROM used: 461 words (6%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         19 (5%) worst case
               Stack:    5 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   193
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
001A:  MOVLW  25
001B:  MOVWF  04
001C:  BCF    03.7
001D:  MOVF   00,W
001E:  BTFSC  03.2
001F:  GOTO   02E
0020:  MOVLW  01
0021:  MOVWF  78
0022:  CLRF   77
0023:  DECFSZ 77,F
0024:  GOTO   023
0025:  DECFSZ 78,F
0026:  GOTO   022
0027:  MOVLW  4A
0028:  MOVWF  77
0029:  DECFSZ 77,F
002A:  GOTO   029
002B:  GOTO   02C
002C:  DECFSZ 00,F
002D:  GOTO   020
002E:  RETURN
.................... #fuses xt,nowdt 
....................  
.................... #USE fast_IO(A) 
....................   
.................... #define LCD_DB4   PIN_C4 
.................... #define LCD_DB5   PIN_C5 
.................... #define LCD_DB6   PIN_C6 
.................... #define LCD_DB7   PIN_C7 
....................  
.................... #define LCD_RS    PIN_C3 
.................... #define LCD_RW    PIN_C1 
.................... #define LCD_E     PIN_C2 
....................  
.................... #include <flex_lcd.c> 
.................... // flex_lcd.c 
....................  
.................... // These pins are for the Microchip PicDem2-Plus board, 
.................... // which is what I used to test the driver.  Change these 
.................... // pins to fit your own board. 
....................  
.................... //#define LCD_DB4   PIN_C4 
.................... //#define LCD_DB5   PIN_C5 
.................... //#define LCD_DB6   PIN_C6 
.................... //#define LCD_DB7   PIN_C7 
.................... // 
.................... //#define LCD_RS    PIN_C3 
.................... //#define LCD_RW    PIN_C2 
.................... //#define LCD_E     PIN_C1 
....................  
.................... // If you only want a 6-pin interface to your LCD, then 
.................... // connect the R/W pin on the LCD to ground, and comment 
.................... // out the following line. 
....................  
.................... #define USE_LCD_RW   1// 
....................  
.................... //======================================== 
....................  
.................... #define lcd_type 2        // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40 // LCD RAM address for the 2nd line 
....................  
....................  
.................... int8 const LCD_INIT_STRING[4] =  
.................... { 
....................  0x20 | (lcd_type << 2), // Func set: 4-bit, 2 lines, 5x8 dots 
....................  0xc,                    // Display on 
....................  1,                      // Clear display 
....................  6                       // Increment cursor 
....................  }; 
....................  
....................  
.................... //------------------------------------- 
.................... void lcd_send_nibble(int8 nibble) 
.................... { 
.................... // Note:  !! converts an integer expression 
.................... // to a boolean (1 or 0). 
....................  output_bit(LCD_DB4, !!(nibble & 1)); 
002F:  BTFSC  2C.0
0030:  GOTO   033
0031:  BCF    07.4
0032:  GOTO   034
0033:  BSF    07.4
0034:  BCF    20.4
0035:  MOVF   20,W
0036:  BSF    03.5
0037:  MOVWF  07
....................  output_bit(LCD_DB5, !!(nibble & 2)); 
0038:  BCF    03.5
0039:  BTFSC  2C.1
003A:  GOTO   03D
003B:  BCF    07.5
003C:  GOTO   03E
003D:  BSF    07.5
003E:  BCF    20.5
003F:  MOVF   20,W
0040:  BSF    03.5
0041:  MOVWF  07
....................  output_bit(LCD_DB6, !!(nibble & 4)); 
0042:  BCF    03.5
0043:  BTFSC  2C.2
0044:  GOTO   047
0045:  BCF    07.6
0046:  GOTO   048
0047:  BSF    07.6
0048:  BCF    20.6
0049:  MOVF   20,W
004A:  BSF    03.5
004B:  MOVWF  07
....................  output_bit(LCD_DB7, !!(nibble & 8)); 
004C:  BCF    03.5
004D:  BTFSC  2C.3
004E:  GOTO   051
004F:  BCF    07.7
0050:  GOTO   052
0051:  BSF    07.7
0052:  BCF    20.7
0053:  MOVF   20,W
0054:  BSF    03.5
0055:  MOVWF  07
....................  
....................  delay_cycles(1); 
0056:  NOP
....................  output_high(LCD_E); 
0057:  BCF    03.5
0058:  BCF    20.2
0059:  MOVF   20,W
005A:  BSF    03.5
005B:  MOVWF  07
005C:  BCF    03.5
005D:  BSF    07.2
....................  delay_us(2); 
005E:  GOTO   05F
....................  output_low(LCD_E); 
005F:  BCF    20.2
0060:  MOVF   20,W
0061:  BSF    03.5
0062:  MOVWF  07
0063:  BCF    03.5
0064:  BCF    07.2
.................... } 
0065:  RETURN
....................  
.................... //----------------------------------- 
.................... // This sub-routine is only called by lcd_read_byte(). 
.................... // It's not a stand-alone routine.  For example, the 
.................... // R/W signal is set high by lcd_read_byte() before 
.................... // this routine is called. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_nibble(void) 
.................... { 
.................... int8 retval; 
.................... // Create bit variables so that we can easily set 
.................... // individual bits in the retval variable. 
.................... #bit retval_0 = retval.0 
.................... #bit retval_1 = retval.1 
.................... #bit retval_2 = retval.2 
.................... #bit retval_3 = retval.3 
....................  
.................... retval = 0; 
0066:  CLRF   2D
....................  
.................... output_high(LCD_E); 
0067:  BCF    20.2
0068:  MOVF   20,W
0069:  BSF    03.5
006A:  MOVWF  07
006B:  BCF    03.5
006C:  BSF    07.2
.................... delay_cycles(1); 
006D:  NOP
....................  
.................... retval_0 = input(LCD_DB4); 
006E:  BSF    20.4
006F:  MOVF   20,W
0070:  BSF    03.5
0071:  MOVWF  07
0072:  BCF    03.5
0073:  BCF    2D.0
0074:  BTFSC  07.4
0075:  BSF    2D.0
.................... retval_1 = input(LCD_DB5); 
0076:  BSF    20.5
0077:  MOVF   20,W
0078:  BSF    03.5
0079:  MOVWF  07
007A:  BCF    03.5
007B:  BCF    2D.1
007C:  BTFSC  07.5
007D:  BSF    2D.1
.................... retval_2 = input(LCD_DB6); 
007E:  BSF    20.6
007F:  MOVF   20,W
0080:  BSF    03.5
0081:  MOVWF  07
0082:  BCF    03.5
0083:  BCF    2D.2
0084:  BTFSC  07.6
0085:  BSF    2D.2
.................... retval_3 = input(LCD_DB7); 
0086:  BSF    20.7
0087:  MOVF   20,W
0088:  BSF    03.5
0089:  MOVWF  07
008A:  BCF    03.5
008B:  BCF    2D.3
008C:  BTFSC  07.7
008D:  BSF    2D.3
....................  
.................... output_low(LCD_E); 
008E:  BCF    20.2
008F:  MOVF   20,W
0090:  BSF    03.5
0091:  MOVWF  07
0092:  BCF    03.5
0093:  BCF    07.2
....................  
.................... return(retval); 
0094:  MOVF   2D,W
0095:  MOVWF  78
.................... } 
0096:  RETURN
.................... #endif 
....................  
.................... //--------------------------------------- 
.................... // Read a byte from the LCD and return it. 
....................  
.................... #ifdef USE_LCD_RW 
.................... int8 lcd_read_byte(void) 
.................... { 
.................... int8 low; 
.................... int8 high; 
....................  
.................... output_high(LCD_RW); 
*
009D:  BCF    20.1
009E:  MOVF   20,W
009F:  BSF    03.5
00A0:  MOVWF  07
00A1:  BCF    03.5
00A2:  BSF    07.1
.................... delay_cycles(1); 
00A3:  NOP
....................  
.................... high = lcd_read_nibble(); 
00A4:  CALL   066
00A5:  MOVF   78,W
00A6:  MOVWF  2C
....................  
.................... low = lcd_read_nibble(); 
00A7:  CALL   066
00A8:  MOVF   78,W
00A9:  MOVWF  2B
....................  
.................... return( (high<<4) | low); 
00AA:  SWAPF  2C,W
00AB:  MOVWF  77
00AC:  MOVLW  F0
00AD:  ANDWF  77,F
00AE:  MOVF   77,W
00AF:  IORWF  2B,W
00B0:  MOVWF  78
.................... } 
.................... #endif 
....................  
.................... //---------------------------------------- 
.................... // Send a byte to the LCD. 
.................... void lcd_send_byte(int8 address, int8 n) 
.................... { 
.................... output_low(LCD_RS); 
*
0097:  BCF    20.3
0098:  MOVF   20,W
0099:  BSF    03.5
009A:  MOVWF  07
009B:  BCF    03.5
009C:  BCF    07.3
....................  
.................... #ifdef USE_LCD_RW 
.................... while(bit_test(lcd_read_byte(),7)) ; 
*
00B1:  MOVF   78,W
00B2:  MOVWF  2B
00B3:  BTFSC  2B.7
00B4:  GOTO   09D
.................... #else 
.................... delay_us(60); 
.................... #endif 
....................  
.................... if(address) 
00B5:  MOVF   29,F
00B6:  BTFSC  03.2
00B7:  GOTO   0BF
....................    output_high(LCD_RS); 
00B8:  BCF    20.3
00B9:  MOVF   20,W
00BA:  BSF    03.5
00BB:  MOVWF  07
00BC:  BCF    03.5
00BD:  BSF    07.3
.................... else 
00BE:  GOTO   0C5
....................    output_low(LCD_RS); 
00BF:  BCF    20.3
00C0:  MOVF   20,W
00C1:  BSF    03.5
00C2:  MOVWF  07
00C3:  BCF    03.5
00C4:  BCF    07.3
....................  
....................  delay_cycles(1); 
00C5:  NOP
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00C6:  BCF    20.1
00C7:  MOVF   20,W
00C8:  BSF    03.5
00C9:  MOVWF  07
00CA:  BCF    03.5
00CB:  BCF    07.1
.................... delay_cycles(1); 
00CC:  NOP
.................... #endif 
....................  
.................... output_low(LCD_E); 
00CD:  BCF    20.2
00CE:  MOVF   20,W
00CF:  BSF    03.5
00D0:  MOVWF  07
00D1:  BCF    03.5
00D2:  BCF    07.2
....................  
.................... lcd_send_nibble(n >> 4); 
00D3:  SWAPF  2A,W
00D4:  MOVWF  2B
00D5:  MOVLW  0F
00D6:  ANDWF  2B,F
00D7:  MOVF   2B,W
00D8:  MOVWF  2C
00D9:  CALL   02F
.................... lcd_send_nibble(n & 0xf); 
00DA:  MOVF   2A,W
00DB:  ANDLW  0F
00DC:  MOVWF  2B
00DD:  MOVWF  2C
00DE:  CALL   02F
.................... } 
00DF:  RETURN
....................  
.................... //---------------------------- 
.................... void lcd_init(void) 
.................... { 
.................... int8 i; 
....................  
.................... output_low(LCD_RS); 
00E0:  BCF    20.3
00E1:  MOVF   20,W
00E2:  BSF    03.5
00E3:  MOVWF  07
00E4:  BCF    03.5
00E5:  BCF    07.3
....................  
.................... #ifdef USE_LCD_RW 
.................... output_low(LCD_RW); 
00E6:  BCF    20.1
00E7:  MOVF   20,W
00E8:  BSF    03.5
00E9:  MOVWF  07
00EA:  BCF    03.5
00EB:  BCF    07.1
.................... #endif 
....................  
.................... output_low(LCD_E); 
00EC:  BCF    20.2
00ED:  MOVF   20,W
00EE:  BSF    03.5
00EF:  MOVWF  07
00F0:  BCF    03.5
00F1:  BCF    07.2
....................  
.................... delay_ms(15); 
00F2:  MOVLW  0F
00F3:  MOVWF  25
00F4:  CALL   01A
....................  
.................... for(i=0 ;i < 3; i++) 
00F5:  CLRF   21
00F6:  MOVF   21,W
00F7:  SUBLW  02
00F8:  BTFSS  03.0
00F9:  GOTO   102
....................    { 
....................     lcd_send_nibble(0x03); 
00FA:  MOVLW  03
00FB:  MOVWF  2C
00FC:  CALL   02F
....................     delay_ms(5); 
00FD:  MOVLW  05
00FE:  MOVWF  25
00FF:  CALL   01A
....................    } 
0100:  INCF   21,F
0101:  GOTO   0F6
....................  
.................... lcd_send_nibble(0x02); 
0102:  MOVLW  02
0103:  MOVWF  2C
0104:  CALL   02F
....................  
.................... for(i=0; i < sizeof(LCD_INIT_STRING); i++) 
0105:  CLRF   21
0106:  MOVF   21,W
0107:  SUBLW  03
0108:  BTFSS  03.0
0109:  GOTO   113
....................    { 
....................     lcd_send_byte(0, LCD_INIT_STRING[i]); 
010A:  MOVF   21,W
010B:  CALL   004
010C:  MOVWF  22
010D:  CLRF   29
010E:  MOVF   22,W
010F:  MOVWF  2A
0110:  CALL   097
....................  
....................     // If the R/W signal is not used, then 
....................     // the busy bit can't be polled.  One of 
....................     // the init commands takes longer than 
....................     // the hard-coded delay of 60 us, so in 
....................     // that case, lets just do a 5 ms delay 
....................     // after all four of them. 
....................     #ifndef USE_LCD_RW 
....................     delay_ms(5); 
....................     #endif 
....................    } 
0111:  INCF   21,F
0112:  GOTO   106
....................  
.................... } 
0113:  BCF    0A.3
0114:  BCF    0A.4
0115:  GOTO   1A2 (RETURN)
....................  
.................... //---------------------------- 
....................  
.................... void lcd_gotoxy(int8 x, int8 y) 
.................... { 
.................... int8 address; 
....................  
.................... if(y != 1) 
0116:  DECFSZ 26,W
0117:  GOTO   119
0118:  GOTO   11C
....................    address = lcd_line_two; 
0119:  MOVLW  40
011A:  MOVWF  27
.................... else 
011B:  GOTO   11D
....................    address=0; 
011C:  CLRF   27
....................  
.................... address += x-1; 
011D:  MOVLW  01
011E:  SUBWF  25,W
011F:  ADDWF  27,F
.................... lcd_send_byte(0, 0x80 | address); 
0120:  MOVF   27,W
0121:  IORLW  80
0122:  MOVWF  28
0123:  CLRF   29
0124:  MOVF   28,W
0125:  MOVWF  2A
0126:  CALL   097
.................... } 
0127:  RETURN
....................  
.................... //----------------------------- 
.................... void lcd_putc(char c) 
.................... { 
....................  switch(c) 
....................    { 
0128:  MOVF   24,W
0129:  XORLW  0C
012A:  BTFSC  03.2
012B:  GOTO   133
012C:  XORLW  06
012D:  BTFSC  03.2
012E:  GOTO   13B
012F:  XORLW  02
0130:  BTFSC  03.2
0131:  GOTO   141
0132:  GOTO   146
....................     case '\f': 
....................       lcd_send_byte(0,1); 
0133:  CLRF   29
0134:  MOVLW  01
0135:  MOVWF  2A
0136:  CALL   097
....................       delay_ms(2); 
0137:  MOVLW  02
0138:  MOVWF  25
0139:  CALL   01A
....................       break; 
013A:  GOTO   14C
....................  
....................     case '\n': 
....................        lcd_gotoxy(1,2); 
013B:  MOVLW  01
013C:  MOVWF  25
013D:  MOVLW  02
013E:  MOVWF  26
013F:  CALL   116
....................        break; 
0140:  GOTO   14C
....................  
....................     case '\b': 
....................        lcd_send_byte(0,0x10); 
0141:  CLRF   29
0142:  MOVLW  10
0143:  MOVWF  2A
0144:  CALL   097
....................        break; 
0145:  GOTO   14C
....................  
....................     default: 
....................        lcd_send_byte(1,c); 
0146:  MOVLW  01
0147:  MOVWF  29
0148:  MOVF   24,W
0149:  MOVWF  2A
014A:  CALL   097
....................        break; 
014B:  GOTO   14C
....................    } 
.................... } 
014C:  RETURN
....................  
.................... //------------------------------ 
.................... #ifdef USE_LCD_RW 
.................... char lcd_getc(int8 x, int8 y) 
.................... { 
.................... char value; 
....................  
.................... lcd_gotoxy(x,y); 
....................  
.................... // Wait until busy flag is low. 
.................... while(bit_test(lcd_read_byte(),7)); 
....................  
.................... output_high(LCD_RS); 
.................... value = lcd_read_byte(); 
.................... output_low(lcd_RS); 
....................  
.................... return(value); 
.................... } 
.................... #endif 
....................  
.................... void lcd_setcursor_vb(short visible, short blink) {  
....................   lcd_send_byte(0, 0xC|(visible<<1)|blink);  
.................... }  
....................  
....................  
....................  
....................  
....................  
.................... void main() 
.................... { 
*
0019:  DATA 00,00
*
0193:  CLRF   04
0194:  BCF    03.7
0195:  MOVLW  1F
0196:  ANDWF  03,F
0197:  BSF    03.5
0198:  BSF    1F.0
0199:  BSF    1F.1
019A:  BSF    1F.2
019B:  BCF    1F.3
019C:  MOVLW  07
019D:  MOVWF  1C
.................... lcd_init();          //inicia comunicacion con lcd y lo configura 
*
01A1:  GOTO   0E0
.................... delay_ms(500); 
01A2:  MOVLW  02
01A3:  MOVWF  21
01A4:  MOVLW  FA
01A5:  MOVWF  25
01A6:  CALL   01A
01A7:  DECFSZ 21,F
01A8:  GOTO   1A4
.................... lcd_gotoxy(3,1);                       //escribe el mensaje en la posicion x=3,y=1 
01A9:  MOVLW  03
01AA:  MOVWF  25
01AB:  MOVLW  01
01AC:  MOVWF  26
01AD:  CALL   116
.................... printf(lcd_putc,"  Electiva I");           //escribe el mensaje en la pantalla 
01AE:  MOVLW  0C
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  MOVLW  00
01B2:  MOVWF  0F
01B3:  BCF    03.6
01B4:  CALL   14D
.................... DELAY_MS(500); 
01B5:  MOVLW  02
01B6:  MOVWF  21
01B7:  MOVLW  FA
01B8:  MOVWF  25
01B9:  CALL   01A
01BA:  DECFSZ 21,F
01BB:  GOTO   1B7
.................... printf(lcd_putc,"\f"); 
01BC:  MOVLW  0C
01BD:  MOVWF  24
01BE:  CALL   128
....................  
.................... while(true) 
....................    {   
....................       lcd_gotoxy(3,1);                       //escribe el mensaje en la posicion x=3,y=1 
01BF:  MOVLW  03
01C0:  MOVWF  25
01C1:  MOVLW  01
01C2:  MOVWF  26
01C3:  CALL   116
....................       printf(lcd_putc,"Revolucion!!");  
01C4:  MOVLW  13
01C5:  BSF    03.6
01C6:  MOVWF  0D
01C7:  MOVLW  00
01C8:  MOVWF  0F
01C9:  BCF    03.6
01CA:  CALL   14D
....................    } 
01CB:  GOTO   1BF
.................... }                                       
....................  
....................  
....................  
....................  
01CC:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
