CCS PCM C Compiler, Version 4.104, 5967               29-May-11 10:48

               Filename: C:\Documents and Settings\Administrador\Escritorio\Calculadora funcion Seno\Calculadora con funcion seno.lst

               ROM used: 5947 words (73%)
                         Largest free fragment is 2048
               RAM used: 52 (14%) at main() level
                         140 (38%) worst case
               Stack:    4 locations

*
0000:  MOVLW  13
0001:  MOVWF  0A
0002:  GOTO   3C8
0003:  NOP
.................... #include<16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
0029:  MOVLW  5A
002A:  MOVWF  04
002B:  BCF    03.7
002C:  MOVF   00,W
002D:  BTFSC  03.2
002E:  GOTO   03D
002F:  MOVLW  01
0030:  MOVWF  78
0031:  CLRF   77
0032:  DECFSZ 77,F
0033:  GOTO   032
0034:  DECFSZ 78,F
0035:  GOTO   031
0036:  MOVLW  4A
0037:  MOVWF  77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  GOTO   03B
003B:  DECFSZ 00,F
003C:  GOTO   02F
003D:  RETURN
.................... #fuses xt,nowdt 
.................... #include <lcd2.c> 
.................... //////////////////////////////////////////////////////////////////////////////////// 
.................... //									LCD.C										  // 
.................... // 					FUNCIONES PARA GESTION DE DISPLAY LCD    					  // 
.................... //			8BITS, FUENTE 5X7, 2,3,4 LINEAS X 16, 20 CARACTERES:        		  // 
.................... // 		lcd_init() Debe ser invocada antes que las otras funciones. 			  // 
.................... // 		lcd_putc(c) Visualiza c en la siguiente posición del display. 			  // 
.................... // 					Caracteres especiales de control: 							  // 
.................... // 							\f Borra display 									  // 
.................... // 							\n Salta a la siguiente línea						  // 
.................... // 							\b Retrocede una posición. 							  // 
.................... // 		lcd_gotoxy(x,y) Selecciona una nueva posición de escritura en el display. // 
.................... //						donde x es el caracter de 1 a 16 o 20 según Display,      // 
.................... //						donde y	es el número de la línea de 1 a 4                 // 
.................... // 						(la esquina superior izquierda es 1,1) 					  // 
.................... // 		lcd_getc(x,y) Devuelve el caracter de la posición x,y del display. 	      // 
.................... //		NOTA: Para emplear display de N*16 o N*20 Carácteres Por Línea 			  // 
.................... // 		poner los valores correspondientes en lcd (quitar los comentarios abajo)  // 
.................... //		PINES DE CONTROL RA0(rs(pin4)),RA1(rw(pin5)),RA3(en(pin6))				  // 
.................... //		PINES DE DATOS DE RB0(db0(pin7)) A RB7(db7(pin14))						  // 
.................... //					   MODIF.: ING. FRANK GIRALDO - UD							  // 
.................... //////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //--------------------------------------------------------------------------------// 
.................... #bit lcd_enable = 5.2 
.................... #bit lcd_rw = 5.1 
.................... #bit lcd_rs = 5.0 
.................... #byte lcd_a = 5 
.................... #byte lcd_b = 6 //portb 
.................... int line; 
.................... // 
.................... //CONFIGURACION LCD 4*16 LINEAS 
.................... //#define LCD_LINEA1 0x80   // Direccion de memoria para la primera linea 
.................... //#define LCD_LINEA2 0x40   // Direccion de memoria para la segunda linea 
.................... //#define LCD_LINEA3 0x10   // Direccion de memoria para la tercera linea 
.................... //#define LCD_LINEA4 0x50   // Direccion de memoria para la cuarta linea 
.................... // 
.................... // 
.................... //CONFIGURACION LCD 4*20 LINEAS 
.................... #define LCD_LINEA1 0x80 // Direccion de memoria para la primera linea 
.................... #define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea 
.................... #define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea 
.................... #define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea 
.................... // 
.................... // 
.................... #define LCD_DATO 1 
.................... #define LCD_COMANDO 0 
.................... #define LCD_CLEAR 0x01 
.................... #define LCD_HOME 0x02 
.................... #define LCD_DISPLAY_OFF 0x08 
.................... #define LCD_DISPLAY_ON 0x0C 
.................... #define LCD_CURSOR_ON 0x0E 
.................... #define LCD_CURSOR_OFF 0x0C 
.................... #define LCD_CURSOR_BLINK 0x0F 
.................... #define LCD_INC 0x06 
.................... #define LCD_DEC 0x04 
.................... #define LCD_CURSOR_SHIFT_LEFT 0x10 
.................... #define LCD_CURSOR_SHIFT_RIGHT 0x14 
.................... #define LCD_DISPLAY_SHIFT_RIGHT 0x1C 
.................... #define LCD_DISPLAY_SHIFT_LEFT 0x18 
.................... #define LCDCGRAM 0x40 
.................... // 
.................... int lcd_leer() 
.................... { 
.................... int valor; 
.................... set_tris_a(0xF8); 
*
0045:  MOVLW  F8
0046:  BSF    03.5
0047:  MOVWF  05
.................... set_tris_b(0xFF); 
0048:  MOVLW  FF
0049:  MOVWF  06
....................  
.................... lcd_rw = 1; 
004A:  BCF    03.5
004B:  BSF    05.1
.................... delay_cycles(1); 
004C:  NOP
.................... lcd_enable = 1; 
004D:  BSF    05.2
.................... delay_cycles(1); 
004E:  NOP
.................... valor = lcd_b; 
004F:  MOVF   06,W
0050:  MOVWF  60
.................... lcd_enable = 0; 
0051:  BCF    05.2
.................... delay_us(40); 
0052:  MOVLW  0D
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
....................  
.................... set_tris_b(0x00); 
0056:  MOVLW  00
0057:  BSF    03.5
0058:  MOVWF  06
.................... return valor; 
0059:  BCF    03.5
005A:  MOVF   60,W
005B:  MOVWF  78
.................... } 
.................... // 
.................... void lcd_size(int ln, int ch){ 
....................  
.................... } 
.................... // 
.................... void lcd_enviar(int dir, int valor){ 
.................... set_tris_a(0xF8); 
*
003E:  MOVLW  F8
003F:  BSF    03.5
0040:  MOVWF  05
.................... set_tris_b(0x00); 
0041:  MOVLW  00
0042:  MOVWF  06
....................  
.................... lcd_rs = 0; 
0043:  BCF    03.5
0044:  BCF    05.0
.................... while( bit_test(lcd_leer(),7) ); 
*
005C:  MOVF   78,W
005D:  MOVWF  60
005E:  BTFSC  60.7
005F:  GOTO   045
.................... lcd_rs = dir; 
0060:  BTFSS  5E.0
0061:  BCF    05.0
0062:  BTFSC  5E.0
0063:  BSF    05.0
.................... delay_cycles(1); 
0064:  NOP
.................... lcd_rw = 0; 
0065:  BCF    05.1
.................... delay_cycles(1); 
0066:  NOP
.................... lcd_enable = 0; 
0067:  BCF    05.2
.................... lcd_b = valor; 
0068:  MOVF   5F,W
0069:  MOVWF  06
.................... delay_cycles(1); 
006A:  NOP
.................... lcd_enable = 1; 
006B:  BSF    05.2
.................... delay_us(2); 
006C:  GOTO   06D
.................... lcd_enable = 0; 
006D:  BCF    05.2
.................... delay_us(40); 
006E:  MOVLW  0D
006F:  MOVWF  77
0070:  DECFSZ 77,F
0071:  GOTO   070
.................... } 
0072:  RETURN
.................... // 
.................... void lcd_init() 
.................... { 
.................... int i; 
.................... set_tris_a(0xF8); 
0073:  MOVLW  F8
0074:  BSF    03.5
0075:  MOVWF  05
.................... set_tris_b(0x00); 
0076:  MOVLW  00
0077:  MOVWF  06
....................  
.................... lcd_enable = 0; 
0078:  BCF    03.5
0079:  BCF    05.2
.................... lcd_rw = 0; 
007A:  BCF    05.1
.................... lcd_rs = 0; 
007B:  BCF    05.0
.................... delay_ms(15); 
007C:  MOVLW  0F
007D:  MOVWF  5A
007E:  CALL   029
....................  
.................... for(i=0; i<3; i++) 
007F:  CLRF   4C
0080:  MOVF   4C,W
0081:  SUBLW  02
0082:  BTFSS  03.0
0083:  GOTO   08D
.................... { 
.................... lcd_enviar(LCD_COMANDO,0x38); 
0084:  CLRF   5E
0085:  MOVLW  38
0086:  MOVWF  5F
0087:  CALL   03E
.................... delay_ms(5); 
0088:  MOVLW  05
0089:  MOVWF  5A
008A:  CALL   029
.................... } 
008B:  INCF   4C,F
008C:  GOTO   080
.................... lcd_enviar(LCD_COMANDO,LCD_DISPLAY_ON); 
008D:  CLRF   5E
008E:  MOVLW  0C
008F:  MOVWF  5F
0090:  CALL   03E
.................... lcd_enviar(LCD_COMANDO,0x06); 
0091:  CLRF   5E
0092:  MOVLW  06
0093:  MOVWF  5F
0094:  CALL   03E
.................... lcd_enviar(LCD_COMANDO,LCD_CLEAR); 
0095:  CLRF   5E
0096:  MOVLW  01
0097:  MOVWF  5F
0098:  CALL   03E
.................... lcd_enviar(LCD_COMANDO,LCD_HOME); 
0099:  CLRF   5E
009A:  MOVLW  02
009B:  MOVWF  5F
009C:  CALL   03E
.................... line=0; 
009D:  CLRF   20
.................... } 
009E:  BCF    0A.3
009F:  BSF    0A.4
00A0:  GOTO   3DA (RETURN)
.................... // 
.................... void lcd_gotoxy( byte x, byte y) { 
.................... byte dir; 
.................... dir=0; 
*
00A4:  CLRF   5C
.................... line=y; 
00A5:  MOVF   5B,W
00A6:  MOVWF  20
.................... if(x==0) 
00A7:  MOVF   5A,F
00A8:  BTFSS  03.2
00A9:  GOTO   0AD
.................... 	x=1; 
00AA:  MOVLW  01
00AB:  MOVWF  5A
.................... else{ 
00AC:  GOTO   0AD
.................... } 
.................... if(y!=0){ 
00AD:  MOVF   5B,F
00AE:  BTFSC  03.2
00AF:  GOTO   0D5
.................... 		if(y==1){ 
00B0:  DECFSZ 5B,W
00B1:  GOTO   0B8
.................... 		dir=LCD_LINEA1; 
00B2:  MOVLW  80
00B3:  MOVWF  5C
.................... 		dir+=x-1; 
00B4:  MOVLW  01
00B5:  SUBWF  5A,W
00B6:  ADDWF  5C,F
.................... 				} 
.................... 		else{	if(y==2){ 
00B7:  GOTO   0D5
00B8:  MOVF   5B,W
00B9:  SUBLW  02
00BA:  BTFSS  03.2
00BB:  GOTO   0C2
.................... 				dir=LCD_LINEA2; 
00BC:  MOVLW  40
00BD:  MOVWF  5C
.................... 				dir+=x-1; 
00BE:  MOVLW  01
00BF:  SUBWF  5A,W
00C0:  ADDWF  5C,F
.................... 						} 
.................... 					 	else{	if(y==3){ 
00C1:  GOTO   0D5
00C2:  MOVF   5B,W
00C3:  SUBLW  03
00C4:  BTFSS  03.2
00C5:  GOTO   0CC
.................... 								dir=LCD_LINEA3; 
00C6:  MOVLW  14
00C7:  MOVWF  5C
.................... 								dir+=x-1; 
00C8:  MOVLW  01
00C9:  SUBWF  5A,W
00CA:  ADDWF  5C,F
.................... 										} 
.................... 								else{	if(y==4){ 
00CB:  GOTO   0D5
00CC:  MOVF   5B,W
00CD:  SUBLW  04
00CE:  BTFSS  03.2
00CF:  GOTO   0D5
.................... 										dir=LCD_LINEA4; 
00D0:  MOVLW  54
00D1:  MOVWF  5C
.................... 										dir+=x-1; 
00D2:  MOVLW  01
00D3:  SUBWF  5A,W
00D4:  ADDWF  5C,F
.................... 												} 
.................... 									} 
.................... 							} 
.................... 			} 
.................... 		} 
.................... lcd_enviar(LCD_COMANDO,0x80|dir); 
00D5:  MOVF   5C,W
00D6:  IORLW  80
00D7:  MOVWF  5D
00D8:  CLRF   5E
00D9:  MOVF   5D,W
00DA:  MOVWF  5F
00DB:  CALL   03E
.................... } 
00DC:  RETURN
.................... // 
.................... void lcd_putc( char c) { 
.................... switch (c) { 
00DD:  MOVF   59,W
00DE:  XORLW  0C
00DF:  BTFSC  03.2
00E0:  GOTO   0E8
00E1:  XORLW  06
00E2:  BTFSC  03.2
00E3:  GOTO   0F0
00E4:  XORLW  02
00E5:  BTFSC  03.2
00E6:  GOTO   105
00E7:  GOTO   10A
.................... case '\f' : lcd_enviar(LCD_COMANDO,0x01); 
00E8:  CLRF   5E
00E9:  MOVLW  01
00EA:  MOVWF  5F
00EB:  CALL   03E
.................... 			delay_ms(2); 
00EC:  MOVLW  02
00ED:  MOVWF  5A
00EE:  CALL   029
.................... 			break; 
00EF:  GOTO   110
.................... case '\n' : ++line; 
00F0:  INCF   20,F
.................... 			if(line>=1 || line<=4) 
00F1:  MOVF   20,W
00F2:  SUBLW  00
00F3:  BTFSS  03.0
00F4:  GOTO   0F9
00F5:  MOVF   20,W
00F6:  SUBLW  04
00F7:  BTFSS  03.0
00F8:  GOTO   0FF
.................... 				lcd_gotoxy(1,line); 
00F9:  MOVLW  01
00FA:  MOVWF  5A
00FB:  MOVF   20,W
00FC:  MOVWF  5B
00FD:  CALL   0A4
.................... 			else{ 
00FE:  GOTO   104
.................... 				line=0; 
00FF:  CLRF   20
.................... 				lcd_gotoxy(1,1); 
0100:  MOVLW  01
0101:  MOVWF  5A
0102:  MOVWF  5B
0103:  CALL   0A4
.................... 				} 
.................... 			break; 
0104:  GOTO   110
.................... case '\b' : lcd_enviar(LCD_COMANDO,0x10); 
0105:  CLRF   5E
0106:  MOVLW  10
0107:  MOVWF  5F
0108:  CALL   03E
.................... 			break; 
0109:  GOTO   110
.................... default :   lcd_enviar(LCD_DATO,c); 
010A:  MOVLW  01
010B:  MOVWF  5E
010C:  MOVF   59,W
010D:  MOVWF  5F
010E:  CALL   03E
.................... 			break; 
010F:  GOTO   110
.................... } 
.................... } 
0110:  RETURN
.................... // 
.................... char lcd_getc( int x, int y) { 
.................... char valor; 
.................... lcd_gotoxy(x,y); 
....................  
.................... lcd_rs = 1; 
.................... valor = lcd_leer(); 
.................... lcd_rs = 0; 
.................... return valor; 
.................... } 
....................  
.................... #include <kbd1.c> 
.................... //////////////////////////////////////////////////////////////////////////////////// 
.................... //                                   KBD.C                                        // 
.................... //               FUNCIONES PARA ESCANEO DE UN TECLADO MATRICIAL                   // 
.................... //                         4X4 HEXADECIMAL, EN EL PORTB                           // 
.................... //       kbd_init()       Debe ser invocada antes que las otras funciones.         // 
.................... //       c=lcd_getc(c)    Si há sido presionada una tecla devuelve el caracter c    // 
.................... //                  y lo salva en el char c, sino se presiona una tecla       // 
.................... //                  retorna el valor /0, esta función puede invocarse         // 
.................... //                  frecuentemente para no perder teclas pulsadas.            // 
.................... //        NOTA: REQUIERE COLOCAR RESISTENCIAS (2.2K) EN LOS PINES DE COLUMNAS     // 
.................... //               PINES DE COLUMNAS DE RB0(COL0) A RB3(COL3))                   // 
.................... //               PINES DE FILAS DE RB4(ROW0)) A RB7(ROW3))                    // 
.................... //                  MODIF.: ING. FRANK GIRALDO - UD                         // 
.................... //                MODIF.: ING. JUAN CARLOS MARTINEZ - ESCOM             // 
.................... //////////////////////////////////////////////////////////////////////////////////// 
.................... /*////////////////////////////////////////////////////////////////////////////////// 
.................... *    RB0 RB1 RB2 RB3 
.................... *     |   |   |   | 
.................... *     c0  c1  c2  c3 
.................... *   | 1 | 2 | 3 | F | r0 - RB4 
.................... *   | 4 | 5 | 6 | E | r1 - RB5 
.................... *   | 7 | 8 | 9 | D | r2 - RB6 
.................... *   | A | 0 | B | C | r3 - RB7 
.................... * 
.................... *   COLUMNS=OUTs 
.................... *   ROWS=INs 
.................... *   SE HABILITAN PULL-UP INTERNAS 
.................... *   SE REQUIERE COLOCAR RESISTENCIAS (2.2K) EN LOS PINES DE COLUMNAS 
.................... * 
.................... */////////////////////////////////////////////////////////////////////////////////// 
.................... // 
.................... #byte portkbd = 6                  //portkbd = portb 
.................... //Keypad connection:   (Column 0 es B0) 
.................... //                Bx: 
.................... #define COL0 (0 << 0) 
.................... #define COL1 (0 << 1) 
.................... #define COL2 (0 << 2) 
.................... #define COL3 (0 << 3) 
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 5) 
.................... #define ROW2 (1 << 6) 
.................... #define ROW3 (1 << 7) 
.................... #define ALL_ROWS (ROW3|ROW2|ROW1|ROW0) 
.................... #define ALL_PINS (ALL_ROWS|COL3|COL2|COL1|COL0) 
.................... // 
.................... // Keypad layout: 
.................... char const KEYS[4][4] = {{'1','2','3','/'}, 
....................                          {'4','5','6','x'}, 
....................                          {'7','8','9','-'}, 
....................                          {'n','0','=','+'}}; 
.................... // 
.................... #define KBD_DEBOUNCE_FACTOR 0 
.................... // Modifique el valor de temporización antirrebote con (KBD_DEBOUNCE_FACTOR = n/333), 
.................... // en donde n es el número de veces por segundo en los que ud. invoca 
.................... //la función kbd_getc(). 
.................... // 
.................... void kbd_init() { 
.................... } 
*
00A1:  BCF    0A.3
00A2:  BSF    0A.4
00A3:  GOTO   3DD (RETURN)
.................... // 
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
13D3:  BCF    03.5
13D4:  CLRF   21
....................    static short int kbd_down; 
13D5:  BCF    22.0
....................    static char last_key; 
13D6:  CLRF   23
....................    static BYTE col; 
13D7:  CLRF   24
....................    BYTE kchar; 
....................    BYTE row; 
....................    port_b_pullups(TRUE); 
*
0157:  BSF    03.5
0158:  BCF    01.7
....................    kchar='\0'; 
0159:  BCF    03.5
015A:  CLRF   4C
....................  
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
015B:  INCF   21,F
015C:  BTFSC  03.2
015D:  GOTO   1BD
....................        switch (col) { 
015E:  MOVF   24,W
015F:  ADDLW  FC
0160:  BTFSC  03.0
0161:  GOTO   180
0162:  ADDLW  04
0163:  GOTO   1C6
....................          case 0   : set_tris_b(ALL_PINS&~COL0); 
0164:  MOVLW  F0
0165:  BSF    03.5
0166:  MOVWF  06
....................                     portkbd=(0b1110); 
0167:  MOVLW  0E
0168:  BCF    03.5
0169:  MOVWF  06
....................                     break; 
016A:  GOTO   180
....................          case 1   : set_tris_b(ALL_PINS&~COL1); 
016B:  MOVLW  F0
016C:  BSF    03.5
016D:  MOVWF  06
....................                     portkbd=(0b1101); 
016E:  MOVLW  0D
016F:  BCF    03.5
0170:  MOVWF  06
....................                     break; 
0171:  GOTO   180
....................          case 2   : set_tris_b(ALL_PINS&~COL2); 
0172:  MOVLW  F0
0173:  BSF    03.5
0174:  MOVWF  06
....................                     portkbd=(0b1011); 
0175:  MOVLW  0B
0176:  BCF    03.5
0177:  MOVWF  06
....................                     break; 
0178:  GOTO   180
....................           case 3   : set_tris_b(ALL_PINS&~COL3); 
0179:  MOVLW  F0
017A:  BSF    03.5
017B:  MOVWF  06
....................                     portkbd=(0b0111); 
017C:  MOVLW  07
017D:  BCF    03.5
017E:  MOVWF  06
....................                     break; 
017F:  GOTO   180
....................        } 
....................  
....................        if(kbd_down) { 
0180:  BTFSS  22.0
0181:  GOTO   18C
....................          if((portkbd & (ALL_ROWS))==(ALL_ROWS)) { 
0182:  MOVF   06,W
0183:  ANDLW  F0
0184:  SUBLW  F0
0185:  BTFSS  03.2
0186:  GOTO   18B
....................            kbd_down=FALSE; 
0187:  BCF    22.0
....................            kchar=last_key; 
0188:  MOVF   23,W
0189:  MOVWF  4C
....................            last_key='\0'; 
018A:  CLRF   23
....................          } 
....................        } else { 
018B:  GOTO   1BC
....................           if((portkbd & (ALL_ROWS))!=(ALL_ROWS)) { 
018C:  MOVF   06,W
018D:  ANDLW  F0
018E:  SUBLW  F0
018F:  BTFSC  03.2
0190:  GOTO   1B7
....................              if((portkbd & ROW0)==0) 
0191:  MOVF   06,W
0192:  ANDLW  10
0193:  BTFSS  03.2
0194:  GOTO   197
....................                row=0; 
0195:  CLRF   4D
....................              else if((portkbd & ROW1)==0) 
0196:  GOTO   1AB
0197:  MOVF   06,W
0198:  ANDLW  20
0199:  BTFSS  03.2
019A:  GOTO   19E
....................                row=1; 
019B:  MOVLW  01
019C:  MOVWF  4D
....................              else if((portkbd & ROW2)==0) 
019D:  GOTO   1AB
019E:  MOVF   06,W
019F:  ANDLW  40
01A0:  BTFSS  03.2
01A1:  GOTO   1A5
....................                row=2; 
01A2:  MOVLW  02
01A3:  MOVWF  4D
....................              else if((portkbd & ROW3)==0) 
01A4:  GOTO   1AB
01A5:  MOVF   06,W
01A6:  ANDLW  80
01A7:  BTFSS  03.2
01A8:  GOTO   1AB
....................                row=3; 
01A9:  MOVLW  03
01AA:  MOVWF  4D
....................              last_key = KEYS[row][col]; 
01AB:  RLF    4D,W
01AC:  MOVWF  77
01AD:  RLF    77,F
01AE:  MOVLW  FC
01AF:  ANDWF  77,F
01B0:  MOVF   77,W
01B1:  ADDWF  24,W
01B2:  CALL   004
01B3:  MOVWF  78
01B4:  MOVWF  23
....................              kbd_down = TRUE; 
01B5:  BSF    22.0
....................           } else { 
01B6:  GOTO   1BC
....................              ++col; 
01B7:  INCF   24,F
....................              if(col==4) 
01B8:  MOVF   24,W
01B9:  SUBLW  04
01BA:  BTFSC  03.2
....................                col=0; 
01BB:  CLRF   24
....................           } 
....................        } 
....................       kbd_call_count=0; 
01BC:  CLRF   21
....................    } 
....................   kchar=last_key; 
01BD:  MOVF   23,W
01BE:  MOVWF  4C
....................   set_tris_b(ALL_PINS); 
01BF:  MOVLW  F0
01C0:  BSF    03.5
01C1:  MOVWF  06
....................   return(kchar); 
01C2:  BCF    03.5
01C3:  MOVF   4C,W
01C4:  MOVWF  78
.................... } 
01C5:  RETURN
....................  
.................... char dato,dato1; 
....................  
.................... char tecla() 
.................... { 
.................... dato='\0'; 
*
01CE:  CLRF   25
.................... while(dato=='\0') 
....................    { 
01CF:  MOVF   25,F
01D0:  BTFSS  03.2
01D1:  GOTO   1D9
....................    dato=kbd_getc(); 
01D2:  CALL   157
01D3:  MOVF   78,W
01D4:  MOVWF  25
....................    delay_ms(2); 
01D5:  MOVLW  02
01D6:  MOVWF  5A
01D7:  CALL   029
....................    } 
01D8:  GOTO   1CF
.................... delay_ms(2); 
01D9:  MOVLW  02
01DA:  MOVWF  5A
01DB:  CALL   029
.................... dato1=dato; 
01DC:  MOVF   25,W
01DD:  MOVWF  26
.................... while(dato1==dato) 
....................    { 
01DE:  MOVF   25,W
01DF:  SUBWF  26,W
01E0:  BTFSS  03.2
01E1:  GOTO   1E9
....................    dato1=kbd_getc(); 
01E2:  CALL   157
01E3:  MOVF   78,W
01E4:  MOVWF  26
....................    delay_ms(2); 
01E5:  MOVLW  02
01E6:  MOVWF  5A
01E7:  CALL   029
....................    } 
01E8:  GOTO   1DE
.................... return dato;    
01E9:  MOVF   25,W
01EA:  MOVWF  78
.................... } 
01EB:  BCF    0A.3
01EC:  BSF    0A.4
01ED:  GOTO   421 (RETURN)
....................  
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
04F8:  BSF    03.5
04F9:  BCF    26.0
....................    y = x; 
04FA:  MOVF   75,W
04FB:  MOVWF  7E
04FC:  MOVF   74,W
04FD:  MOVWF  7D
04FE:  MOVF   73,W
04FF:  MOVWF  7C
0500:  MOVF   72,W
0501:  MOVWF  7B
....................  
....................    if (x < 0) 
0502:  MOVF   75,W
0503:  MOVWF  3B
0504:  MOVF   74,W
0505:  MOVWF  3A
0506:  MOVF   73,W
0507:  MOVWF  39
0508:  MOVF   72,W
0509:  MOVWF  38
050A:  CLRF   3F
050B:  CLRF   3E
050C:  CLRF   3D
050D:  CLRF   3C
050E:  BCF    03.5
050F:  CALL   20D
0510:  BTFSS  03.0
0511:  GOTO   518
....................    { 
....................       s = 1; 
0512:  BSF    03.5
0513:  BSF    26.0
....................       y = -y; 
0514:  MOVF   7C,W
0515:  XORLW  80
0516:  MOVWF  7C
0517:  BCF    03.5
....................    } 
....................  
....................    if (y <= 32768.0) 
0518:  MOVF   7E,W
0519:  BSF    03.5
051A:  MOVWF  3B
051B:  MOVF   7D,W
051C:  MOVWF  3A
051D:  MOVF   7C,W
051E:  MOVWF  39
051F:  MOVF   7B,W
0520:  MOVWF  38
0521:  CLRF   3F
0522:  CLRF   3E
0523:  CLRF   3D
0524:  MOVLW  8E
0525:  MOVWF  3C
0526:  BCF    03.5
0527:  CALL   20D
0528:  BTFSC  03.0
0529:  GOTO   52C
052A:  BTFSS  03.2
052B:  GOTO   549
....................   res = (float32)(unsigned int16)y; 
052C:  MOVF   7E,W
052D:  BSF    03.5
052E:  MOVWF  3B
052F:  MOVF   7D,W
0530:  MOVWF  3A
0531:  MOVF   7C,W
0532:  MOVWF  39
0533:  MOVF   7B,W
0534:  MOVWF  38
0535:  BCF    03.5
0536:  CALL   31A
0537:  MOVF   79,W
0538:  BSF    03.5
0539:  MOVWF  3D
053A:  MOVF   78,W
053B:  MOVWF  3C
053C:  BCF    03.5
053D:  CALL   1EE
053E:  MOVF   7A,W
053F:  BSF    03.5
0540:  MOVWF  23
0541:  MOVF   79,W
0542:  MOVWF  22
0543:  MOVF   78,W
0544:  MOVWF  21
0545:  MOVF   77,W
0546:  MOVWF  20
....................  
....................  else if (y < 10000000.0) 
0547:  GOTO   621
0548:  BCF    03.5
0549:  MOVF   7E,W
054A:  BSF    03.5
054B:  MOVWF  3B
054C:  MOVF   7D,W
054D:  MOVWF  3A
054E:  MOVF   7C,W
054F:  MOVWF  39
0550:  MOVF   7B,W
0551:  MOVWF  38
0552:  MOVLW  80
0553:  MOVWF  3F
0554:  MOVLW  96
0555:  MOVWF  3E
0556:  MOVLW  18
0557:  MOVWF  3D
0558:  MOVLW  96
0559:  MOVWF  3C
055A:  BCF    03.5
055B:  CALL   20D
055C:  BTFSS  03.0
055D:  GOTO   618
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
055E:  MOVF   7E,W
055F:  BSF    03.5
0560:  MOVWF  3B
0561:  MOVF   7D,W
0562:  MOVWF  3A
0563:  MOVF   7C,W
0564:  MOVWF  39
0565:  MOVF   7B,W
0566:  MOVWF  38
0567:  CLRF   3F
0568:  CLRF   3E
0569:  CLRF   3D
056A:  MOVLW  8E
056B:  MOVWF  3C
056C:  BCF    03.5
056D:  CALL   24E
056E:  MOVF   7A,W
056F:  BSF    03.5
0570:  MOVWF  3B
0571:  MOVF   79,W
0572:  MOVWF  3A
0573:  MOVF   78,W
0574:  MOVWF  39
0575:  MOVF   77,W
0576:  MOVWF  38
0577:  BCF    03.5
0578:  CALL   31A
0579:  MOVF   79,W
057A:  BSF    03.5
057B:  MOVWF  25
057C:  MOVF   78,W
057D:  MOVWF  24
....................       y = 32768.0*(y/32768.0 - (float32)l); 
057E:  MOVF   7E,W
057F:  MOVWF  3B
0580:  MOVF   7D,W
0581:  MOVWF  3A
0582:  MOVF   7C,W
0583:  MOVWF  39
0584:  MOVF   7B,W
0585:  MOVWF  38
0586:  CLRF   3F
0587:  CLRF   3E
0588:  CLRF   3D
0589:  MOVLW  8E
058A:  MOVWF  3C
058B:  BCF    03.5
058C:  CALL   24E
058D:  MOVF   77,W
058E:  BSF    03.5
058F:  MOVWF  27
0590:  MOVF   78,W
0591:  MOVWF  28
0592:  MOVF   79,W
0593:  MOVWF  29
0594:  MOVF   7A,W
0595:  MOVWF  2A
0596:  MOVF   25,W
0597:  MOVWF  3D
0598:  MOVF   24,W
0599:  MOVWF  3C
059A:  BCF    03.5
059B:  CALL   1EE
059C:  BSF    03.1
059D:  BSF    03.5
059E:  MOVF   2A,W
059F:  MOVWF  3F
05A0:  MOVF   29,W
05A1:  MOVWF  3E
05A2:  MOVF   28,W
05A3:  MOVWF  3D
05A4:  MOVF   27,W
05A5:  MOVWF  3C
05A6:  MOVF   7A,W
05A7:  MOVWF  43
05A8:  MOVF   79,W
05A9:  MOVWF  42
05AA:  MOVF   78,W
05AB:  MOVWF  41
05AC:  MOVF   77,W
05AD:  MOVWF  40
05AE:  BCF    03.5
05AF:  CALL   33B
05B0:  BSF    03.5
05B1:  CLRF   3F
05B2:  CLRF   3E
05B3:  CLRF   3D
05B4:  MOVLW  8E
05B5:  MOVWF  3C
05B6:  MOVF   7A,W
05B7:  MOVWF  43
05B8:  MOVF   79,W
05B9:  MOVWF  42
05BA:  MOVF   78,W
05BB:  MOVWF  41
05BC:  MOVF   77,W
05BD:  MOVWF  40
05BE:  BCF    03.5
05BF:  CALL   481
05C0:  MOVF   7A,W
05C1:  MOVWF  7E
05C2:  MOVF   79,W
05C3:  MOVWF  7D
05C4:  MOVF   78,W
05C5:  MOVWF  7C
05C6:  MOVF   77,W
05C7:  MOVWF  7B
....................   res = 32768.0*(float32)l; 
05C8:  BSF    03.5
05C9:  MOVF   25,W
05CA:  MOVWF  3D
05CB:  MOVF   24,W
05CC:  MOVWF  3C
05CD:  BCF    03.5
05CE:  CALL   1EE
05CF:  BSF    03.5
05D0:  CLRF   3F
05D1:  CLRF   3E
05D2:  CLRF   3D
05D3:  MOVLW  8E
05D4:  MOVWF  3C
05D5:  MOVF   7A,W
05D6:  MOVWF  43
05D7:  MOVF   79,W
05D8:  MOVWF  42
05D9:  MOVF   78,W
05DA:  MOVWF  41
05DB:  MOVF   77,W
05DC:  MOVWF  40
05DD:  BCF    03.5
05DE:  CALL   481
05DF:  MOVF   7A,W
05E0:  BSF    03.5
05E1:  MOVWF  23
05E2:  MOVF   79,W
05E3:  MOVWF  22
05E4:  MOVF   78,W
05E5:  MOVWF  21
05E6:  MOVF   77,W
05E7:  MOVWF  20
....................   res += (float32)(unsigned int16)y; 
05E8:  MOVF   7E,W
05E9:  MOVWF  3B
05EA:  MOVF   7D,W
05EB:  MOVWF  3A
05EC:  MOVF   7C,W
05ED:  MOVWF  39
05EE:  MOVF   7B,W
05EF:  MOVWF  38
05F0:  BCF    03.5
05F1:  CALL   31A
05F2:  MOVF   79,W
05F3:  BSF    03.5
05F4:  MOVWF  3D
05F5:  MOVF   78,W
05F6:  MOVWF  3C
05F7:  BCF    03.5
05F8:  CALL   1EE
05F9:  BCF    03.1
05FA:  BSF    03.5
05FB:  MOVF   23,W
05FC:  MOVWF  3F
05FD:  MOVF   22,W
05FE:  MOVWF  3E
05FF:  MOVF   21,W
0600:  MOVWF  3D
0601:  MOVF   20,W
0602:  MOVWF  3C
0603:  MOVF   7A,W
0604:  MOVWF  43
0605:  MOVF   79,W
0606:  MOVWF  42
0607:  MOVF   78,W
0608:  MOVWF  41
0609:  MOVF   77,W
060A:  MOVWF  40
060B:  BCF    03.5
060C:  CALL   33B
060D:  MOVF   7A,W
060E:  BSF    03.5
060F:  MOVWF  23
0610:  MOVF   79,W
0611:  MOVWF  22
0612:  MOVF   78,W
0613:  MOVWF  21
0614:  MOVF   77,W
0615:  MOVWF  20
....................  } 
....................  
....................  else 
0616:  GOTO   621
0617:  BCF    03.5
....................   res = y; 
0618:  MOVF   7E,W
0619:  BSF    03.5
061A:  MOVWF  23
061B:  MOVF   7D,W
061C:  MOVWF  22
061D:  MOVF   7C,W
061E:  MOVWF  21
061F:  MOVF   7B,W
0620:  MOVWF  20
....................  
....................  y = y - (float32)(unsigned int16)y; 
0621:  MOVF   7E,W
0622:  MOVWF  3B
0623:  MOVF   7D,W
0624:  MOVWF  3A
0625:  MOVF   7C,W
0626:  MOVWF  39
0627:  MOVF   7B,W
0628:  MOVWF  38
0629:  BCF    03.5
062A:  CALL   31A
062B:  MOVF   79,W
062C:  BSF    03.5
062D:  MOVWF  3D
062E:  MOVF   78,W
062F:  MOVWF  3C
0630:  BCF    03.5
0631:  CALL   1EE
0632:  BSF    03.1
0633:  MOVF   7E,W
0634:  BSF    03.5
0635:  MOVWF  3F
0636:  MOVF   7D,W
0637:  MOVWF  3E
0638:  MOVF   7C,W
0639:  MOVWF  3D
063A:  MOVF   7B,W
063B:  MOVWF  3C
063C:  MOVF   7A,W
063D:  MOVWF  43
063E:  MOVF   79,W
063F:  MOVWF  42
0640:  MOVF   78,W
0641:  MOVWF  41
0642:  MOVF   77,W
0643:  MOVWF  40
0644:  BCF    03.5
0645:  CALL   33B
0646:  MOVF   7A,W
0647:  MOVWF  7E
0648:  MOVF   79,W
0649:  MOVWF  7D
064A:  MOVF   78,W
064B:  MOVWF  7C
064C:  MOVF   77,W
064D:  MOVWF  7B
....................  
....................  if (s) 
064E:  BSF    03.5
064F:  BTFSS  26.0
0650:  GOTO   654
....................   res = -res; 
0651:  MOVF   21,W
0652:  XORLW  80
0653:  MOVWF  21
....................  
....................  if (y != 0) 
0654:  MOVF   7E,W
0655:  MOVWF  3B
0656:  MOVF   7D,W
0657:  MOVWF  3A
0658:  MOVF   7C,W
0659:  MOVWF  39
065A:  MOVF   7B,W
065B:  MOVWF  38
065C:  CLRF   3F
065D:  CLRF   3E
065E:  CLRF   3D
065F:  CLRF   3C
0660:  BCF    03.5
0661:  CALL   20D
0662:  BTFSC  03.2
0663:  GOTO   6A1
....................  { 
....................   if (s == 1 && n == 0) 
0664:  BSF    03.5
0665:  BTFSS  26.0
0666:  GOTO   683
0667:  MOVF   76,F
0668:  BTFSS  03.2
0669:  GOTO   683
....................    res -= 1.0; 
066A:  BSF    03.1
066B:  MOVF   23,W
066C:  MOVWF  3F
066D:  MOVF   22,W
066E:  MOVWF  3E
066F:  MOVF   21,W
0670:  MOVWF  3D
0671:  MOVF   20,W
0672:  MOVWF  3C
0673:  CLRF   43
0674:  CLRF   42
0675:  CLRF   41
0676:  MOVLW  7F
0677:  MOVWF  40
0678:  BCF    03.5
0679:  CALL   33B
067A:  MOVF   7A,W
067B:  BSF    03.5
067C:  MOVWF  23
067D:  MOVF   79,W
067E:  MOVWF  22
067F:  MOVF   78,W
0680:  MOVWF  21
0681:  MOVF   77,W
0682:  MOVWF  20
....................  
....................   if (s == 0 && n == 1) 
0683:  BTFSC  26.0
0684:  GOTO   6A0
0685:  DECFSZ 76,W
0686:  GOTO   6A0
....................    res += 1.0; 
0687:  BCF    03.1
0688:  MOVF   23,W
0689:  MOVWF  3F
068A:  MOVF   22,W
068B:  MOVWF  3E
068C:  MOVF   21,W
068D:  MOVWF  3D
068E:  MOVF   20,W
068F:  MOVWF  3C
0690:  CLRF   43
0691:  CLRF   42
0692:  CLRF   41
0693:  MOVLW  7F
0694:  MOVWF  40
0695:  BCF    03.5
0696:  CALL   33B
0697:  MOVF   7A,W
0698:  BSF    03.5
0699:  MOVWF  23
069A:  MOVF   79,W
069B:  MOVWF  22
069C:  MOVF   78,W
069D:  MOVWF  21
069E:  MOVF   77,W
069F:  MOVWF  20
06A0:  BCF    03.5
....................  } 
....................  if (x == 0) 
06A1:  MOVF   75,W
06A2:  BSF    03.5
06A3:  MOVWF  3B
06A4:  MOVF   74,W
06A5:  MOVWF  3A
06A6:  MOVF   73,W
06A7:  MOVWF  39
06A8:  MOVF   72,W
06A9:  MOVWF  38
06AA:  CLRF   3F
06AB:  CLRF   3E
06AC:  CLRF   3D
06AD:  CLRF   3C
06AE:  BCF    03.5
06AF:  CALL   20D
06B0:  BTFSS  03.2
06B1:  GOTO   6B8
....................     res = 0; 
06B2:  BSF    03.5
06B3:  CLRF   23
06B4:  CLRF   22
06B5:  CLRF   21
06B6:  CLRF   20
06B7:  BCF    03.5
....................  
....................  return (res); 
06B8:  BSF    03.5
06B9:  MOVF   20,W
06BA:  MOVWF  77
06BB:  MOVF   21,W
06BC:  MOVWF  78
06BD:  MOVF   22,W
06BE:  MOVWF  79
06BF:  MOVF   23,W
06C0:  MOVWF  7A
.................... } 
06C1:  BCF    03.5
06C2:  RETURN
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
*
0788:  MOVF   71,W
0789:  MOVWF  75
078A:  MOVF   70,W
078B:  MOVWF  74
078C:  MOVF   6F,W
078D:  MOVWF  73
078E:  MOVF   6E,W
078F:  MOVWF  72
0790:  CLRF   76
0791:  CALL   4F8
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
*
074B:  MOVF   71,W
074C:  MOVWF  75
074D:  MOVF   70,W
074E:  MOVWF  74
074F:  MOVF   6F,W
0750:  MOVWF  73
0751:  MOVF   6E,W
0752:  MOVWF  72
0753:  MOVLW  01
0754:  MOVWF  76
0755:  CALL   4F8
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
*
06C3:  MOVF   65,W
06C4:  BSF    03.5
06C5:  MOVWF  3B
06C6:  BCF    03.5
06C7:  MOVF   64,W
06C8:  BSF    03.5
06C9:  MOVWF  3A
06CA:  BCF    03.5
06CB:  MOVF   63,W
06CC:  BSF    03.5
06CD:  MOVWF  39
06CE:  BCF    03.5
06CF:  MOVF   62,W
06D0:  BSF    03.5
06D1:  MOVWF  38
06D2:  CLRF   3F
06D3:  CLRF   3E
06D4:  CLRF   3D
06D5:  CLRF   3C
06D6:  BCF    03.5
06D7:  CALL   20D
06D8:  BTFSC  03.2
06D9:  GOTO   7D7
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
06DA:  MOVF   61,W
06DB:  BSF    03.5
06DC:  MOVWF  3B
06DD:  BCF    03.5
06DE:  MOVF   60,W
06DF:  BSF    03.5
06E0:  MOVWF  3A
06E1:  BCF    03.5
06E2:  MOVF   5F,W
06E3:  BSF    03.5
06E4:  MOVWF  39
06E5:  BCF    03.5
06E6:  MOVF   5E,W
06E7:  BSF    03.5
06E8:  MOVWF  38
06E9:  BCF    03.5
06EA:  MOVF   65,W
06EB:  BSF    03.5
06EC:  MOVWF  3F
06ED:  BCF    03.5
06EE:  MOVF   64,W
06EF:  BSF    03.5
06F0:  MOVWF  3E
06F1:  BCF    03.5
06F2:  MOVF   63,W
06F3:  BSF    03.5
06F4:  MOVWF  3D
06F5:  BCF    03.5
06F6:  MOVF   62,W
06F7:  BSF    03.5
06F8:  MOVWF  3C
06F9:  BCF    03.5
06FA:  CALL   24E
06FB:  MOVF   77,W
06FC:  MOVWF  6A
06FD:  MOVF   78,W
06FE:  MOVWF  6B
06FF:  MOVF   79,W
0700:  MOVWF  6C
0701:  MOVF   7A,W
0702:  MOVWF  6D
0703:  MOVF   6D,W
0704:  BSF    03.5
0705:  MOVWF  3B
0706:  BCF    03.5
0707:  MOVF   6C,W
0708:  BSF    03.5
0709:  MOVWF  3A
070A:  BCF    03.5
070B:  MOVF   6B,W
070C:  BSF    03.5
070D:  MOVWF  39
070E:  BCF    03.5
070F:  MOVF   6A,W
0710:  BSF    03.5
0711:  MOVWF  38
0712:  CLRF   3F
0713:  CLRF   3E
0714:  CLRF   3D
0715:  CLRF   3C
0716:  BCF    03.5
0717:  CALL   20D
0718:  BTFSS  03.0
0719:  GOTO   757
071A:  MOVF   61,W
071B:  BSF    03.5
071C:  MOVWF  3B
071D:  BCF    03.5
071E:  MOVF   60,W
071F:  BSF    03.5
0720:  MOVWF  3A
0721:  BCF    03.5
0722:  MOVF   5F,W
0723:  BSF    03.5
0724:  MOVWF  39
0725:  BCF    03.5
0726:  MOVF   5E,W
0727:  BSF    03.5
0728:  MOVWF  38
0729:  BCF    03.5
072A:  MOVF   65,W
072B:  BSF    03.5
072C:  MOVWF  3F
072D:  BCF    03.5
072E:  MOVF   64,W
072F:  BSF    03.5
0730:  MOVWF  3E
0731:  BCF    03.5
0732:  MOVF   63,W
0733:  BSF    03.5
0734:  MOVWF  3D
0735:  BCF    03.5
0736:  MOVF   62,W
0737:  BSF    03.5
0738:  MOVWF  3C
0739:  BCF    03.5
073A:  CALL   24E
073B:  MOVF   77,W
073C:  MOVWF  6A
073D:  MOVF   78,W
073E:  MOVWF  6B
073F:  MOVF   79,W
0740:  MOVWF  6C
0741:  MOVF   7A,W
0742:  MOVWF  6D
0743:  MOVF   6D,W
0744:  MOVWF  71
0745:  MOVF   6C,W
0746:  MOVWF  70
0747:  MOVF   6B,W
0748:  MOVWF  6F
0749:  MOVF   6A,W
074A:  MOVWF  6E
*
0756:  GOTO   792
0757:  MOVF   61,W
0758:  BSF    03.5
0759:  MOVWF  3B
075A:  BCF    03.5
075B:  MOVF   60,W
075C:  BSF    03.5
075D:  MOVWF  3A
075E:  BCF    03.5
075F:  MOVF   5F,W
0760:  BSF    03.5
0761:  MOVWF  39
0762:  BCF    03.5
0763:  MOVF   5E,W
0764:  BSF    03.5
0765:  MOVWF  38
0766:  BCF    03.5
0767:  MOVF   65,W
0768:  BSF    03.5
0769:  MOVWF  3F
076A:  BCF    03.5
076B:  MOVF   64,W
076C:  BSF    03.5
076D:  MOVWF  3E
076E:  BCF    03.5
076F:  MOVF   63,W
0770:  BSF    03.5
0771:  MOVWF  3D
0772:  BCF    03.5
0773:  MOVF   62,W
0774:  BSF    03.5
0775:  MOVWF  3C
0776:  BCF    03.5
0777:  CALL   24E
0778:  MOVF   77,W
0779:  MOVWF  6A
077A:  MOVF   78,W
077B:  MOVWF  6B
077C:  MOVF   79,W
077D:  MOVWF  6C
077E:  MOVF   7A,W
077F:  MOVWF  6D
0780:  MOVF   6D,W
0781:  MOVWF  71
0782:  MOVF   6C,W
0783:  MOVWF  70
0784:  MOVF   6B,W
0785:  MOVWF  6F
0786:  MOVF   6A,W
0787:  MOVWF  6E
*
0792:  MOVF   7A,W
0793:  MOVWF  69
0794:  MOVF   79,W
0795:  MOVWF  68
0796:  MOVF   78,W
0797:  MOVWF  67
0798:  MOVF   77,W
0799:  MOVWF  66
....................       return(x-(i*y)); 
079A:  MOVF   69,W
079B:  BSF    03.5
079C:  MOVWF  3F
079D:  BCF    03.5
079E:  MOVF   68,W
079F:  BSF    03.5
07A0:  MOVWF  3E
07A1:  BCF    03.5
07A2:  MOVF   67,W
07A3:  BSF    03.5
07A4:  MOVWF  3D
07A5:  BCF    03.5
07A6:  MOVF   66,W
07A7:  BSF    03.5
07A8:  MOVWF  3C
07A9:  BCF    03.5
07AA:  MOVF   65,W
07AB:  BSF    03.5
07AC:  MOVWF  43
07AD:  BCF    03.5
07AE:  MOVF   64,W
07AF:  BSF    03.5
07B0:  MOVWF  42
07B1:  BCF    03.5
07B2:  MOVF   63,W
07B3:  BSF    03.5
07B4:  MOVWF  41
07B5:  BCF    03.5
07B6:  MOVF   62,W
07B7:  BSF    03.5
07B8:  MOVWF  40
07B9:  BCF    03.5
07BA:  CALL   481
07BB:  BSF    03.1
07BC:  MOVF   61,W
07BD:  BSF    03.5
07BE:  MOVWF  3F
07BF:  BCF    03.5
07C0:  MOVF   60,W
07C1:  BSF    03.5
07C2:  MOVWF  3E
07C3:  BCF    03.5
07C4:  MOVF   5F,W
07C5:  BSF    03.5
07C6:  MOVWF  3D
07C7:  BCF    03.5
07C8:  MOVF   5E,W
07C9:  BSF    03.5
07CA:  MOVWF  3C
07CB:  MOVF   7A,W
07CC:  MOVWF  43
07CD:  MOVF   79,W
07CE:  MOVWF  42
07CF:  MOVF   78,W
07D0:  MOVWF  41
07D1:  MOVF   77,W
07D2:  MOVWF  40
07D3:  BCF    03.5
07D4:  CALL   33B
07D5:  GOTO   7D7
....................    } 
....................    else 
07D6:  GOTO   7D7
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
07D7:  RETURN
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
*
0AEA:  MOVF   65,W
0AEB:  BSF    03.5
0AEC:  MOVWF  3B
0AED:  BCF    03.5
0AEE:  MOVF   64,W
0AEF:  BSF    03.5
0AF0:  MOVWF  3A
0AF1:  BCF    03.5
0AF2:  MOVF   63,W
0AF3:  BSF    03.5
0AF4:  MOVWF  39
0AF5:  BCF    03.5
0AF6:  MOVF   62,W
0AF7:  BSF    03.5
0AF8:  MOVWF  38
0AF9:  MOVLW  18
0AFA:  MOVWF  3F
0AFB:  MOVLW  72
0AFC:  MOVWF  3E
0AFD:  MOVLW  31
0AFE:  MOVWF  3D
0AFF:  MOVLW  7E
0B00:  MOVWF  3C
0B01:  BCF    0A.3
0B02:  BCF    03.5
0B03:  CALL   24E
0B04:  BSF    0A.3
0B05:  MOVF   7A,W
0B06:  BSF    03.5
0B07:  MOVWF  3B
0B08:  MOVF   79,W
0B09:  MOVWF  3A
0B0A:  MOVF   78,W
0B0B:  MOVWF  39
0B0C:  MOVF   77,W
0B0D:  MOVWF  38
0B0E:  BCF    0A.3
0B0F:  BCF    03.5
0B10:  CALL   31A
0B11:  BSF    0A.3
0B12:  MOVF   78,W
0B13:  MOVWF  72
....................    s = 0; 
0B14:  BCF    73.0
....................    y = x; 
0B15:  MOVF   65,W
0B16:  MOVWF  69
0B17:  MOVF   64,W
0B18:  MOVWF  68
0B19:  MOVF   63,W
0B1A:  MOVWF  67
0B1B:  MOVF   62,W
0B1C:  MOVWF  66
....................  
....................    if (x < 0) 
0B1D:  MOVF   65,W
0B1E:  BSF    03.5
0B1F:  MOVWF  3B
0B20:  BCF    03.5
0B21:  MOVF   64,W
0B22:  BSF    03.5
0B23:  MOVWF  3A
0B24:  BCF    03.5
0B25:  MOVF   63,W
0B26:  BSF    03.5
0B27:  MOVWF  39
0B28:  BCF    03.5
0B29:  MOVF   62,W
0B2A:  BSF    03.5
0B2B:  MOVWF  38
0B2C:  CLRF   3F
0B2D:  CLRF   3E
0B2E:  CLRF   3D
0B2F:  CLRF   3C
0B30:  BCF    0A.3
0B31:  BCF    03.5
0B32:  CALL   20D
0B33:  BSF    0A.3
0B34:  BTFSS  03.0
0B35:  GOTO   33C
....................    { 
....................       s = 1; 
0B36:  BSF    73.0
....................       n = -n; 
0B37:  COMF   72,F
0B38:  INCF   72,F
....................       y = -y; 
0B39:  MOVF   67,W
0B3A:  XORLW  80
0B3B:  MOVWF  67
....................    } 
....................  
....................    res = 0.0; 
0B3C:  CLRF   6D
0B3D:  CLRF   6C
0B3E:  CLRF   6B
0B3F:  CLRF   6A
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
0B40:  CLRF   7C
0B41:  MOVLW  6A
0B42:  MOVWF  7B
0B43:  MOVF   7B,W
0B44:  MOVWF  04
0B45:  BCF    03.7
0B46:  BTFSC  7C.0
0B47:  BSF    03.7
0B48:  MOVLW  7F
0B49:  ADDWF  72,W
0B4A:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
0B4B:  MOVF   69,W
0B4C:  BSF    03.5
0B4D:  MOVWF  3B
0B4E:  BCF    03.5
0B4F:  MOVF   68,W
0B50:  BSF    03.5
0B51:  MOVWF  3A
0B52:  BCF    03.5
0B53:  MOVF   67,W
0B54:  BSF    03.5
0B55:  MOVWF  39
0B56:  BCF    03.5
0B57:  MOVF   66,W
0B58:  BSF    03.5
0B59:  MOVWF  38
0B5A:  MOVLW  18
0B5B:  MOVWF  3F
0B5C:  MOVLW  72
0B5D:  MOVWF  3E
0B5E:  MOVLW  31
0B5F:  MOVWF  3D
0B60:  MOVLW  7E
0B61:  MOVWF  3C
0B62:  BCF    0A.3
0B63:  BCF    03.5
0B64:  CALL   24E
0B65:  BSF    0A.3
0B66:  MOVF   77,W
0B67:  MOVWF  7B
0B68:  MOVF   78,W
0B69:  MOVWF  7C
0B6A:  MOVF   79,W
0B6B:  MOVWF  7D
0B6C:  MOVF   7A,W
0B6D:  MOVWF  7E
0B6E:  BSF    03.5
0B6F:  CLRF   21
0B70:  MOVF   72,W
0B71:  MOVWF  20
0B72:  BTFSC  20.7
0B73:  DECF   21,F
0B74:  BCF    0A.3
0B75:  BCF    03.5
0B76:  CALL   7D8
0B77:  BSF    0A.3
0B78:  BSF    03.1
0B79:  MOVF   7E,W
0B7A:  BSF    03.5
0B7B:  MOVWF  3F
0B7C:  MOVF   7D,W
0B7D:  MOVWF  3E
0B7E:  MOVF   7C,W
0B7F:  MOVWF  3D
0B80:  MOVF   7B,W
0B81:  MOVWF  3C
0B82:  MOVF   7A,W
0B83:  MOVWF  43
0B84:  MOVF   79,W
0B85:  MOVWF  42
0B86:  MOVF   78,W
0B87:  MOVWF  41
0B88:  MOVF   77,W
0B89:  MOVWF  40
0B8A:  BCF    0A.3
0B8B:  BCF    03.5
0B8C:  CALL   33B
0B8D:  BSF    0A.3
0B8E:  MOVF   7A,W
0B8F:  MOVWF  69
0B90:  MOVF   79,W
0B91:  MOVWF  68
0B92:  MOVF   78,W
0B93:  MOVWF  67
0B94:  MOVF   77,W
0B95:  MOVWF  66
....................  
....................    r = pe[0]*y + pe[1]; 
0B96:  MOVLW  7C
0B97:  BSF    03.5
0B98:  MOVWF  3F
0B99:  MOVLW  88
0B9A:  MOVWF  3E
0B9B:  MOVLW  59
0B9C:  MOVWF  3D
0B9D:  MOVLW  72
0B9E:  MOVWF  3C
0B9F:  BCF    03.5
0BA0:  MOVF   69,W
0BA1:  BSF    03.5
0BA2:  MOVWF  43
0BA3:  BCF    03.5
0BA4:  MOVF   68,W
0BA5:  BSF    03.5
0BA6:  MOVWF  42
0BA7:  BCF    03.5
0BA8:  MOVF   67,W
0BA9:  BSF    03.5
0BAA:  MOVWF  41
0BAB:  BCF    03.5
0BAC:  MOVF   66,W
0BAD:  BSF    03.5
0BAE:  MOVWF  40
0BAF:  BCF    0A.3
0BB0:  BCF    03.5
0BB1:  CALL   481
0BB2:  BSF    0A.3
0BB3:  MOVF   77,W
0BB4:  MOVWF  7B
0BB5:  MOVF   78,W
0BB6:  MOVWF  7C
0BB7:  MOVF   79,W
0BB8:  MOVWF  7D
0BB9:  MOVF   7A,W
0BBA:  MOVWF  7E
0BBB:  BCF    03.1
0BBC:  MOVF   7A,W
0BBD:  BSF    03.5
0BBE:  MOVWF  3F
0BBF:  MOVF   79,W
0BC0:  MOVWF  3E
0BC1:  MOVF   78,W
0BC2:  MOVWF  3D
0BC3:  MOVF   77,W
0BC4:  MOVWF  3C
0BC5:  MOVLW  E0
0BC6:  MOVWF  43
0BC7:  MOVLW  97
0BC8:  MOVWF  42
0BC9:  MOVLW  26
0BCA:  MOVWF  41
0BCB:  MOVLW  75
0BCC:  MOVWF  40
0BCD:  BCF    0A.3
0BCE:  BCF    03.5
0BCF:  CALL   33B
0BD0:  BSF    0A.3
0BD1:  MOVF   7A,W
0BD2:  MOVWF  71
0BD3:  MOVF   79,W
0BD4:  MOVWF  70
0BD5:  MOVF   78,W
0BD6:  MOVWF  6F
0BD7:  MOVF   77,W
0BD8:  MOVWF  6E
....................    r = r*y + pe[2]; 
0BD9:  MOVF   71,W
0BDA:  BSF    03.5
0BDB:  MOVWF  3F
0BDC:  MOVF   70,W
0BDD:  MOVWF  3E
0BDE:  BCF    03.5
0BDF:  MOVF   6F,W
0BE0:  BSF    03.5
0BE1:  MOVWF  3D
0BE2:  BCF    03.5
0BE3:  MOVF   6E,W
0BE4:  BSF    03.5
0BE5:  MOVWF  3C
0BE6:  BCF    03.5
0BE7:  MOVF   69,W
0BE8:  BSF    03.5
0BE9:  MOVWF  43
0BEA:  BCF    03.5
0BEB:  MOVF   68,W
0BEC:  BSF    03.5
0BED:  MOVWF  42
0BEE:  BCF    03.5
0BEF:  MOVF   67,W
0BF0:  BSF    03.5
0BF1:  MOVWF  41
0BF2:  BCF    03.5
0BF3:  MOVF   66,W
0BF4:  BSF    03.5
0BF5:  MOVWF  40
0BF6:  BCF    0A.3
0BF7:  BCF    03.5
0BF8:  CALL   481
0BF9:  BSF    0A.3
0BFA:  MOVF   77,W
0BFB:  MOVWF  7B
0BFC:  MOVF   78,W
0BFD:  MOVWF  7C
0BFE:  MOVF   79,W
0BFF:  MOVWF  7D
0C00:  MOVF   7A,W
0C01:  MOVWF  7E
0C02:  BCF    03.1
0C03:  MOVF   7A,W
0C04:  BSF    03.5
0C05:  MOVWF  3F
0C06:  MOVF   79,W
0C07:  MOVWF  3E
0C08:  MOVF   78,W
0C09:  MOVWF  3D
0C0A:  MOVF   77,W
0C0B:  MOVWF  3C
0C0C:  MOVLW  C4
0C0D:  MOVWF  43
0C0E:  MOVLW  1D
0C0F:  MOVWF  42
0C10:  MOVLW  1E
0C11:  MOVWF  41
0C12:  MOVLW  78
0C13:  MOVWF  40
0C14:  BCF    0A.3
0C15:  BCF    03.5
0C16:  CALL   33B
0C17:  BSF    0A.3
0C18:  MOVF   7A,W
0C19:  MOVWF  71
0C1A:  MOVF   79,W
0C1B:  MOVWF  70
0C1C:  MOVF   78,W
0C1D:  MOVWF  6F
0C1E:  MOVF   77,W
0C1F:  MOVWF  6E
....................    r = r*y + pe[3]; 
0C20:  MOVF   71,W
0C21:  BSF    03.5
0C22:  MOVWF  3F
0C23:  MOVF   70,W
0C24:  MOVWF  3E
0C25:  BCF    03.5
0C26:  MOVF   6F,W
0C27:  BSF    03.5
0C28:  MOVWF  3D
0C29:  BCF    03.5
0C2A:  MOVF   6E,W
0C2B:  BSF    03.5
0C2C:  MOVWF  3C
0C2D:  BCF    03.5
0C2E:  MOVF   69,W
0C2F:  BSF    03.5
0C30:  MOVWF  43
0C31:  BCF    03.5
0C32:  MOVF   68,W
0C33:  BSF    03.5
0C34:  MOVWF  42
0C35:  BCF    03.5
0C36:  MOVF   67,W
0C37:  BSF    03.5
0C38:  MOVWF  41
0C39:  BCF    03.5
0C3A:  MOVF   66,W
0C3B:  BSF    03.5
0C3C:  MOVWF  40
0C3D:  BCF    0A.3
0C3E:  BCF    03.5
0C3F:  CALL   481
0C40:  BSF    0A.3
0C41:  MOVF   77,W
0C42:  MOVWF  7B
0C43:  MOVF   78,W
0C44:  MOVWF  7C
0C45:  MOVF   79,W
0C46:  MOVWF  7D
0C47:  MOVF   7A,W
0C48:  MOVWF  7E
0C49:  BCF    03.1
0C4A:  MOVF   7A,W
0C4B:  BSF    03.5
0C4C:  MOVWF  3F
0C4D:  MOVF   79,W
0C4E:  MOVWF  3E
0C4F:  MOVF   78,W
0C50:  MOVWF  3D
0C51:  MOVF   77,W
0C52:  MOVWF  3C
0C53:  MOVLW  5E
0C54:  MOVWF  43
0C55:  MOVLW  50
0C56:  MOVWF  42
0C57:  MOVLW  63
0C58:  MOVWF  41
0C59:  MOVLW  7A
0C5A:  MOVWF  40
0C5B:  BCF    0A.3
0C5C:  BCF    03.5
0C5D:  CALL   33B
0C5E:  BSF    0A.3
0C5F:  MOVF   7A,W
0C60:  MOVWF  71
0C61:  MOVF   79,W
0C62:  MOVWF  70
0C63:  MOVF   78,W
0C64:  MOVWF  6F
0C65:  MOVF   77,W
0C66:  MOVWF  6E
....................    r = r*y + pe[4]; 
0C67:  MOVF   71,W
0C68:  BSF    03.5
0C69:  MOVWF  3F
0C6A:  MOVF   70,W
0C6B:  MOVWF  3E
0C6C:  BCF    03.5
0C6D:  MOVF   6F,W
0C6E:  BSF    03.5
0C6F:  MOVWF  3D
0C70:  BCF    03.5
0C71:  MOVF   6E,W
0C72:  BSF    03.5
0C73:  MOVWF  3C
0C74:  BCF    03.5
0C75:  MOVF   69,W
0C76:  BSF    03.5
0C77:  MOVWF  43
0C78:  BCF    03.5
0C79:  MOVF   68,W
0C7A:  BSF    03.5
0C7B:  MOVWF  42
0C7C:  BCF    03.5
0C7D:  MOVF   67,W
0C7E:  BSF    03.5
0C7F:  MOVWF  41
0C80:  BCF    03.5
0C81:  MOVF   66,W
0C82:  BSF    03.5
0C83:  MOVWF  40
0C84:  BCF    0A.3
0C85:  BCF    03.5
0C86:  CALL   481
0C87:  BSF    0A.3
0C88:  MOVF   77,W
0C89:  MOVWF  7B
0C8A:  MOVF   78,W
0C8B:  MOVWF  7C
0C8C:  MOVF   79,W
0C8D:  MOVWF  7D
0C8E:  MOVF   7A,W
0C8F:  MOVWF  7E
0C90:  BCF    03.1
0C91:  MOVF   7A,W
0C92:  BSF    03.5
0C93:  MOVWF  3F
0C94:  MOVF   79,W
0C95:  MOVWF  3E
0C96:  MOVF   78,W
0C97:  MOVWF  3D
0C98:  MOVF   77,W
0C99:  MOVWF  3C
0C9A:  MOVLW  1A
0C9B:  MOVWF  43
0C9C:  MOVLW  FE
0C9D:  MOVWF  42
0C9E:  MOVLW  75
0C9F:  MOVWF  41
0CA0:  MOVLW  7C
0CA1:  MOVWF  40
0CA2:  BCF    0A.3
0CA3:  BCF    03.5
0CA4:  CALL   33B
0CA5:  BSF    0A.3
0CA6:  MOVF   7A,W
0CA7:  MOVWF  71
0CA8:  MOVF   79,W
0CA9:  MOVWF  70
0CAA:  MOVF   78,W
0CAB:  MOVWF  6F
0CAC:  MOVF   77,W
0CAD:  MOVWF  6E
....................    r = r*y + pe[5]; 
0CAE:  MOVF   71,W
0CAF:  BSF    03.5
0CB0:  MOVWF  3F
0CB1:  MOVF   70,W
0CB2:  MOVWF  3E
0CB3:  BCF    03.5
0CB4:  MOVF   6F,W
0CB5:  BSF    03.5
0CB6:  MOVWF  3D
0CB7:  BCF    03.5
0CB8:  MOVF   6E,W
0CB9:  BSF    03.5
0CBA:  MOVWF  3C
0CBB:  BCF    03.5
0CBC:  MOVF   69,W
0CBD:  BSF    03.5
0CBE:  MOVWF  43
0CBF:  BCF    03.5
0CC0:  MOVF   68,W
0CC1:  BSF    03.5
0CC2:  MOVWF  42
0CC3:  BCF    03.5
0CC4:  MOVF   67,W
0CC5:  BSF    03.5
0CC6:  MOVWF  41
0CC7:  BCF    03.5
0CC8:  MOVF   66,W
0CC9:  BSF    03.5
0CCA:  MOVWF  40
0CCB:  BCF    0A.3
0CCC:  BCF    03.5
0CCD:  CALL   481
0CCE:  BSF    0A.3
0CCF:  MOVF   77,W
0CD0:  MOVWF  7B
0CD1:  MOVF   78,W
0CD2:  MOVWF  7C
0CD3:  MOVF   79,W
0CD4:  MOVWF  7D
0CD5:  MOVF   7A,W
0CD6:  MOVWF  7E
0CD7:  BCF    03.1
0CD8:  MOVF   7A,W
0CD9:  BSF    03.5
0CDA:  MOVWF  3F
0CDB:  MOVF   79,W
0CDC:  MOVWF  3E
0CDD:  MOVF   78,W
0CDE:  MOVWF  3D
0CDF:  MOVF   77,W
0CE0:  MOVWF  3C
0CE1:  MOVLW  18
0CE2:  MOVWF  43
0CE3:  MOVLW  72
0CE4:  MOVWF  42
0CE5:  MOVLW  31
0CE6:  MOVWF  41
0CE7:  MOVLW  7E
0CE8:  MOVWF  40
0CE9:  BCF    0A.3
0CEA:  BCF    03.5
0CEB:  CALL   33B
0CEC:  BSF    0A.3
0CED:  MOVF   7A,W
0CEE:  MOVWF  71
0CEF:  MOVF   79,W
0CF0:  MOVWF  70
0CF1:  MOVF   78,W
0CF2:  MOVWF  6F
0CF3:  MOVF   77,W
0CF4:  MOVWF  6E
....................  
....................    res = res*(1.0 + y*r); 
0CF5:  MOVF   69,W
0CF6:  BSF    03.5
0CF7:  MOVWF  3F
0CF8:  BCF    03.5
0CF9:  MOVF   68,W
0CFA:  BSF    03.5
0CFB:  MOVWF  3E
0CFC:  BCF    03.5
0CFD:  MOVF   67,W
0CFE:  BSF    03.5
0CFF:  MOVWF  3D
0D00:  BCF    03.5
0D01:  MOVF   66,W
0D02:  BSF    03.5
0D03:  MOVWF  3C
0D04:  MOVF   71,W
0D05:  MOVWF  43
0D06:  MOVF   70,W
0D07:  MOVWF  42
0D08:  BCF    03.5
0D09:  MOVF   6F,W
0D0A:  BSF    03.5
0D0B:  MOVWF  41
0D0C:  BCF    03.5
0D0D:  MOVF   6E,W
0D0E:  BSF    03.5
0D0F:  MOVWF  40
0D10:  BCF    0A.3
0D11:  BCF    03.5
0D12:  CALL   481
0D13:  BSF    0A.3
0D14:  BCF    03.1
0D15:  BSF    03.5
0D16:  CLRF   3F
0D17:  CLRF   3E
0D18:  CLRF   3D
0D19:  MOVLW  7F
0D1A:  MOVWF  3C
0D1B:  MOVF   7A,W
0D1C:  MOVWF  43
0D1D:  MOVF   79,W
0D1E:  MOVWF  42
0D1F:  MOVF   78,W
0D20:  MOVWF  41
0D21:  MOVF   77,W
0D22:  MOVWF  40
0D23:  BCF    0A.3
0D24:  BCF    03.5
0D25:  CALL   33B
0D26:  BSF    0A.3
0D27:  MOVF   6D,W
0D28:  BSF    03.5
0D29:  MOVWF  3F
0D2A:  BCF    03.5
0D2B:  MOVF   6C,W
0D2C:  BSF    03.5
0D2D:  MOVWF  3E
0D2E:  BCF    03.5
0D2F:  MOVF   6B,W
0D30:  BSF    03.5
0D31:  MOVWF  3D
0D32:  BCF    03.5
0D33:  MOVF   6A,W
0D34:  BSF    03.5
0D35:  MOVWF  3C
0D36:  MOVF   7A,W
0D37:  MOVWF  43
0D38:  MOVF   79,W
0D39:  MOVWF  42
0D3A:  MOVF   78,W
0D3B:  MOVWF  41
0D3C:  MOVF   77,W
0D3D:  MOVWF  40
0D3E:  BCF    0A.3
0D3F:  BCF    03.5
0D40:  CALL   481
0D41:  BSF    0A.3
0D42:  MOVF   7A,W
0D43:  MOVWF  6D
0D44:  MOVF   79,W
0D45:  MOVWF  6C
0D46:  MOVF   78,W
0D47:  MOVWF  6B
0D48:  MOVF   77,W
0D49:  MOVWF  6A
....................  
....................    if (s) 
0D4A:  BTFSS  73.0
0D4B:  GOTO   56E
....................       res = 1.0/res; 
0D4C:  BSF    03.5
0D4D:  CLRF   3B
0D4E:  CLRF   3A
0D4F:  CLRF   39
0D50:  MOVLW  7F
0D51:  MOVWF  38
0D52:  BCF    03.5
0D53:  MOVF   6D,W
0D54:  BSF    03.5
0D55:  MOVWF  3F
0D56:  BCF    03.5
0D57:  MOVF   6C,W
0D58:  BSF    03.5
0D59:  MOVWF  3E
0D5A:  BCF    03.5
0D5B:  MOVF   6B,W
0D5C:  BSF    03.5
0D5D:  MOVWF  3D
0D5E:  BCF    03.5
0D5F:  MOVF   6A,W
0D60:  BSF    03.5
0D61:  MOVWF  3C
0D62:  BCF    0A.3
0D63:  BCF    03.5
0D64:  CALL   24E
0D65:  BSF    0A.3
0D66:  MOVF   7A,W
0D67:  MOVWF  6D
0D68:  MOVF   79,W
0D69:  MOVWF  6C
0D6A:  MOVF   78,W
0D6B:  MOVWF  6B
0D6C:  MOVF   77,W
0D6D:  MOVWF  6A
....................    return(res); 
0D6E:  MOVF   6A,W
0D6F:  MOVWF  77
0D70:  MOVF   6B,W
0D71:  MOVWF  78
0D72:  MOVF   6C,W
0D73:  MOVWF  79
0D74:  MOVF   6D,W
0D75:  MOVWF  7A
.................... } 
0D76:  RETURN
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
*
0800:  MOVF   65,W
0801:  MOVWF  69
0802:  MOVF   64,W
0803:  MOVWF  68
0804:  MOVF   63,W
0805:  MOVWF  67
0806:  MOVF   62,W
0807:  MOVWF  66
....................  
....................    if (y != 1.0) 
0808:  MOVF   69,W
0809:  BSF    03.5
080A:  MOVWF  3B
080B:  BCF    03.5
080C:  MOVF   68,W
080D:  BSF    03.5
080E:  MOVWF  3A
080F:  BCF    03.5
0810:  MOVF   67,W
0811:  BSF    03.5
0812:  MOVWF  39
0813:  BCF    03.5
0814:  MOVF   66,W
0815:  BSF    03.5
0816:  MOVWF  38
0817:  CLRF   3F
0818:  CLRF   3E
0819:  CLRF   3D
081A:  MOVLW  7F
081B:  MOVWF  3C
081C:  BCF    0A.3
081D:  BCF    03.5
081E:  CALL   20D
081F:  BSF    0A.3
0820:  BTFSC  03.2
0821:  GOTO   2DD
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
0822:  CLRF   7C
0823:  MOVLW  66
0824:  MOVWF  7B
0825:  MOVF   7B,W
0826:  MOVWF  04
0827:  BCF    03.7
0828:  BTFSC  7C.0
0829:  BSF    03.7
082A:  MOVLW  7E
082B:  MOVWF  00
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
082C:  BSF    03.1
082D:  MOVF   69,W
082E:  BSF    03.5
082F:  MOVWF  3F
0830:  BCF    03.5
0831:  MOVF   68,W
0832:  BSF    03.5
0833:  MOVWF  3E
0834:  BCF    03.5
0835:  MOVF   67,W
0836:  BSF    03.5
0837:  MOVWF  3D
0838:  BCF    03.5
0839:  MOVF   66,W
083A:  BSF    03.5
083B:  MOVWF  3C
083C:  CLRF   43
083D:  CLRF   42
083E:  CLRF   41
083F:  MOVLW  7F
0840:  MOVWF  40
0841:  BCF    0A.3
0842:  BCF    03.5
0843:  CALL   33B
0844:  BSF    0A.3
0845:  MOVF   77,W
0846:  MOVWF  7B
0847:  MOVF   78,W
0848:  MOVWF  7C
0849:  MOVF   79,W
084A:  MOVWF  7D
084B:  MOVF   7A,W
084C:  MOVWF  7E
084D:  BCF    03.1
084E:  MOVF   69,W
084F:  BSF    03.5
0850:  MOVWF  3F
0851:  BCF    03.5
0852:  MOVF   68,W
0853:  BSF    03.5
0854:  MOVWF  3E
0855:  BCF    03.5
0856:  MOVF   67,W
0857:  BSF    03.5
0858:  MOVWF  3D
0859:  BCF    03.5
085A:  MOVF   66,W
085B:  BSF    03.5
085C:  MOVWF  3C
085D:  CLRF   43
085E:  CLRF   42
085F:  CLRF   41
0860:  MOVLW  7F
0861:  MOVWF  40
0862:  BCF    0A.3
0863:  BCF    03.5
0864:  CALL   33B
0865:  BSF    0A.3
0866:  MOVF   7E,W
0867:  BSF    03.5
0868:  MOVWF  3B
0869:  MOVF   7D,W
086A:  MOVWF  3A
086B:  MOVF   7C,W
086C:  MOVWF  39
086D:  MOVF   7B,W
086E:  MOVWF  38
086F:  MOVF   7A,W
0870:  MOVWF  3F
0871:  MOVF   79,W
0872:  MOVWF  3E
0873:  MOVF   78,W
0874:  MOVWF  3D
0875:  MOVF   77,W
0876:  MOVWF  3C
0877:  BCF    0A.3
0878:  BCF    03.5
0879:  CALL   24E
087A:  BSF    0A.3
087B:  MOVF   7A,W
087C:  MOVWF  69
087D:  MOVF   79,W
087E:  MOVWF  68
087F:  MOVF   78,W
0880:  MOVWF  67
0881:  MOVF   77,W
0882:  MOVWF  66
....................  
....................       y2=y*y; 
0883:  MOVF   69,W
0884:  BSF    03.5
0885:  MOVWF  3F
0886:  BCF    03.5
0887:  MOVF   68,W
0888:  BSF    03.5
0889:  MOVWF  3E
088A:  BCF    03.5
088B:  MOVF   67,W
088C:  BSF    03.5
088D:  MOVWF  3D
088E:  BCF    03.5
088F:  MOVF   66,W
0890:  BSF    03.5
0891:  MOVWF  3C
0892:  BCF    03.5
0893:  MOVF   69,W
0894:  BSF    03.5
0895:  MOVWF  43
0896:  BCF    03.5
0897:  MOVF   68,W
0898:  BSF    03.5
0899:  MOVWF  42
089A:  BCF    03.5
089B:  MOVF   67,W
089C:  BSF    03.5
089D:  MOVWF  41
089E:  BCF    03.5
089F:  MOVF   66,W
08A0:  BSF    03.5
08A1:  MOVWF  40
08A2:  BCF    0A.3
08A3:  BCF    03.5
08A4:  CALL   481
08A5:  BSF    0A.3
08A6:  MOVF   7A,W
08A7:  MOVWF  75
08A8:  MOVF   79,W
08A9:  MOVWF  74
08AA:  MOVF   78,W
08AB:  MOVWF  73
08AC:  MOVF   77,W
08AD:  MOVWF  72
....................  
....................       res = pl[0]*y2 + pl[1]; 
08AE:  MOVLW  BC
08AF:  BSF    03.5
08B0:  MOVWF  3F
08B1:  MOVLW  24
08B2:  MOVWF  3E
08B3:  MOVLW  67
08B4:  MOVWF  3D
08B5:  MOVLW  7D
08B6:  MOVWF  3C
08B7:  MOVF   75,W
08B8:  MOVWF  43
08B9:  MOVF   74,W
08BA:  MOVWF  42
08BB:  MOVF   73,W
08BC:  MOVWF  41
08BD:  MOVF   72,W
08BE:  MOVWF  40
08BF:  BCF    0A.3
08C0:  BCF    03.5
08C1:  CALL   481
08C2:  BSF    0A.3
08C3:  MOVF   77,W
08C4:  MOVWF  7B
08C5:  MOVF   78,W
08C6:  MOVWF  7C
08C7:  MOVF   79,W
08C8:  MOVWF  7D
08C9:  MOVF   7A,W
08CA:  MOVWF  7E
08CB:  BCF    03.1
08CC:  MOVF   7E,W
08CD:  BSF    03.5
08CE:  MOVWF  3F
08CF:  MOVF   7D,W
08D0:  MOVWF  3E
08D1:  MOVF   7C,W
08D2:  MOVWF  3D
08D3:  MOVF   7B,W
08D4:  MOVWF  3C
08D5:  MOVLW  E3
08D6:  MOVWF  43
08D7:  MOVLW  E4
08D8:  MOVWF  42
08D9:  MOVLW  90
08DA:  MOVWF  41
08DB:  MOVLW  82
08DC:  MOVWF  40
08DD:  BCF    0A.3
08DE:  BCF    03.5
08DF:  CALL   33B
08E0:  BSF    0A.3
08E1:  MOVF   7A,W
08E2:  MOVWF  6D
08E3:  MOVF   79,W
08E4:  MOVWF  6C
08E5:  MOVF   78,W
08E6:  MOVWF  6B
08E7:  MOVF   77,W
08E8:  MOVWF  6A
....................       res = res*y2 + pl[2]; 
08E9:  MOVF   6D,W
08EA:  BSF    03.5
08EB:  MOVWF  3F
08EC:  BCF    03.5
08ED:  MOVF   6C,W
08EE:  BSF    03.5
08EF:  MOVWF  3E
08F0:  BCF    03.5
08F1:  MOVF   6B,W
08F2:  BSF    03.5
08F3:  MOVWF  3D
08F4:  BCF    03.5
08F5:  MOVF   6A,W
08F6:  BSF    03.5
08F7:  MOVWF  3C
08F8:  MOVF   75,W
08F9:  MOVWF  43
08FA:  MOVF   74,W
08FB:  MOVWF  42
08FC:  MOVF   73,W
08FD:  MOVWF  41
08FE:  MOVF   72,W
08FF:  MOVWF  40
0900:  BCF    0A.3
0901:  BCF    03.5
0902:  CALL   481
0903:  BSF    0A.3
0904:  MOVF   77,W
0905:  MOVWF  7B
0906:  MOVF   78,W
0907:  MOVWF  7C
0908:  MOVF   79,W
0909:  MOVWF  7D
090A:  MOVF   7A,W
090B:  MOVWF  7E
090C:  BCF    03.1
090D:  MOVF   7E,W
090E:  BSF    03.5
090F:  MOVWF  3F
0910:  MOVF   7D,W
0911:  MOVWF  3E
0912:  MOVF   7C,W
0913:  MOVWF  3D
0914:  MOVF   7B,W
0915:  MOVWF  3C
0916:  MOVLW  1C
0917:  MOVWF  43
0918:  MOVLW  87
0919:  MOVWF  42
091A:  MOVLW  57
091B:  MOVWF  41
091C:  MOVLW  83
091D:  MOVWF  40
091E:  BCF    0A.3
091F:  BCF    03.5
0920:  CALL   33B
0921:  BSF    0A.3
0922:  MOVF   7A,W
0923:  MOVWF  6D
0924:  MOVF   79,W
0925:  MOVWF  6C
0926:  MOVF   78,W
0927:  MOVWF  6B
0928:  MOVF   77,W
0929:  MOVWF  6A
....................       res = res*y2 + pl[3]; 
092A:  MOVF   6D,W
092B:  BSF    03.5
092C:  MOVWF  3F
092D:  BCF    03.5
092E:  MOVF   6C,W
092F:  BSF    03.5
0930:  MOVWF  3E
0931:  BCF    03.5
0932:  MOVF   6B,W
0933:  BSF    03.5
0934:  MOVWF  3D
0935:  BCF    03.5
0936:  MOVF   6A,W
0937:  BSF    03.5
0938:  MOVWF  3C
0939:  MOVF   75,W
093A:  MOVWF  43
093B:  MOVF   74,W
093C:  MOVWF  42
093D:  MOVF   73,W
093E:  MOVWF  41
093F:  MOVF   72,W
0940:  MOVWF  40
0941:  BCF    0A.3
0942:  BCF    03.5
0943:  CALL   481
0944:  BSF    0A.3
0945:  MOVF   77,W
0946:  MOVWF  7B
0947:  MOVF   78,W
0948:  MOVWF  7C
0949:  MOVF   79,W
094A:  MOVWF  7D
094B:  MOVF   7A,W
094C:  MOVWF  7E
094D:  BCF    03.1
094E:  MOVF   7E,W
094F:  BSF    03.5
0950:  MOVWF  3F
0951:  MOVF   7D,W
0952:  MOVWF  3E
0953:  MOVF   7C,W
0954:  MOVWF  3D
0955:  MOVF   7B,W
0956:  MOVWF  3C
0957:  MOVLW  AB
0958:  MOVWF  43
0959:  MOVLW  E1
095A:  MOVWF  42
095B:  MOVLW  9E
095C:  MOVWF  41
095D:  MOVLW  83
095E:  MOVWF  40
095F:  BCF    0A.3
0960:  BCF    03.5
0961:  CALL   33B
0962:  BSF    0A.3
0963:  MOVF   7A,W
0964:  MOVWF  6D
0965:  MOVF   79,W
0966:  MOVWF  6C
0967:  MOVF   78,W
0968:  MOVWF  6B
0969:  MOVF   77,W
096A:  MOVWF  6A
....................  
....................       r = ql[0]*y2 + ql[1]; 
096B:  BSF    03.5
096C:  CLRF   3F
096D:  CLRF   3E
096E:  CLRF   3D
096F:  MOVLW  7F
0970:  MOVWF  3C
0971:  MOVF   75,W
0972:  MOVWF  43
0973:  MOVF   74,W
0974:  MOVWF  42
0975:  MOVF   73,W
0976:  MOVWF  41
0977:  MOVF   72,W
0978:  MOVWF  40
0979:  BCF    0A.3
097A:  BCF    03.5
097B:  CALL   481
097C:  BSF    0A.3
097D:  MOVF   77,W
097E:  MOVWF  7B
097F:  MOVF   78,W
0980:  MOVWF  7C
0981:  MOVF   79,W
0982:  MOVWF  7D
0983:  MOVF   7A,W
0984:  MOVWF  7E
0985:  BCF    03.1
0986:  MOVF   7E,W
0987:  BSF    03.5
0988:  MOVWF  3F
0989:  MOVF   7D,W
098A:  MOVWF  3E
098B:  MOVF   7C,W
098C:  MOVWF  3D
098D:  MOVF   7B,W
098E:  MOVWF  3C
098F:  MOVLW  B4
0990:  MOVWF  43
0991:  MOVLW  2A
0992:  MOVWF  42
0993:  MOVLW  82
0994:  MOVWF  41
0995:  MOVWF  40
0996:  BCF    0A.3
0997:  BCF    03.5
0998:  CALL   33B
0999:  BSF    0A.3
099A:  MOVF   7A,W
099B:  MOVWF  71
099C:  MOVF   79,W
099D:  MOVWF  70
099E:  MOVF   78,W
099F:  MOVWF  6F
09A0:  MOVF   77,W
09A1:  MOVWF  6E
....................       r = r*y2 + ql[2]; 
09A2:  MOVF   71,W
09A3:  BSF    03.5
09A4:  MOVWF  3F
09A5:  MOVF   70,W
09A6:  MOVWF  3E
09A7:  BCF    03.5
09A8:  MOVF   6F,W
09A9:  BSF    03.5
09AA:  MOVWF  3D
09AB:  BCF    03.5
09AC:  MOVF   6E,W
09AD:  BSF    03.5
09AE:  MOVWF  3C
09AF:  MOVF   75,W
09B0:  MOVWF  43
09B1:  MOVF   74,W
09B2:  MOVWF  42
09B3:  MOVF   73,W
09B4:  MOVWF  41
09B5:  MOVF   72,W
09B6:  MOVWF  40
09B7:  BCF    0A.3
09B8:  BCF    03.5
09B9:  CALL   481
09BA:  BSF    0A.3
09BB:  MOVF   77,W
09BC:  MOVWF  7B
09BD:  MOVF   78,W
09BE:  MOVWF  7C
09BF:  MOVF   79,W
09C0:  MOVWF  7D
09C1:  MOVF   7A,W
09C2:  MOVWF  7E
09C3:  BCF    03.1
09C4:  MOVF   7E,W
09C5:  BSF    03.5
09C6:  MOVWF  3F
09C7:  MOVF   7D,W
09C8:  MOVWF  3E
09C9:  MOVF   7C,W
09CA:  MOVWF  3D
09CB:  MOVF   7B,W
09CC:  MOVWF  3C
09CD:  MOVLW  80
09CE:  MOVWF  43
09CF:  MOVLW  3E
09D0:  MOVWF  42
09D1:  MOVLW  06
09D2:  MOVWF  41
09D3:  MOVLW  83
09D4:  MOVWF  40
09D5:  BCF    0A.3
09D6:  BCF    03.5
09D7:  CALL   33B
09D8:  BSF    0A.3
09D9:  MOVF   7A,W
09DA:  MOVWF  71
09DB:  MOVF   79,W
09DC:  MOVWF  70
09DD:  MOVF   78,W
09DE:  MOVWF  6F
09DF:  MOVF   77,W
09E0:  MOVWF  6E
....................       r = r*y2 + ql[3]; 
09E1:  MOVF   71,W
09E2:  BSF    03.5
09E3:  MOVWF  3F
09E4:  MOVF   70,W
09E5:  MOVWF  3E
09E6:  BCF    03.5
09E7:  MOVF   6F,W
09E8:  BSF    03.5
09E9:  MOVWF  3D
09EA:  BCF    03.5
09EB:  MOVF   6E,W
09EC:  BSF    03.5
09ED:  MOVWF  3C
09EE:  MOVF   75,W
09EF:  MOVWF  43
09F0:  MOVF   74,W
09F1:  MOVWF  42
09F2:  MOVF   73,W
09F3:  MOVWF  41
09F4:  MOVF   72,W
09F5:  MOVWF  40
09F6:  BCF    0A.3
09F7:  BCF    03.5
09F8:  CALL   481
09F9:  BSF    0A.3
09FA:  MOVF   77,W
09FB:  MOVWF  7B
09FC:  MOVF   78,W
09FD:  MOVWF  7C
09FE:  MOVF   79,W
09FF:  MOVWF  7D
0A00:  MOVF   7A,W
0A01:  MOVWF  7E
0A02:  BCF    03.1
0A03:  MOVF   7E,W
0A04:  BSF    03.5
0A05:  MOVWF  3F
0A06:  MOVF   7D,W
0A07:  MOVWF  3E
0A08:  MOVF   7C,W
0A09:  MOVWF  3D
0A0A:  MOVF   7B,W
0A0B:  MOVWF  3C
0A0C:  MOVLW  AB
0A0D:  MOVWF  43
0A0E:  MOVLW  E1
0A0F:  MOVWF  42
0A10:  MOVLW  9E
0A11:  MOVWF  41
0A12:  MOVLW  82
0A13:  MOVWF  40
0A14:  BCF    0A.3
0A15:  BCF    03.5
0A16:  CALL   33B
0A17:  BSF    0A.3
0A18:  MOVF   7A,W
0A19:  MOVWF  71
0A1A:  MOVF   79,W
0A1B:  MOVWF  70
0A1C:  MOVF   78,W
0A1D:  MOVWF  6F
0A1E:  MOVF   77,W
0A1F:  MOVWF  6E
....................  
....................       res = y*res/r; 
0A20:  MOVF   69,W
0A21:  BSF    03.5
0A22:  MOVWF  3F
0A23:  BCF    03.5
0A24:  MOVF   68,W
0A25:  BSF    03.5
0A26:  MOVWF  3E
0A27:  BCF    03.5
0A28:  MOVF   67,W
0A29:  BSF    03.5
0A2A:  MOVWF  3D
0A2B:  BCF    03.5
0A2C:  MOVF   66,W
0A2D:  BSF    03.5
0A2E:  MOVWF  3C
0A2F:  BCF    03.5
0A30:  MOVF   6D,W
0A31:  BSF    03.5
0A32:  MOVWF  43
0A33:  BCF    03.5
0A34:  MOVF   6C,W
0A35:  BSF    03.5
0A36:  MOVWF  42
0A37:  BCF    03.5
0A38:  MOVF   6B,W
0A39:  BSF    03.5
0A3A:  MOVWF  41
0A3B:  BCF    03.5
0A3C:  MOVF   6A,W
0A3D:  BSF    03.5
0A3E:  MOVWF  40
0A3F:  BCF    0A.3
0A40:  BCF    03.5
0A41:  CALL   481
0A42:  BSF    0A.3
0A43:  MOVF   77,W
0A44:  MOVWF  7B
0A45:  MOVF   78,W
0A46:  MOVWF  7C
0A47:  MOVF   79,W
0A48:  MOVWF  7D
0A49:  MOVF   7A,W
0A4A:  MOVWF  7E
0A4B:  BSF    03.5
0A4C:  MOVWF  3B
0A4D:  MOVF   7D,W
0A4E:  MOVWF  3A
0A4F:  MOVF   7C,W
0A50:  MOVWF  39
0A51:  MOVF   7B,W
0A52:  MOVWF  38
0A53:  MOVF   71,W
0A54:  MOVWF  3F
0A55:  MOVF   70,W
0A56:  MOVWF  3E
0A57:  BCF    03.5
0A58:  MOVF   6F,W
0A59:  BSF    03.5
0A5A:  MOVWF  3D
0A5B:  BCF    03.5
0A5C:  MOVF   6E,W
0A5D:  BSF    03.5
0A5E:  MOVWF  3C
0A5F:  BCF    0A.3
0A60:  BCF    03.5
0A61:  CALL   24E
0A62:  BSF    0A.3
0A63:  MOVF   7A,W
0A64:  MOVWF  6D
0A65:  MOVF   79,W
0A66:  MOVWF  6C
0A67:  MOVF   78,W
0A68:  MOVWF  6B
0A69:  MOVF   77,W
0A6A:  MOVWF  6A
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
0A6B:  CLRF   7C
0A6C:  MOVLW  62
0A6D:  MOVWF  7B
0A6E:  MOVF   7B,W
0A6F:  MOVWF  04
0A70:  BCF    03.7
0A71:  BTFSC  7C.0
0A72:  BSF    03.7
0A73:  MOVLW  7E
0A74:  SUBWF  00,W
0A75:  MOVWF  76
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
0A76:  BTFSS  76.7
0A77:  GOTO   28D
....................          r = -(float32)-n; 
0A78:  MOVF   76,W
0A79:  SUBLW  00
0A7A:  BSF    03.5
0A7B:  CLRF   21
0A7C:  MOVWF  20
0A7D:  BTFSC  20.7
0A7E:  DECF   21,F
0A7F:  BCF    0A.3
0A80:  BCF    03.5
0A81:  CALL   7D8
0A82:  BSF    0A.3
0A83:  MOVF   77,W
0A84:  MOVWF  6E
0A85:  MOVF   78,W
0A86:  XORLW  80
0A87:  MOVWF  6F
0A88:  MOVF   79,W
0A89:  MOVWF  70
0A8A:  MOVF   7A,W
0A8B:  MOVWF  71
....................       else 
0A8C:  GOTO   29F
....................          r = (float32)n; 
0A8D:  BSF    03.5
0A8E:  CLRF   21
0A8F:  MOVF   76,W
0A90:  MOVWF  20
0A91:  BTFSC  20.7
0A92:  DECF   21,F
0A93:  BCF    0A.3
0A94:  BCF    03.5
0A95:  CALL   7D8
0A96:  BSF    0A.3
0A97:  MOVF   7A,W
0A98:  MOVWF  71
0A99:  MOVF   79,W
0A9A:  MOVWF  70
0A9B:  MOVF   78,W
0A9C:  MOVWF  6F
0A9D:  MOVF   77,W
0A9E:  MOVWF  6E
....................  
....................       res += r*LN2; 
0A9F:  MOVF   71,W
0AA0:  BSF    03.5
0AA1:  MOVWF  3F
0AA2:  MOVF   70,W
0AA3:  MOVWF  3E
0AA4:  BCF    03.5
0AA5:  MOVF   6F,W
0AA6:  BSF    03.5
0AA7:  MOVWF  3D
0AA8:  BCF    03.5
0AA9:  MOVF   6E,W
0AAA:  BSF    03.5
0AAB:  MOVWF  3C
0AAC:  MOVLW  18
0AAD:  MOVWF  43
0AAE:  MOVLW  72
0AAF:  MOVWF  42
0AB0:  MOVLW  31
0AB1:  MOVWF  41
0AB2:  MOVLW  7E
0AB3:  MOVWF  40
0AB4:  BCF    0A.3
0AB5:  BCF    03.5
0AB6:  CALL   481
0AB7:  BSF    0A.3
0AB8:  BCF    03.1
0AB9:  MOVF   6D,W
0ABA:  BSF    03.5
0ABB:  MOVWF  3F
0ABC:  BCF    03.5
0ABD:  MOVF   6C,W
0ABE:  BSF    03.5
0ABF:  MOVWF  3E
0AC0:  BCF    03.5
0AC1:  MOVF   6B,W
0AC2:  BSF    03.5
0AC3:  MOVWF  3D
0AC4:  BCF    03.5
0AC5:  MOVF   6A,W
0AC6:  BSF    03.5
0AC7:  MOVWF  3C
0AC8:  MOVF   7A,W
0AC9:  MOVWF  43
0ACA:  MOVF   79,W
0ACB:  MOVWF  42
0ACC:  MOVF   78,W
0ACD:  MOVWF  41
0ACE:  MOVF   77,W
0ACF:  MOVWF  40
0AD0:  BCF    0A.3
0AD1:  BCF    03.5
0AD2:  CALL   33B
0AD3:  BSF    0A.3
0AD4:  MOVF   7A,W
0AD5:  MOVWF  6D
0AD6:  MOVF   79,W
0AD7:  MOVWF  6C
0AD8:  MOVF   78,W
0AD9:  MOVWF  6B
0ADA:  MOVF   77,W
0ADB:  MOVWF  6A
....................    } 
....................  
....................    else 
0ADC:  GOTO   2E1
....................       res = 0.0; 
0ADD:  CLRF   6D
0ADE:  CLRF   6C
0ADF:  CLRF   6B
0AE0:  CLRF   6A
....................  
....................    return(res); 
0AE1:  MOVF   6A,W
0AE2:  MOVWF  77
0AE3:  MOVF   6B,W
0AE4:  MOVWF  78
0AE5:  MOVF   6C,W
0AE6:  MOVWF  79
0AE7:  MOVF   6D,W
0AE8:  MOVWF  7A
.................... } 
0AE9:  RETURN
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
*
0DA5:  MOVF   59,W
0DA6:  BSF    03.5
0DA7:  MOVWF  3B
0DA8:  BCF    03.5
0DA9:  MOVF   58,W
0DAA:  BSF    03.5
0DAB:  MOVWF  3A
0DAC:  BCF    03.5
0DAD:  MOVF   57,W
0DAE:  BSF    03.5
0DAF:  MOVWF  39
0DB0:  BCF    03.5
0DB1:  MOVF   56,W
0DB2:  BSF    03.5
0DB3:  MOVWF  38
0DB4:  CLRF   3F
0DB5:  CLRF   3E
0DB6:  CLRF   3D
0DB7:  CLRF   3C
0DB8:  BCF    0A.3
0DB9:  BCF    03.5
0DBA:  CALL   20D
0DBB:  BSF    0A.3
0DBC:  BTFSS  03.0
0DBD:  GOTO   6BA
0DBE:  MOVF   5D,W
0DBF:  MOVWF  61
0DC0:  MOVF   5C,W
0DC1:  MOVWF  60
0DC2:  MOVF   5B,W
0DC3:  MOVWF  5F
0DC4:  MOVF   5A,W
0DC5:  MOVWF  5E
0DC6:  CLRF   65
0DC7:  CLRF   64
0DC8:  CLRF   63
0DC9:  MOVLW  7F
0DCA:  MOVWF  62
0DCB:  BCF    0A.3
0DCC:  CALL   6C3
0DCD:  BSF    0A.3
0DCE:  MOVF   77,W
0DCF:  MOVWF  5E
0DD0:  MOVF   78,W
0DD1:  MOVWF  5F
0DD2:  MOVF   79,W
0DD3:  MOVWF  60
0DD4:  MOVF   7A,W
0DD5:  MOVWF  61
0DD6:  BSF    03.5
0DD7:  MOVWF  3B
0DD8:  BCF    03.5
0DD9:  MOVF   60,W
0DDA:  BSF    03.5
0DDB:  MOVWF  3A
0DDC:  BCF    03.5
0DDD:  MOVF   5F,W
0DDE:  BSF    03.5
0DDF:  MOVWF  39
0DE0:  BCF    03.5
0DE1:  MOVF   5E,W
0DE2:  BSF    03.5
0DE3:  MOVWF  38
0DE4:  CLRF   3F
0DE5:  CLRF   3E
0DE6:  CLRF   3D
0DE7:  CLRF   3C
0DE8:  BCF    0A.3
0DE9:  BCF    03.5
0DEA:  CALL   20D
0DEB:  BSF    0A.3
0DEC:  BTFSS  03.2
0DED:  GOTO   6BA
....................       if(fmod(y, 2) == 0) { 
0DEE:  MOVF   5D,W
0DEF:  MOVWF  61
0DF0:  MOVF   5C,W
0DF1:  MOVWF  60
0DF2:  MOVF   5B,W
0DF3:  MOVWF  5F
0DF4:  MOVF   5A,W
0DF5:  MOVWF  5E
0DF6:  CLRF   65
0DF7:  CLRF   64
0DF8:  CLRF   63
0DF9:  MOVLW  80
0DFA:  MOVWF  62
0DFB:  BCF    0A.3
0DFC:  CALL   6C3
0DFD:  BSF    0A.3
0DFE:  MOVF   77,W
0DFF:  MOVWF  5E
0E00:  MOVF   78,W
0E01:  MOVWF  5F
0E02:  MOVF   79,W
0E03:  MOVWF  60
0E04:  MOVF   7A,W
0E05:  MOVWF  61
0E06:  BSF    03.5
0E07:  MOVWF  3B
0E08:  BCF    03.5
0E09:  MOVF   60,W
0E0A:  BSF    03.5
0E0B:  MOVWF  3A
0E0C:  BCF    03.5
0E0D:  MOVF   5F,W
0E0E:  BSF    03.5
0E0F:  MOVWF  39
0E10:  BCF    03.5
0E11:  MOVF   5E,W
0E12:  BSF    03.5
0E13:  MOVWF  38
0E14:  CLRF   3F
0E15:  CLRF   3E
0E16:  CLRF   3D
0E17:  CLRF   3C
0E18:  BCF    0A.3
0E19:  BCF    03.5
0E1A:  CALL   20D
0E1B:  BSF    0A.3
0E1C:  BTFSS  03.2
0E1D:  GOTO   66B
....................          return (exp(log(-x) * y)); 
0E1E:  MOVF   56,W
0E1F:  MOVWF  5E
0E20:  MOVF   57,W
0E21:  XORLW  80
0E22:  MOVWF  5F
0E23:  MOVF   58,W
0E24:  MOVWF  60
0E25:  MOVF   59,W
0E26:  MOVWF  61
0E27:  MOVWF  65
0E28:  MOVF   60,W
0E29:  MOVWF  64
0E2A:  MOVF   5F,W
0E2B:  MOVWF  63
0E2C:  MOVF   5E,W
0E2D:  MOVWF  62
0E2E:  CALL   000
0E2F:  MOVF   77,W
0E30:  MOVWF  5E
0E31:  MOVF   78,W
0E32:  MOVWF  5F
0E33:  MOVF   79,W
0E34:  MOVWF  60
0E35:  MOVF   7A,W
0E36:  MOVWF  61
0E37:  BSF    03.5
0E38:  MOVWF  3F
0E39:  BCF    03.5
0E3A:  MOVF   60,W
0E3B:  BSF    03.5
0E3C:  MOVWF  3E
0E3D:  BCF    03.5
0E3E:  MOVF   5F,W
0E3F:  BSF    03.5
0E40:  MOVWF  3D
0E41:  BCF    03.5
0E42:  MOVF   5E,W
0E43:  BSF    03.5
0E44:  MOVWF  3C
0E45:  BCF    03.5
0E46:  MOVF   5D,W
0E47:  BSF    03.5
0E48:  MOVWF  43
0E49:  BCF    03.5
0E4A:  MOVF   5C,W
0E4B:  BSF    03.5
0E4C:  MOVWF  42
0E4D:  BCF    03.5
0E4E:  MOVF   5B,W
0E4F:  BSF    03.5
0E50:  MOVWF  41
0E51:  BCF    03.5
0E52:  MOVF   5A,W
0E53:  BSF    03.5
0E54:  MOVWF  40
0E55:  BCF    0A.3
0E56:  BCF    03.5
0E57:  CALL   481
0E58:  BSF    0A.3
0E59:  MOVF   77,W
0E5A:  MOVWF  5E
0E5B:  MOVF   78,W
0E5C:  MOVWF  5F
0E5D:  MOVF   79,W
0E5E:  MOVWF  60
0E5F:  MOVF   7A,W
0E60:  MOVWF  61
0E61:  MOVWF  65
0E62:  MOVF   60,W
0E63:  MOVWF  64
0E64:  MOVF   5F,W
0E65:  MOVWF  63
0E66:  MOVF   5E,W
0E67:  MOVWF  62
0E68:  CALL   2EA
0E69:  GOTO   781
....................       } else { 
0E6A:  GOTO   6B9
....................          return (-exp(log(-x) * y)); 
0E6B:  MOVF   56,W
0E6C:  MOVWF  5E
0E6D:  MOVF   57,W
0E6E:  XORLW  80
0E6F:  MOVWF  5F
0E70:  MOVF   58,W
0E71:  MOVWF  60
0E72:  MOVF   59,W
0E73:  MOVWF  61
0E74:  MOVWF  65
0E75:  MOVF   60,W
0E76:  MOVWF  64
0E77:  MOVF   5F,W
0E78:  MOVWF  63
0E79:  MOVF   5E,W
0E7A:  MOVWF  62
0E7B:  CALL   000
0E7C:  MOVF   77,W
0E7D:  MOVWF  5E
0E7E:  MOVF   78,W
0E7F:  MOVWF  5F
0E80:  MOVF   79,W
0E81:  MOVWF  60
0E82:  MOVF   7A,W
0E83:  MOVWF  61
0E84:  BSF    03.5
0E85:  MOVWF  3F
0E86:  BCF    03.5
0E87:  MOVF   60,W
0E88:  BSF    03.5
0E89:  MOVWF  3E
0E8A:  BCF    03.5
0E8B:  MOVF   5F,W
0E8C:  BSF    03.5
0E8D:  MOVWF  3D
0E8E:  BCF    03.5
0E8F:  MOVF   5E,W
0E90:  BSF    03.5
0E91:  MOVWF  3C
0E92:  BCF    03.5
0E93:  MOVF   5D,W
0E94:  BSF    03.5
0E95:  MOVWF  43
0E96:  BCF    03.5
0E97:  MOVF   5C,W
0E98:  BSF    03.5
0E99:  MOVWF  42
0E9A:  BCF    03.5
0E9B:  MOVF   5B,W
0E9C:  BSF    03.5
0E9D:  MOVWF  41
0E9E:  BCF    03.5
0E9F:  MOVF   5A,W
0EA0:  BSF    03.5
0EA1:  MOVWF  40
0EA2:  BCF    0A.3
0EA3:  BCF    03.5
0EA4:  CALL   481
0EA5:  BSF    0A.3
0EA6:  MOVF   77,W
0EA7:  MOVWF  5E
0EA8:  MOVF   78,W
0EA9:  MOVWF  5F
0EAA:  MOVF   79,W
0EAB:  MOVWF  60
0EAC:  MOVF   7A,W
0EAD:  MOVWF  61
0EAE:  MOVWF  65
0EAF:  MOVF   60,W
0EB0:  MOVWF  64
0EB1:  MOVF   5F,W
0EB2:  MOVWF  63
0EB3:  MOVF   5E,W
0EB4:  MOVWF  62
0EB5:  CALL   2EA
0EB6:  MOVLW  80
0EB7:  XORWF  78,F
0EB8:  GOTO   781
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
0EB9:  GOTO   781
0EBA:  MOVF   59,W
0EBB:  BSF    03.5
0EBC:  MOVWF  3B
0EBD:  BCF    03.5
0EBE:  MOVF   58,W
0EBF:  BSF    03.5
0EC0:  MOVWF  3A
0EC1:  BCF    03.5
0EC2:  MOVF   57,W
0EC3:  BSF    03.5
0EC4:  MOVWF  39
0EC5:  BCF    03.5
0EC6:  MOVF   56,W
0EC7:  BSF    03.5
0EC8:  MOVWF  38
0EC9:  CLRF   3F
0ECA:  CLRF   3E
0ECB:  CLRF   3D
0ECC:  CLRF   3C
0ECD:  BCF    0A.3
0ECE:  BCF    03.5
0ECF:  CALL   20D
0ED0:  BSF    0A.3
0ED1:  BTFSS  03.0
0ED2:  GOTO   709
0ED3:  MOVF   5D,W
0ED4:  MOVWF  61
0ED5:  MOVF   5C,W
0ED6:  MOVWF  60
0ED7:  MOVF   5B,W
0ED8:  MOVWF  5F
0ED9:  MOVF   5A,W
0EDA:  MOVWF  5E
0EDB:  CLRF   65
0EDC:  CLRF   64
0EDD:  CLRF   63
0EDE:  MOVLW  7F
0EDF:  MOVWF  62
0EE0:  BCF    0A.3
0EE1:  CALL   6C3
0EE2:  BSF    0A.3
0EE3:  MOVF   77,W
0EE4:  MOVWF  5E
0EE5:  MOVF   78,W
0EE6:  MOVWF  5F
0EE7:  MOVF   79,W
0EE8:  MOVWF  60
0EE9:  MOVF   7A,W
0EEA:  MOVWF  61
0EEB:  BSF    03.5
0EEC:  MOVWF  3B
0EED:  BCF    03.5
0EEE:  MOVF   60,W
0EEF:  BSF    03.5
0EF0:  MOVWF  3A
0EF1:  BCF    03.5
0EF2:  MOVF   5F,W
0EF3:  BSF    03.5
0EF4:  MOVWF  39
0EF5:  BCF    03.5
0EF6:  MOVF   5E,W
0EF7:  BSF    03.5
0EF8:  MOVWF  38
0EF9:  CLRF   3F
0EFA:  CLRF   3E
0EFB:  CLRF   3D
0EFC:  CLRF   3C
0EFD:  BCF    0A.3
0EFE:  BCF    03.5
0EFF:  CALL   20D
0F00:  BSF    0A.3
0F01:  BTFSC  03.2
0F02:  GOTO   709
....................       return 0; 
0F03:  CLRF   77
0F04:  CLRF   78
0F05:  CLRF   79
0F06:  CLRF   7A
0F07:  GOTO   781
....................    } else { 
0F08:  GOTO   781
....................       if(x != 0 || 0 >= y) { 
0F09:  MOVF   59,W
0F0A:  BSF    03.5
0F0B:  MOVWF  3B
0F0C:  BCF    03.5
0F0D:  MOVF   58,W
0F0E:  BSF    03.5
0F0F:  MOVWF  3A
0F10:  BCF    03.5
0F11:  MOVF   57,W
0F12:  BSF    03.5
0F13:  MOVWF  39
0F14:  BCF    03.5
0F15:  MOVF   56,W
0F16:  BSF    03.5
0F17:  MOVWF  38
0F18:  CLRF   3F
0F19:  CLRF   3E
0F1A:  CLRF   3D
0F1B:  CLRF   3C
0F1C:  BCF    0A.3
0F1D:  BCF    03.5
0F1E:  CALL   20D
0F1F:  BSF    0A.3
0F20:  BTFSS  03.2
0F21:  GOTO   73D
0F22:  MOVF   5D,W
0F23:  BSF    03.5
0F24:  MOVWF  3B
0F25:  BCF    03.5
0F26:  MOVF   5C,W
0F27:  BSF    03.5
0F28:  MOVWF  3A
0F29:  BCF    03.5
0F2A:  MOVF   5B,W
0F2B:  BSF    03.5
0F2C:  MOVWF  39
0F2D:  BCF    03.5
0F2E:  MOVF   5A,W
0F2F:  BSF    03.5
0F30:  MOVWF  38
0F31:  CLRF   3F
0F32:  CLRF   3E
0F33:  CLRF   3D
0F34:  CLRF   3C
0F35:  BCF    0A.3
0F36:  BCF    03.5
0F37:  CALL   20D
0F38:  BSF    0A.3
0F39:  BTFSC  03.0
0F3A:  GOTO   73D
0F3B:  BTFSS  03.2
0F3C:  GOTO   781
....................          return (exp(log(x) * y)); 
0F3D:  MOVF   59,W
0F3E:  MOVWF  65
0F3F:  MOVF   58,W
0F40:  MOVWF  64
0F41:  MOVF   57,W
0F42:  MOVWF  63
0F43:  MOVF   56,W
0F44:  MOVWF  62
0F45:  CALL   000
0F46:  MOVF   77,W
0F47:  MOVWF  5E
0F48:  MOVF   78,W
0F49:  MOVWF  5F
0F4A:  MOVF   79,W
0F4B:  MOVWF  60
0F4C:  MOVF   7A,W
0F4D:  MOVWF  61
0F4E:  BSF    03.5
0F4F:  MOVWF  3F
0F50:  BCF    03.5
0F51:  MOVF   60,W
0F52:  BSF    03.5
0F53:  MOVWF  3E
0F54:  BCF    03.5
0F55:  MOVF   5F,W
0F56:  BSF    03.5
0F57:  MOVWF  3D
0F58:  BCF    03.5
0F59:  MOVF   5E,W
0F5A:  BSF    03.5
0F5B:  MOVWF  3C
0F5C:  BCF    03.5
0F5D:  MOVF   5D,W
0F5E:  BSF    03.5
0F5F:  MOVWF  43
0F60:  BCF    03.5
0F61:  MOVF   5C,W
0F62:  BSF    03.5
0F63:  MOVWF  42
0F64:  BCF    03.5
0F65:  MOVF   5B,W
0F66:  BSF    03.5
0F67:  MOVWF  41
0F68:  BCF    03.5
0F69:  MOVF   5A,W
0F6A:  BSF    03.5
0F6B:  MOVWF  40
0F6C:  BCF    0A.3
0F6D:  BCF    03.5
0F6E:  CALL   481
0F6F:  BSF    0A.3
0F70:  MOVF   77,W
0F71:  MOVWF  5E
0F72:  MOVF   78,W
0F73:  MOVWF  5F
0F74:  MOVF   79,W
0F75:  MOVWF  60
0F76:  MOVF   7A,W
0F77:  MOVWF  61
0F78:  MOVWF  65
0F79:  MOVF   60,W
0F7A:  MOVWF  64
0F7B:  MOVF   5F,W
0F7C:  MOVWF  63
0F7D:  MOVF   5E,W
0F7E:  MOVWF  62
0F7F:  CALL   2EA
0F80:  GOTO   781
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
*
102C:  CLRF   63
102D:  CLRF   62
102E:  CLRF   61
102F:  MOVLW  7F
1030:  MOVWF  60
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
1031:  MOVLW  7E
1032:  BSF    03.5
1033:  MOVWF  20
1034:  MOVLW  80
1035:  MOVWF  21
1036:  CLRF   22
1037:  CLRF   23
1038:  MOVLW  7A
1039:  MOVWF  24
103A:  MOVLW  2A
103B:  MOVWF  25
103C:  MOVLW  AA
103D:  MOVWF  26
103E:  MOVLW  AB
103F:  MOVWF  27
1040:  MOVLW  75
1041:  MOVWF  28
1042:  MOVLW  B6
1043:  MOVWF  29
1044:  MOVLW  0B
1045:  MOVWF  2A
1046:  MOVLW  61
1047:  MOVWF  2B
1048:  MOVLW  6F
1049:  MOVWF  2C
104A:  MOVLW  50
104B:  MOVWF  2D
104C:  MOVLW  0D
104D:  MOVWF  2E
104E:  MOVLW  01
104F:  MOVWF  2F
1050:  MOVLW  69
1051:  MOVWF  30
1052:  MOVLW  93
1053:  MOVWF  31
1054:  MOVLW  F2
1055:  MOVWF  32
1056:  MOVLW  7E
1057:  MOVWF  33
1058:  MOVLW  62
1059:  MOVWF  34
105A:  MOVLW  0F
105B:  MOVWF  35
105C:  MOVLW  76
105D:  MOVWF  36
105E:  MOVLW  AE
105F:  MOVWF  37
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
1060:  BCF    03.5
1061:  MOVF   57,W
1062:  BSF    03.5
1063:  MOVWF  3B
1064:  BCF    03.5
1065:  MOVF   56,W
1066:  BSF    03.5
1067:  MOVWF  3A
1068:  BCF    03.5
1069:  MOVF   55,W
106A:  BSF    03.5
106B:  MOVWF  39
106C:  BCF    03.5
106D:  MOVF   54,W
106E:  BSF    03.5
106F:  MOVWF  38
1070:  CLRF   3F
1071:  CLRF   3E
1072:  CLRF   3D
1073:  CLRF   3C
1074:  BCF    0A.4
1075:  BCF    03.5
1076:  CALL   20D
1077:  BSF    0A.4
1078:  BTFSS  03.0
1079:  GOTO   07D
107A:  MOVF   55,W
107B:  XORLW  80
107C:  MOVWF  55
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
107D:  MOVF   57,W
107E:  BSF    03.5
107F:  MOVWF  3B
1080:  BCF    03.5
1081:  MOVF   56,W
1082:  BSF    03.5
1083:  MOVWF  3A
1084:  BCF    03.5
1085:  MOVF   55,W
1086:  BSF    03.5
1087:  MOVWF  39
1088:  BCF    03.5
1089:  MOVF   54,W
108A:  BSF    03.5
108B:  MOVWF  38
108C:  MOVLW  DB
108D:  MOVWF  3F
108E:  MOVLW  0F
108F:  MOVWF  3E
1090:  MOVLW  49
1091:  MOVWF  3D
1092:  MOVLW  7F
1093:  MOVWF  3C
1094:  BCF    0A.4
1095:  BCF    03.5
1096:  CALL   24E
1097:  BSF    0A.4
1098:  MOVF   7A,W
1099:  BSF    03.5
109A:  MOVWF  3B
109B:  MOVF   79,W
109C:  MOVWF  3A
109D:  MOVF   78,W
109E:  MOVWF  39
109F:  MOVF   77,W
10A0:  MOVWF  38
10A1:  BCF    0A.4
10A2:  BCF    03.5
10A3:  CALL   31A
10A4:  BSF    0A.4
10A5:  MOVF   78,W
10A6:  MOVWF  64
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
10A7:  MOVF   57,W
10A8:  BSF    03.5
10A9:  MOVWF  3B
10AA:  BCF    03.5
10AB:  MOVF   56,W
10AC:  BSF    03.5
10AD:  MOVWF  3A
10AE:  BCF    03.5
10AF:  MOVF   55,W
10B0:  BSF    03.5
10B1:  MOVWF  39
10B2:  BCF    03.5
10B3:  MOVF   54,W
10B4:  BSF    03.5
10B5:  MOVWF  38
10B6:  MOVLW  DB
10B7:  MOVWF  3F
10B8:  MOVLW  0F
10B9:  MOVWF  3E
10BA:  MOVLW  49
10BB:  MOVWF  3D
10BC:  MOVLW  7F
10BD:  MOVWF  3C
10BE:  BCF    0A.4
10BF:  BCF    03.5
10C0:  CALL   24E
10C1:  BSF    0A.4
10C2:  MOVF   77,W
10C3:  MOVWF  6A
10C4:  MOVF   78,W
10C5:  MOVWF  6B
10C6:  MOVF   79,W
10C7:  MOVWF  6C
10C8:  MOVF   7A,W
10C9:  MOVWF  6D
10CA:  BSF    03.5
10CB:  CLRF   3D
10CC:  BCF    03.5
10CD:  MOVF   64,W
10CE:  BSF    03.5
10CF:  MOVWF  3C
10D0:  BCF    0A.4
10D1:  BCF    03.5
10D2:  CALL   1EE
10D3:  BSF    0A.4
10D4:  BSF    03.1
10D5:  MOVF   6D,W
10D6:  BSF    03.5
10D7:  MOVWF  3F
10D8:  BCF    03.5
10D9:  MOVF   6C,W
10DA:  BSF    03.5
10DB:  MOVWF  3E
10DC:  BCF    03.5
10DD:  MOVF   6B,W
10DE:  BSF    03.5
10DF:  MOVWF  3D
10E0:  BCF    03.5
10E1:  MOVF   6A,W
10E2:  BSF    03.5
10E3:  MOVWF  3C
10E4:  MOVF   7A,W
10E5:  MOVWF  43
10E6:  MOVF   79,W
10E7:  MOVWF  42
10E8:  MOVF   78,W
10E9:  MOVWF  41
10EA:  MOVF   77,W
10EB:  MOVWF  40
10EC:  BCF    0A.4
10ED:  BCF    03.5
10EE:  CALL   33B
10EF:  BSF    0A.4
10F0:  MOVF   7A,W
10F1:  MOVWF  69
10F2:  MOVF   79,W
10F3:  MOVWF  68
10F4:  MOVF   78,W
10F5:  MOVWF  67
10F6:  MOVF   77,W
10F7:  MOVWF  66
....................    quad = quad % 4;                    // quadrant (0 to 3) 
10F8:  MOVLW  03
10F9:  ANDWF  64,F
....................  
....................    if (quad == 0 || quad == 2) 
10FA:  MOVF   64,F
10FB:  BTFSC  03.2
10FC:  GOTO   101
10FD:  MOVF   64,W
10FE:  SUBLW  02
10FF:  BTFSS  03.2
1100:  GOTO   125
....................       t = frac * PI_DIV_BY_TWO; 
1101:  MOVF   69,W
1102:  BSF    03.5
1103:  MOVWF  3F
1104:  BCF    03.5
1105:  MOVF   68,W
1106:  BSF    03.5
1107:  MOVWF  3E
1108:  BCF    03.5
1109:  MOVF   67,W
110A:  BSF    03.5
110B:  MOVWF  3D
110C:  BCF    03.5
110D:  MOVF   66,W
110E:  BSF    03.5
110F:  MOVWF  3C
1110:  MOVLW  DB
1111:  MOVWF  43
1112:  MOVLW  0F
1113:  MOVWF  42
1114:  MOVLW  49
1115:  MOVWF  41
1116:  MOVLW  7F
1117:  MOVWF  40
1118:  BCF    0A.4
1119:  BCF    03.5
111A:  CALL   481
111B:  BSF    0A.4
111C:  MOVF   7A,W
111D:  MOVWF  5F
111E:  MOVF   79,W
111F:  MOVWF  5E
1120:  MOVF   78,W
1121:  MOVWF  5D
1122:  MOVF   77,W
1123:  MOVWF  5C
....................    else if (quad == 1) 
1124:  GOTO   1B0
1125:  DECFSZ 64,W
1126:  GOTO   16D
....................       t = (1-frac) * PI_DIV_BY_TWO; 
1127:  BSF    03.1
1128:  BSF    03.5
1129:  CLRF   3F
112A:  CLRF   3E
112B:  CLRF   3D
112C:  MOVLW  7F
112D:  MOVWF  3C
112E:  BCF    03.5
112F:  MOVF   69,W
1130:  BSF    03.5
1131:  MOVWF  43
1132:  BCF    03.5
1133:  MOVF   68,W
1134:  BSF    03.5
1135:  MOVWF  42
1136:  BCF    03.5
1137:  MOVF   67,W
1138:  BSF    03.5
1139:  MOVWF  41
113A:  BCF    03.5
113B:  MOVF   66,W
113C:  BSF    03.5
113D:  MOVWF  40
113E:  BCF    0A.4
113F:  BCF    03.5
1140:  CALL   33B
1141:  BSF    0A.4
1142:  MOVF   77,W
1143:  MOVWF  6A
1144:  MOVF   78,W
1145:  MOVWF  6B
1146:  MOVF   79,W
1147:  MOVWF  6C
1148:  MOVF   7A,W
1149:  MOVWF  6D
114A:  BSF    03.5
114B:  MOVWF  3F
114C:  BCF    03.5
114D:  MOVF   79,W
114E:  BSF    03.5
114F:  MOVWF  3E
1150:  BCF    03.5
1151:  MOVF   78,W
1152:  BSF    03.5
1153:  MOVWF  3D
1154:  BCF    03.5
1155:  MOVF   77,W
1156:  BSF    03.5
1157:  MOVWF  3C
1158:  MOVLW  DB
1159:  MOVWF  43
115A:  MOVLW  0F
115B:  MOVWF  42
115C:  MOVLW  49
115D:  MOVWF  41
115E:  MOVLW  7F
115F:  MOVWF  40
1160:  BCF    0A.4
1161:  BCF    03.5
1162:  CALL   481
1163:  BSF    0A.4
1164:  MOVF   7A,W
1165:  MOVWF  5F
1166:  MOVF   79,W
1167:  MOVWF  5E
1168:  MOVF   78,W
1169:  MOVWF  5D
116A:  MOVF   77,W
116B:  MOVWF  5C
....................    else // should be 3 
116C:  GOTO   1B0
....................       t = (frac-1) * PI_DIV_BY_TWO; 
116D:  BSF    03.1
116E:  MOVF   69,W
116F:  BSF    03.5
1170:  MOVWF  3F
1171:  BCF    03.5
1172:  MOVF   68,W
1173:  BSF    03.5
1174:  MOVWF  3E
1175:  BCF    03.5
1176:  MOVF   67,W
1177:  BSF    03.5
1178:  MOVWF  3D
1179:  BCF    03.5
117A:  MOVF   66,W
117B:  BSF    03.5
117C:  MOVWF  3C
117D:  CLRF   43
117E:  CLRF   42
117F:  CLRF   41
1180:  MOVLW  7F
1181:  MOVWF  40
1182:  BCF    0A.4
1183:  BCF    03.5
1184:  CALL   33B
1185:  BSF    0A.4
1186:  MOVF   77,W
1187:  MOVWF  6A
1188:  MOVF   78,W
1189:  MOVWF  6B
118A:  MOVF   79,W
118B:  MOVWF  6C
118C:  MOVF   7A,W
118D:  MOVWF  6D
118E:  BSF    03.5
118F:  MOVWF  3F
1190:  BCF    03.5
1191:  MOVF   79,W
1192:  BSF    03.5
1193:  MOVWF  3E
1194:  BCF    03.5
1195:  MOVF   78,W
1196:  BSF    03.5
1197:  MOVWF  3D
1198:  BCF    03.5
1199:  MOVF   77,W
119A:  BSF    03.5
119B:  MOVWF  3C
119C:  MOVLW  DB
119D:  MOVWF  43
119E:  MOVLW  0F
119F:  MOVWF  42
11A0:  MOVLW  49
11A1:  MOVWF  41
11A2:  MOVLW  7F
11A3:  MOVWF  40
11A4:  BCF    0A.4
11A5:  BCF    03.5
11A6:  CALL   481
11A7:  BSF    0A.4
11A8:  MOVF   7A,W
11A9:  MOVWF  5F
11AA:  MOVF   79,W
11AB:  MOVWF  5E
11AC:  MOVF   78,W
11AD:  MOVWF  5D
11AE:  MOVF   77,W
11AF:  MOVWF  5C
....................  
....................    y = 1.0; 
11B0:  CLRF   5B
11B1:  CLRF   5A
11B2:  CLRF   59
11B3:  MOVLW  7F
11B4:  MOVWF  58
....................    t = t * t; 
11B5:  MOVF   5F,W
11B6:  BSF    03.5
11B7:  MOVWF  3F
11B8:  BCF    03.5
11B9:  MOVF   5E,W
11BA:  BSF    03.5
11BB:  MOVWF  3E
11BC:  BCF    03.5
11BD:  MOVF   5D,W
11BE:  BSF    03.5
11BF:  MOVWF  3D
11C0:  BCF    03.5
11C1:  MOVF   5C,W
11C2:  BSF    03.5
11C3:  MOVWF  3C
11C4:  BCF    03.5
11C5:  MOVF   5F,W
11C6:  BSF    03.5
11C7:  MOVWF  43
11C8:  BCF    03.5
11C9:  MOVF   5E,W
11CA:  BSF    03.5
11CB:  MOVWF  42
11CC:  BCF    03.5
11CD:  MOVF   5D,W
11CE:  BSF    03.5
11CF:  MOVWF  41
11D0:  BCF    03.5
11D1:  MOVF   5C,W
11D2:  BSF    03.5
11D3:  MOVWF  40
11D4:  BCF    0A.4
11D5:  BCF    03.5
11D6:  CALL   481
11D7:  BSF    0A.4
11D8:  MOVF   7A,W
11D9:  MOVWF  5F
11DA:  MOVF   79,W
11DB:  MOVWF  5E
11DC:  MOVF   78,W
11DD:  MOVWF  5D
11DE:  MOVF   77,W
11DF:  MOVWF  5C
....................    for (i = 0; i <= 5; i++) 
11E0:  CLRF   65
11E1:  MOVF   65,W
11E2:  SUBLW  05
11E3:  BTFSS  03.0
11E4:  GOTO   277
....................    { 
....................       t2 = t2 * t; 
11E5:  MOVF   63,W
11E6:  BSF    03.5
11E7:  MOVWF  3F
11E8:  BCF    03.5
11E9:  MOVF   62,W
11EA:  BSF    03.5
11EB:  MOVWF  3E
11EC:  BCF    03.5
11ED:  MOVF   61,W
11EE:  BSF    03.5
11EF:  MOVWF  3D
11F0:  BCF    03.5
11F1:  MOVF   60,W
11F2:  BSF    03.5
11F3:  MOVWF  3C
11F4:  BCF    03.5
11F5:  MOVF   5F,W
11F6:  BSF    03.5
11F7:  MOVWF  43
11F8:  BCF    03.5
11F9:  MOVF   5E,W
11FA:  BSF    03.5
11FB:  MOVWF  42
11FC:  BCF    03.5
11FD:  MOVF   5D,W
11FE:  BSF    03.5
11FF:  MOVWF  41
1200:  BCF    03.5
1201:  MOVF   5C,W
1202:  BSF    03.5
1203:  MOVWF  40
1204:  BCF    0A.4
1205:  BCF    03.5
1206:  CALL   481
1207:  BSF    0A.4
1208:  MOVF   7A,W
1209:  MOVWF  63
120A:  MOVF   79,W
120B:  MOVWF  62
120C:  MOVF   78,W
120D:  MOVWF  61
120E:  MOVF   77,W
120F:  MOVWF  60
....................       y = y + p[i] * t2; 
1210:  RLF    65,W
1211:  MOVWF  77
1212:  RLF    77,F
1213:  MOVLW  FC
1214:  ANDWF  77,F
1215:  MOVF   77,W
1216:  ADDLW  A0
1217:  MOVWF  04
1218:  BCF    03.7
1219:  MOVF   00,W
121A:  MOVWF  6A
121B:  INCF   04,F
121C:  MOVF   00,W
121D:  MOVWF  6B
121E:  INCF   04,F
121F:  MOVF   00,W
1220:  MOVWF  6C
1221:  INCF   04,F
1222:  MOVF   00,W
1223:  MOVWF  6D
1224:  BSF    03.5
1225:  MOVWF  3F
1226:  BCF    03.5
1227:  MOVF   6C,W
1228:  BSF    03.5
1229:  MOVWF  3E
122A:  BCF    03.5
122B:  MOVF   6B,W
122C:  BSF    03.5
122D:  MOVWF  3D
122E:  BCF    03.5
122F:  MOVF   6A,W
1230:  BSF    03.5
1231:  MOVWF  3C
1232:  BCF    03.5
1233:  MOVF   63,W
1234:  BSF    03.5
1235:  MOVWF  43
1236:  BCF    03.5
1237:  MOVF   62,W
1238:  BSF    03.5
1239:  MOVWF  42
123A:  BCF    03.5
123B:  MOVF   61,W
123C:  BSF    03.5
123D:  MOVWF  41
123E:  BCF    03.5
123F:  MOVF   60,W
1240:  BSF    03.5
1241:  MOVWF  40
1242:  BCF    0A.4
1243:  BCF    03.5
1244:  CALL   481
1245:  BSF    0A.4
1246:  CLRF   6B
1247:  MOVF   04,W
1248:  MOVWF  6A
1249:  BCF    6B.0
124A:  BTFSC  03.7
124B:  BSF    6B.0
124C:  BCF    03.1
124D:  MOVF   5B,W
124E:  BSF    03.5
124F:  MOVWF  3F
1250:  BCF    03.5
1251:  MOVF   5A,W
1252:  BSF    03.5
1253:  MOVWF  3E
1254:  BCF    03.5
1255:  MOVF   59,W
1256:  BSF    03.5
1257:  MOVWF  3D
1258:  BCF    03.5
1259:  MOVF   58,W
125A:  BSF    03.5
125B:  MOVWF  3C
125C:  MOVF   7A,W
125D:  MOVWF  43
125E:  MOVF   79,W
125F:  MOVWF  42
1260:  MOVF   78,W
1261:  MOVWF  41
1262:  MOVF   77,W
1263:  MOVWF  40
1264:  BCF    0A.4
1265:  BCF    03.5
1266:  CALL   33B
1267:  BSF    0A.4
1268:  MOVF   6A,W
1269:  MOVWF  04
126A:  BCF    03.7
126B:  BTFSC  6B.0
126C:  BSF    03.7
126D:  MOVF   7A,W
126E:  MOVWF  5B
126F:  MOVF   79,W
1270:  MOVWF  5A
1271:  MOVF   78,W
1272:  MOVWF  59
1273:  MOVF   77,W
1274:  MOVWF  58
....................    } 
1275:  INCF   65,F
1276:  GOTO   1E1
....................  
....................    if (quad == 2 || quad == 1) 
1277:  MOVF   64,W
1278:  SUBLW  02
1279:  BTFSC  03.2
127A:  GOTO   27D
127B:  DECFSZ 64,W
127C:  GOTO   280
....................       y = -y;  // correct sign 
127D:  MOVF   59,W
127E:  XORLW  80
127F:  MOVWF  59
....................  
....................    return (y); 
1280:  MOVF   58,W
1281:  MOVWF  77
1282:  MOVF   59,W
1283:  MOVWF  78
1284:  MOVF   5A,W
1285:  MOVWF  79
1286:  MOVF   5B,W
1287:  MOVWF  7A
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
*
1000:  BSF    03.1
1001:  MOVF   4F,W
1002:  BSF    03.5
1003:  MOVWF  3F
1004:  BCF    03.5
1005:  MOVF   4E,W
1006:  BSF    03.5
1007:  MOVWF  3E
1008:  BCF    03.5
1009:  MOVF   4D,W
100A:  BSF    03.5
100B:  MOVWF  3D
100C:  BCF    03.5
100D:  MOVF   4C,W
100E:  BSF    03.5
100F:  MOVWF  3C
1010:  MOVLW  DB
1011:  MOVWF  43
1012:  MOVLW  0F
1013:  MOVWF  42
1014:  MOVLW  49
1015:  MOVWF  41
1016:  MOVLW  7F
1017:  MOVWF  40
1018:  BCF    0A.4
1019:  BCF    03.5
101A:  CALL   33B
101B:  BSF    0A.4
101C:  MOVF   77,W
101D:  MOVWF  50
101E:  MOVF   78,W
101F:  MOVWF  51
1020:  MOVF   79,W
1021:  MOVWF  52
1022:  MOVF   7A,W
1023:  MOVWF  53
1024:  MOVF   53,W
1025:  MOVWF  57
1026:  MOVF   52,W
1027:  MOVWF  56
1028:  MOVF   51,W
1029:  MOVWF  55
102A:  MOVF   50,W
102B:  MOVWF  54
.................... } 
*
1288:  BCF    0A.3
1289:  BSF    0A.4
128A:  GOTO   732 (RETURN)
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... int h,x,cont,i,z; 
.................... float numero,resultado,numero2; 
.................... int vector[20];//Se crea vector para que se almacene cada numero que se digite. 
.................... int obtenerNumero(int a);//Cavecera de la funcion 
.................... void main() 
.................... { 
*
13C8:  CLRF   04
13C9:  BCF    03.7
13CA:  MOVLW  1F
13CB:  ANDWF  03,F
13CC:  BSF    03.5
13CD:  BSF    1F.0
13CE:  BSF    1F.1
13CF:  BSF    1F.2
13D0:  BCF    1F.3
13D1:  MOVLW  07
13D2:  MOVWF  1C
....................    lcd_init();    //inicicializar el LCD    
*
13D8:  BCF    0A.4
13D9:  GOTO   073
13DA:  BSF    0A.4
....................    kbd_init();    //inicicializar teclado 
13DB:  BCF    0A.4
13DC:  GOTO   0A1
13DD:  BSF    0A.4
....................    lcd_enviar(lcd_comando,lcd_home);//cursor a casa   
13DE:  CLRF   5E
13DF:  MOVLW  02
13E0:  MOVWF  5F
13E1:  BCF    0A.4
13E2:  CALL   03E
13E3:  BSF    0A.4
....................    lcd_gotoxy(4,1); 
13E4:  MOVLW  04
13E5:  MOVWF  5A
13E6:  MOVLW  01
13E7:  MOVWF  5B
13E8:  BCF    0A.4
13E9:  CALL   0A4
13EA:  BSF    0A.4
....................    printf(lcd_putc,"WILSON J.");//Mensaje 
13EB:  MOVLW  18
13EC:  BSF    03.6
13ED:  MOVWF  0D
13EE:  MOVLW  00
13EF:  MOVWF  0F
13F0:  BCF    0A.4
13F1:  BCF    03.6
13F2:  CALL   111
13F3:  BSF    0A.4
....................    lcd_gotoxy(3,2);  
13F4:  MOVLW  03
13F5:  MOVWF  5A
13F6:  MOVLW  02
13F7:  MOVWF  5B
13F8:  BCF    0A.4
13F9:  CALL   0A4
13FA:  BSF    0A.4
....................    printf(lcd_putc,"CALCULADORA"); 
13FB:  MOVLW  1D
13FC:  BSF    03.6
13FD:  MOVWF  0D
13FE:  MOVLW  00
13FF:  MOVWF  0F
1400:  BCF    0A.4
1401:  BCF    03.6
1402:  CALL   111
1403:  BSF    0A.4
....................    delay_ms(600); 
1404:  MOVLW  03
1405:  MOVWF  4C
1406:  MOVLW  C8
1407:  MOVWF  5A
1408:  BCF    0A.4
1409:  CALL   029
140A:  BSF    0A.4
140B:  DECFSZ 4C,F
140C:  GOTO   406
....................    lcd_enviar(lcd_comando,lcd_clear); 
140D:  CLRF   5E
140E:  MOVLW  01
140F:  MOVWF  5F
1410:  BCF    0A.4
1411:  CALL   03E
1412:  BSF    0A.4
....................    for(i=0;i<20;i++)//Borra vector para que no coja valores aleatorios 
1413:  CLRF   2A
1414:  MOVF   2A,W
1415:  SUBLW  13
1416:  BTFSS  03.0
1417:  GOTO   41F
....................    { 
....................      vector[i]=0; 
1418:  MOVLW  38
1419:  ADDWF  2A,W
141A:  MOVWF  04
141B:  BCF    03.7
141C:  CLRF   00
....................    } 
141D:  INCF   2A,F
141E:  GOTO   414
....................    while(true) 
....................    {   
....................       principio://Etiqueta 
....................       z=tecla();           // esta función se queda esperando hasta que se oprima una tecla  
141F:  BCF    0A.4
1420:  GOTO   1CE
1421:  BSF    0A.4
1422:  MOVF   78,W
1423:  MOVWF  2B
....................       vector[cont]=(z-48); // Cada vez que se pulsa una tecla la almacena y la vuelve entero 
1424:  MOVLW  38
1425:  ADDWF  29,W
1426:  MOVWF  04
1427:  BCF    03.7
1428:  MOVLW  30
1429:  SUBWF  2B,W
142A:  MOVWF  00
....................        
....................       if(z!='=',z!='+',z!='-',z!='x',z!='/',z!='n') 
142B:  MOVF   2B,W
142C:  SUBLW  3D
142D:  BTFSS  03.2
142E:  GOTO   431
142F:  MOVLW  00
1430:  GOTO   432
1431:  MOVLW  01
1432:  MOVF   2B,W
1433:  SUBLW  2B
1434:  BTFSS  03.2
1435:  GOTO   438
1436:  MOVLW  00
1437:  GOTO   439
1438:  MOVLW  01
1439:  MOVF   2B,W
143A:  SUBLW  2D
143B:  BTFSS  03.2
143C:  GOTO   43F
143D:  MOVLW  00
143E:  GOTO   440
143F:  MOVLW  01
1440:  MOVF   2B,W
1441:  SUBLW  78
1442:  BTFSS  03.2
1443:  GOTO   446
1444:  MOVLW  00
1445:  GOTO   447
1446:  MOVLW  01
1447:  MOVF   2B,W
1448:  SUBLW  2F
1449:  BTFSS  03.2
144A:  GOTO   44D
144B:  MOVLW  00
144C:  GOTO   44E
144D:  MOVLW  01
144E:  MOVF   2B,W
144F:  SUBLW  6E
1450:  BTFSC  03.2
1451:  GOTO   457
....................       { 
....................       printf(lcd_putc, "%c",z);//Imprime únicamente numeros en la lcd 
1452:  MOVF   2B,W
1453:  MOVWF  59
1454:  BCF    0A.4
1455:  CALL   0DD
1456:  BSF    0A.4
....................        
....................       } 
....................       switch ( z )//Compara si se introduce un operador 
....................       { 
1457:  MOVF   2B,W
1458:  XORLW  2B
1459:  BTFSC  03.2
145A:  GOTO   468
145B:  XORLW  06
145C:  BTFSC  03.2
145D:  GOTO   496
145E:  XORLW  55
145F:  BTFSC  03.2
1460:  GOTO   4C4
1461:  XORLW  57
1462:  BTFSC  03.2
1463:  GOTO   4F2
1464:  XORLW  41
1465:  BTFSC  03.2
1466:  GOTO   520
1467:  GOTO   54E
....................       case '+'://Si es + la coloca h = 1 y obtiene el número del vector 
....................          lcd_enviar(lcd_comando,lcd_clear); 
1468:  CLRF   5E
1469:  MOVLW  01
146A:  MOVWF  5F
146B:  BCF    0A.4
146C:  CALL   03E
146D:  BSF    0A.4
....................          numero = obtenerNumero(cont ); 
146E:  MOVF   29,W
146F:  MOVWF  4C
1470:  BCF    0A.4
1471:  BSF    0A.3
1472:  CALL   577
1473:  BSF    0A.4
1474:  BCF    0A.3
1475:  BSF    03.5
1476:  CLRF   3D
1477:  MOVF   78,W
1478:  MOVWF  3C
1479:  BCF    0A.4
147A:  BCF    03.5
147B:  CALL   1EE
147C:  BSF    0A.4
147D:  MOVF   7A,W
147E:  MOVWF  2F
147F:  MOVF   79,W
1480:  MOVWF  2E
1481:  MOVF   78,W
1482:  MOVWF  2D
1483:  MOVF   77,W
1484:  MOVWF  2C
....................          h=1; 
1485:  MOVLW  01
1486:  MOVWF  27
....................          for(i=0;i<20;i++)//Limpia vector para la digitación del siguiente número 
1487:  CLRF   2A
1488:  MOVF   2A,W
1489:  SUBLW  13
148A:  BTFSS  03.0
148B:  GOTO   493
....................          { 
....................            vector[i]=0; 
148C:  MOVLW  38
148D:  ADDWF  2A,W
148E:  MOVWF  04
148F:  BCF    03.7
1490:  CLRF   00
....................          } 
1491:  INCF   2A,F
1492:  GOTO   488
....................          cont =0; 
1493:  CLRF   29
....................          goto principio;//devuelve al pricipio para que se digite el siguiente 
1494:  GOTO   41F
....................          break; 
1495:  GOTO   54E
....................       case '-'://Si es - la coloca h = 2 y obtiene el número del vector 
....................         lcd_enviar(lcd_comando,lcd_clear); 
1496:  CLRF   5E
1497:  MOVLW  01
1498:  MOVWF  5F
1499:  BCF    0A.4
149A:  CALL   03E
149B:  BSF    0A.4
....................         numero = obtenerNumero(cont ); 
149C:  MOVF   29,W
149D:  MOVWF  4C
149E:  BCF    0A.4
149F:  BSF    0A.3
14A0:  CALL   577
14A1:  BSF    0A.4
14A2:  BCF    0A.3
14A3:  BSF    03.5
14A4:  CLRF   3D
14A5:  MOVF   78,W
14A6:  MOVWF  3C
14A7:  BCF    0A.4
14A8:  BCF    03.5
14A9:  CALL   1EE
14AA:  BSF    0A.4
14AB:  MOVF   7A,W
14AC:  MOVWF  2F
14AD:  MOVF   79,W
14AE:  MOVWF  2E
14AF:  MOVF   78,W
14B0:  MOVWF  2D
14B1:  MOVF   77,W
14B2:  MOVWF  2C
....................         h=2; 
14B3:  MOVLW  02
14B4:  MOVWF  27
....................         for(i=0;i<20;i++)//Limpia vector para la digitación del siguiente número 
14B5:  CLRF   2A
14B6:  MOVF   2A,W
14B7:  SUBLW  13
14B8:  BTFSS  03.0
14B9:  GOTO   4C1
....................          { 
....................            vector[i]=0; 
14BA:  MOVLW  38
14BB:  ADDWF  2A,W
14BC:  MOVWF  04
14BD:  BCF    03.7
14BE:  CLRF   00
....................          } 
14BF:  INCF   2A,F
14C0:  GOTO   4B6
....................          cont =0; 
14C1:  CLRF   29
....................         goto principio;//Vuelve a la etiqueta principio paraque se digite el siguiente número 
14C2:  GOTO   41F
....................          break; 
14C3:  GOTO   54E
....................       case 'x'://Si es x la coloca h = 3 y obtiene el número del vector 
....................         lcd_enviar(lcd_comando,lcd_clear); 
14C4:  CLRF   5E
14C5:  MOVLW  01
14C6:  MOVWF  5F
14C7:  BCF    0A.4
14C8:  CALL   03E
14C9:  BSF    0A.4
....................         numero = obtenerNumero(cont ); 
14CA:  MOVF   29,W
14CB:  MOVWF  4C
14CC:  BCF    0A.4
14CD:  BSF    0A.3
14CE:  CALL   577
14CF:  BSF    0A.4
14D0:  BCF    0A.3
14D1:  BSF    03.5
14D2:  CLRF   3D
14D3:  MOVF   78,W
14D4:  MOVWF  3C
14D5:  BCF    0A.4
14D6:  BCF    03.5
14D7:  CALL   1EE
14D8:  BSF    0A.4
14D9:  MOVF   7A,W
14DA:  MOVWF  2F
14DB:  MOVF   79,W
14DC:  MOVWF  2E
14DD:  MOVF   78,W
14DE:  MOVWF  2D
14DF:  MOVF   77,W
14E0:  MOVWF  2C
....................         h=3; 
14E1:  MOVLW  03
14E2:  MOVWF  27
....................         for(i=0;i<20;i++)//Limpia vector para la digitación del siguiente número 
14E3:  CLRF   2A
14E4:  MOVF   2A,W
14E5:  SUBLW  13
14E6:  BTFSS  03.0
14E7:  GOTO   4EF
....................          { 
....................            vector[i]=0; 
14E8:  MOVLW  38
14E9:  ADDWF  2A,W
14EA:  MOVWF  04
14EB:  BCF    03.7
14EC:  CLRF   00
....................          } 
14ED:  INCF   2A,F
14EE:  GOTO   4E4
....................          cont =0; 
14EF:  CLRF   29
....................         goto principio;//Vuelve a la etiqueta principio paraque se digite el siguiente número 
14F0:  GOTO   41F
....................         break; 
14F1:  GOTO   54E
....................       case '/'://Si es / la coloca h = 4 y obtiene el número del vector 
....................         lcd_enviar(lcd_comando,lcd_clear); 
14F2:  CLRF   5E
14F3:  MOVLW  01
14F4:  MOVWF  5F
14F5:  BCF    0A.4
14F6:  CALL   03E
14F7:  BSF    0A.4
....................         numero = obtenerNumero(cont ); 
14F8:  MOVF   29,W
14F9:  MOVWF  4C
14FA:  BCF    0A.4
14FB:  BSF    0A.3
14FC:  CALL   577
14FD:  BSF    0A.4
14FE:  BCF    0A.3
14FF:  BSF    03.5
1500:  CLRF   3D
1501:  MOVF   78,W
1502:  MOVWF  3C
1503:  BCF    0A.4
1504:  BCF    03.5
1505:  CALL   1EE
1506:  BSF    0A.4
1507:  MOVF   7A,W
1508:  MOVWF  2F
1509:  MOVF   79,W
150A:  MOVWF  2E
150B:  MOVF   78,W
150C:  MOVWF  2D
150D:  MOVF   77,W
150E:  MOVWF  2C
....................         h=4; 
150F:  MOVLW  04
1510:  MOVWF  27
....................         for(i=0;i<20;i++)//Limpia vector para la digitación del siguiente número 
1511:  CLRF   2A
1512:  MOVF   2A,W
1513:  SUBLW  13
1514:  BTFSS  03.0
1515:  GOTO   51D
....................          { 
....................            vector[i]=0; 
1516:  MOVLW  38
1517:  ADDWF  2A,W
1518:  MOVWF  04
1519:  BCF    03.7
151A:  CLRF   00
....................          } 
151B:  INCF   2A,F
151C:  GOTO   512
....................          cont =0; 
151D:  CLRF   29
....................         goto principio;//Vuelve a la etiqueta principio paraque se digite el siguiente número 
151E:  GOTO   41F
....................         break; 
151F:  GOTO   54E
....................       case 'n': 
....................         lcd_enviar(lcd_comando,lcd_clear); 
1520:  CLRF   5E
1521:  MOVLW  01
1522:  MOVWF  5F
1523:  BCF    0A.4
1524:  CALL   03E
1525:  BSF    0A.4
....................         numero = obtenerNumero(cont ); 
1526:  MOVF   29,W
1527:  MOVWF  4C
1528:  BCF    0A.4
1529:  BSF    0A.3
152A:  CALL   577
152B:  BSF    0A.4
152C:  BCF    0A.3
152D:  BSF    03.5
152E:  CLRF   3D
152F:  MOVF   78,W
1530:  MOVWF  3C
1531:  BCF    0A.4
1532:  BCF    03.5
1533:  CALL   1EE
1534:  BSF    0A.4
1535:  MOVF   7A,W
1536:  MOVWF  2F
1537:  MOVF   79,W
1538:  MOVWF  2E
1539:  MOVF   78,W
153A:  MOVWF  2D
153B:  MOVF   77,W
153C:  MOVWF  2C
....................         h=5; 
153D:  MOVLW  05
153E:  MOVWF  27
....................         for(i=0;i<20;i++)//Limpia vector para la digitación del siguiente número 
153F:  CLRF   2A
1540:  MOVF   2A,W
1541:  SUBLW  13
1542:  BTFSS  03.0
1543:  GOTO   54B
....................          { 
....................            vector[i]=0; 
1544:  MOVLW  38
1545:  ADDWF  2A,W
1546:  MOVWF  04
1547:  BCF    03.7
1548:  CLRF   00
....................          } 
1549:  INCF   2A,F
154A:  GOTO   540
....................          cont =0; 
154B:  CLRF   29
....................         goto principio;//Vuelve a la etiqueta principio paraque se digite el siguiente número 
154C:  GOTO   41F
....................         break; 
154D:  GOTO   54E
....................       } 
....................       if(z=='=')//si es igual compara la varible h en que valor esta  
154E:  MOVF   2B,W
154F:  SUBLW  3D
1550:  BTFSS  03.2
1551:  GOTO   75F
....................       {  
....................         switch(h)//y obtiene el segundo número 
....................         { 
1552:  MOVLW  01
1553:  SUBWF  27,W
1554:  ADDLW  FB
1555:  BTFSC  03.0
1556:  GOTO   73B
1557:  ADDLW  05
1558:  GOTO   762
....................         case 1://si esta en 1 suma 
....................            lcd_enviar(lcd_comando,lcd_clear); 
1559:  CLRF   5E
155A:  MOVLW  01
155B:  MOVWF  5F
155C:  BCF    0A.4
155D:  CALL   03E
155E:  BSF    0A.4
....................            numero2 = obtenerNumero(cont )-numero; 
155F:  MOVF   29,W
1560:  MOVWF  4C
1561:  BCF    0A.4
1562:  BSF    0A.3
1563:  CALL   577
1564:  BSF    0A.4
1565:  BCF    0A.3
1566:  BSF    03.5
1567:  CLRF   3D
1568:  MOVF   78,W
1569:  MOVWF  3C
156A:  BCF    0A.4
156B:  BCF    03.5
156C:  CALL   1EE
156D:  BSF    0A.4
156E:  CLRF   4E
156F:  MOVF   04,W
1570:  MOVWF  4D
1571:  BCF    4E.0
1572:  BTFSC  03.7
1573:  BSF    4E.0
1574:  BSF    03.1
1575:  MOVF   7A,W
1576:  BSF    03.5
1577:  MOVWF  3F
1578:  MOVF   79,W
1579:  MOVWF  3E
157A:  MOVF   78,W
157B:  MOVWF  3D
157C:  MOVF   77,W
157D:  MOVWF  3C
157E:  BCF    03.5
157F:  MOVF   2F,W
1580:  BSF    03.5
1581:  MOVWF  43
1582:  BCF    03.5
1583:  MOVF   2E,W
1584:  BSF    03.5
1585:  MOVWF  42
1586:  BCF    03.5
1587:  MOVF   2D,W
1588:  BSF    03.5
1589:  MOVWF  41
158A:  BCF    03.5
158B:  MOVF   2C,W
158C:  BSF    03.5
158D:  MOVWF  40
158E:  BCF    0A.4
158F:  BCF    03.5
1590:  CALL   33B
1591:  BSF    0A.4
1592:  MOVF   4D,W
1593:  MOVWF  04
1594:  BCF    03.7
1595:  BTFSC  4E.0
1596:  BSF    03.7
1597:  MOVF   7A,W
1598:  MOVWF  37
1599:  MOVF   79,W
159A:  MOVWF  36
159B:  MOVF   78,W
159C:  MOVWF  35
159D:  MOVF   77,W
159E:  MOVWF  34
....................            resultado = numero+numero2; 
159F:  BCF    03.1
15A0:  MOVF   2F,W
15A1:  BSF    03.5
15A2:  MOVWF  3F
15A3:  BCF    03.5
15A4:  MOVF   2E,W
15A5:  BSF    03.5
15A6:  MOVWF  3E
15A7:  BCF    03.5
15A8:  MOVF   2D,W
15A9:  BSF    03.5
15AA:  MOVWF  3D
15AB:  BCF    03.5
15AC:  MOVF   2C,W
15AD:  BSF    03.5
15AE:  MOVWF  3C
15AF:  BCF    03.5
15B0:  MOVF   37,W
15B1:  BSF    03.5
15B2:  MOVWF  43
15B3:  BCF    03.5
15B4:  MOVF   36,W
15B5:  BSF    03.5
15B6:  MOVWF  42
15B7:  BCF    03.5
15B8:  MOVF   35,W
15B9:  BSF    03.5
15BA:  MOVWF  41
15BB:  BCF    03.5
15BC:  MOVF   34,W
15BD:  BSF    03.5
15BE:  MOVWF  40
15BF:  BCF    0A.4
15C0:  BCF    03.5
15C1:  CALL   33B
15C2:  BSF    0A.4
15C3:  MOVF   7A,W
15C4:  MOVWF  33
15C5:  MOVF   79,W
15C6:  MOVWF  32
15C7:  MOVF   78,W
15C8:  MOVWF  31
15C9:  MOVF   77,W
15CA:  MOVWF  30
....................            break; 
15CB:  GOTO   73B
....................         case 2://si esta en 2 resta 
....................            lcd_enviar(lcd_comando,lcd_clear); 
15CC:  CLRF   5E
15CD:  MOVLW  01
15CE:  MOVWF  5F
15CF:  BCF    0A.4
15D0:  CALL   03E
15D1:  BSF    0A.4
....................            numero2 = obtenerNumero(cont )-numero; 
15D2:  MOVF   29,W
15D3:  MOVWF  4C
15D4:  BCF    0A.4
15D5:  BSF    0A.3
15D6:  CALL   577
15D7:  BSF    0A.4
15D8:  BCF    0A.3
15D9:  BSF    03.5
15DA:  CLRF   3D
15DB:  MOVF   78,W
15DC:  MOVWF  3C
15DD:  BCF    0A.4
15DE:  BCF    03.5
15DF:  CALL   1EE
15E0:  BSF    0A.4
15E1:  CLRF   4E
15E2:  MOVF   04,W
15E3:  MOVWF  4D
15E4:  BCF    4E.0
15E5:  BTFSC  03.7
15E6:  BSF    4E.0
15E7:  BSF    03.1
15E8:  MOVF   7A,W
15E9:  BSF    03.5
15EA:  MOVWF  3F
15EB:  MOVF   79,W
15EC:  MOVWF  3E
15ED:  MOVF   78,W
15EE:  MOVWF  3D
15EF:  MOVF   77,W
15F0:  MOVWF  3C
15F1:  BCF    03.5
15F2:  MOVF   2F,W
15F3:  BSF    03.5
15F4:  MOVWF  43
15F5:  BCF    03.5
15F6:  MOVF   2E,W
15F7:  BSF    03.5
15F8:  MOVWF  42
15F9:  BCF    03.5
15FA:  MOVF   2D,W
15FB:  BSF    03.5
15FC:  MOVWF  41
15FD:  BCF    03.5
15FE:  MOVF   2C,W
15FF:  BSF    03.5
1600:  MOVWF  40
1601:  BCF    0A.4
1602:  BCF    03.5
1603:  CALL   33B
1604:  BSF    0A.4
1605:  MOVF   4D,W
1606:  MOVWF  04
1607:  BCF    03.7
1608:  BTFSC  4E.0
1609:  BSF    03.7
160A:  MOVF   7A,W
160B:  MOVWF  37
160C:  MOVF   79,W
160D:  MOVWF  36
160E:  MOVF   78,W
160F:  MOVWF  35
1610:  MOVF   77,W
1611:  MOVWF  34
....................            resultado = numero-numero2; 
1612:  BSF    03.1
1613:  MOVF   2F,W
1614:  BSF    03.5
1615:  MOVWF  3F
1616:  BCF    03.5
1617:  MOVF   2E,W
1618:  BSF    03.5
1619:  MOVWF  3E
161A:  BCF    03.5
161B:  MOVF   2D,W
161C:  BSF    03.5
161D:  MOVWF  3D
161E:  BCF    03.5
161F:  MOVF   2C,W
1620:  BSF    03.5
1621:  MOVWF  3C
1622:  BCF    03.5
1623:  MOVF   37,W
1624:  BSF    03.5
1625:  MOVWF  43
1626:  BCF    03.5
1627:  MOVF   36,W
1628:  BSF    03.5
1629:  MOVWF  42
162A:  BCF    03.5
162B:  MOVF   35,W
162C:  BSF    03.5
162D:  MOVWF  41
162E:  BCF    03.5
162F:  MOVF   34,W
1630:  BSF    03.5
1631:  MOVWF  40
1632:  BCF    0A.4
1633:  BCF    03.5
1634:  CALL   33B
1635:  BSF    0A.4
1636:  MOVF   7A,W
1637:  MOVWF  33
1638:  MOVF   79,W
1639:  MOVWF  32
163A:  MOVF   78,W
163B:  MOVWF  31
163C:  MOVF   77,W
163D:  MOVWF  30
....................            break; 
163E:  GOTO   73B
....................         case 3://si esta en 3 multiplica 
....................            lcd_enviar(lcd_comando,lcd_clear); 
163F:  CLRF   5E
1640:  MOVLW  01
1641:  MOVWF  5F
1642:  BCF    0A.4
1643:  CALL   03E
1644:  BSF    0A.4
....................            numero2 = obtenerNumero(cont )-numero; 
1645:  MOVF   29,W
1646:  MOVWF  4C
1647:  BCF    0A.4
1648:  BSF    0A.3
1649:  CALL   577
164A:  BSF    0A.4
164B:  BCF    0A.3
164C:  BSF    03.5
164D:  CLRF   3D
164E:  MOVF   78,W
164F:  MOVWF  3C
1650:  BCF    0A.4
1651:  BCF    03.5
1652:  CALL   1EE
1653:  BSF    0A.4
1654:  CLRF   4E
1655:  MOVF   04,W
1656:  MOVWF  4D
1657:  BCF    4E.0
1658:  BTFSC  03.7
1659:  BSF    4E.0
165A:  BSF    03.1
165B:  MOVF   7A,W
165C:  BSF    03.5
165D:  MOVWF  3F
165E:  MOVF   79,W
165F:  MOVWF  3E
1660:  MOVF   78,W
1661:  MOVWF  3D
1662:  MOVF   77,W
1663:  MOVWF  3C
1664:  BCF    03.5
1665:  MOVF   2F,W
1666:  BSF    03.5
1667:  MOVWF  43
1668:  BCF    03.5
1669:  MOVF   2E,W
166A:  BSF    03.5
166B:  MOVWF  42
166C:  BCF    03.5
166D:  MOVF   2D,W
166E:  BSF    03.5
166F:  MOVWF  41
1670:  BCF    03.5
1671:  MOVF   2C,W
1672:  BSF    03.5
1673:  MOVWF  40
1674:  BCF    0A.4
1675:  BCF    03.5
1676:  CALL   33B
1677:  BSF    0A.4
1678:  MOVF   4D,W
1679:  MOVWF  04
167A:  BCF    03.7
167B:  BTFSC  4E.0
167C:  BSF    03.7
167D:  MOVF   7A,W
167E:  MOVWF  37
167F:  MOVF   79,W
1680:  MOVWF  36
1681:  MOVF   78,W
1682:  MOVWF  35
1683:  MOVF   77,W
1684:  MOVWF  34
....................            resultado = numero*numero2; 
1685:  MOVF   2F,W
1686:  BSF    03.5
1687:  MOVWF  3F
1688:  BCF    03.5
1689:  MOVF   2E,W
168A:  BSF    03.5
168B:  MOVWF  3E
168C:  BCF    03.5
168D:  MOVF   2D,W
168E:  BSF    03.5
168F:  MOVWF  3D
1690:  BCF    03.5
1691:  MOVF   2C,W
1692:  BSF    03.5
1693:  MOVWF  3C
1694:  BCF    03.5
1695:  MOVF   37,W
1696:  BSF    03.5
1697:  MOVWF  43
1698:  BCF    03.5
1699:  MOVF   36,W
169A:  BSF    03.5
169B:  MOVWF  42
169C:  BCF    03.5
169D:  MOVF   35,W
169E:  BSF    03.5
169F:  MOVWF  41
16A0:  BCF    03.5
16A1:  MOVF   34,W
16A2:  BSF    03.5
16A3:  MOVWF  40
16A4:  BCF    0A.4
16A5:  BCF    03.5
16A6:  CALL   481
16A7:  BSF    0A.4
16A8:  MOVF   7A,W
16A9:  MOVWF  33
16AA:  MOVF   79,W
16AB:  MOVWF  32
16AC:  MOVF   78,W
16AD:  MOVWF  31
16AE:  MOVF   77,W
16AF:  MOVWF  30
....................            break; 
16B0:  GOTO   73B
....................         case 4://si esta en 4 divide 
....................            lcd_enviar(lcd_comando,lcd_clear); 
16B1:  CLRF   5E
16B2:  MOVLW  01
16B3:  MOVWF  5F
16B4:  BCF    0A.4
16B5:  CALL   03E
16B6:  BSF    0A.4
....................            numero2 = obtenerNumero(cont )-numero; 
16B7:  MOVF   29,W
16B8:  MOVWF  4C
16B9:  BCF    0A.4
16BA:  BSF    0A.3
16BB:  CALL   577
16BC:  BSF    0A.4
16BD:  BCF    0A.3
16BE:  BSF    03.5
16BF:  CLRF   3D
16C0:  MOVF   78,W
16C1:  MOVWF  3C
16C2:  BCF    0A.4
16C3:  BCF    03.5
16C4:  CALL   1EE
16C5:  BSF    0A.4
16C6:  CLRF   4E
16C7:  MOVF   04,W
16C8:  MOVWF  4D
16C9:  BCF    4E.0
16CA:  BTFSC  03.7
16CB:  BSF    4E.0
16CC:  BSF    03.1
16CD:  MOVF   7A,W
16CE:  BSF    03.5
16CF:  MOVWF  3F
16D0:  MOVF   79,W
16D1:  MOVWF  3E
16D2:  MOVF   78,W
16D3:  MOVWF  3D
16D4:  MOVF   77,W
16D5:  MOVWF  3C
16D6:  BCF    03.5
16D7:  MOVF   2F,W
16D8:  BSF    03.5
16D9:  MOVWF  43
16DA:  BCF    03.5
16DB:  MOVF   2E,W
16DC:  BSF    03.5
16DD:  MOVWF  42
16DE:  BCF    03.5
16DF:  MOVF   2D,W
16E0:  BSF    03.5
16E1:  MOVWF  41
16E2:  BCF    03.5
16E3:  MOVF   2C,W
16E4:  BSF    03.5
16E5:  MOVWF  40
16E6:  BCF    0A.4
16E7:  BCF    03.5
16E8:  CALL   33B
16E9:  BSF    0A.4
16EA:  MOVF   4D,W
16EB:  MOVWF  04
16EC:  BCF    03.7
16ED:  BTFSC  4E.0
16EE:  BSF    03.7
16EF:  MOVF   7A,W
16F0:  MOVWF  37
16F1:  MOVF   79,W
16F2:  MOVWF  36
16F3:  MOVF   78,W
16F4:  MOVWF  35
16F5:  MOVF   77,W
16F6:  MOVWF  34
....................            resultado = numero/numero2;   
16F7:  MOVF   2F,W
16F8:  BSF    03.5
16F9:  MOVWF  3B
16FA:  BCF    03.5
16FB:  MOVF   2E,W
16FC:  BSF    03.5
16FD:  MOVWF  3A
16FE:  BCF    03.5
16FF:  MOVF   2D,W
1700:  BSF    03.5
1701:  MOVWF  39
1702:  BCF    03.5
1703:  MOVF   2C,W
1704:  BSF    03.5
1705:  MOVWF  38
1706:  BCF    03.5
1707:  MOVF   37,W
1708:  BSF    03.5
1709:  MOVWF  3F
170A:  BCF    03.5
170B:  MOVF   36,W
170C:  BSF    03.5
170D:  MOVWF  3E
170E:  BCF    03.5
170F:  MOVF   35,W
1710:  BSF    03.5
1711:  MOVWF  3D
1712:  BCF    03.5
1713:  MOVF   34,W
1714:  BSF    03.5
1715:  MOVWF  3C
1716:  BCF    0A.4
1717:  BCF    03.5
1718:  CALL   24E
1719:  BSF    0A.4
171A:  MOVF   7A,W
171B:  MOVWF  33
171C:  MOVF   79,W
171D:  MOVWF  32
171E:  MOVF   78,W
171F:  MOVWF  31
1720:  MOVF   77,W
1721:  MOVWF  30
....................            break; 
1722:  GOTO   73B
....................         case 5://si esta en 4 divide 
....................            lcd_enviar(lcd_comando,lcd_clear); 
1723:  CLRF   5E
1724:  MOVLW  01
1725:  MOVWF  5F
1726:  BCF    0A.4
1727:  CALL   03E
1728:  BSF    0A.4
....................            resultado = sin(numero); 
1729:  MOVF   2F,W
172A:  MOVWF  4F
172B:  MOVF   2E,W
172C:  MOVWF  4E
172D:  MOVF   2D,W
172E:  MOVWF  4D
172F:  MOVF   2C,W
1730:  MOVWF  4C
1731:  GOTO   000
1732:  MOVF   7A,W
1733:  MOVWF  33
1734:  MOVF   79,W
1735:  MOVWF  32
1736:  MOVF   78,W
1737:  MOVWF  31
1738:  MOVF   77,W
1739:  MOVWF  30
....................             
....................            break;      
173A:  GOTO   73B
....................         } 
....................         lcd_gotoxy(1,1);//imprime el resultado 
173B:  MOVLW  01
173C:  MOVWF  5A
173D:  MOVWF  5B
173E:  BCF    0A.4
173F:  CALL   0A4
1740:  BSF    0A.4
....................         printf(lcd_putc, "Resultado ="); 
1741:  MOVLW  23
1742:  BSF    03.6
1743:  MOVWF  0D
1744:  MOVLW  00
1745:  MOVWF  0F
1746:  BCF    0A.4
1747:  BCF    03.6
1748:  CALL   111
1749:  BSF    0A.4
....................         lcd_gotoxy(1,2); 
174A:  MOVLW  01
174B:  MOVWF  5A
174C:  MOVLW  02
174D:  MOVWF  5B
174E:  BCF    0A.4
174F:  CALL   0A4
1750:  BSF    0A.4
....................         printf(lcd_putc, "%f",resultado); 
1751:  MOVLW  89
1752:  MOVWF  04
1753:  MOVF   33,W
1754:  MOVWF  4F
1755:  MOVF   32,W
1756:  MOVWF  4E
1757:  MOVF   31,W
1758:  MOVWF  4D
1759:  MOVF   30,W
175A:  MOVWF  4C
175B:  MOVLW  02
175C:  MOVWF  50
175D:  GOTO   2CD
....................         goto principio;//vuelve al principio       
175E:  GOTO   41F
....................       } 
....................        
....................       cont++;      
175F:  INCF   29,F
....................    } 
1760:  GOTO   41F
.................... } 
.................... int obtenerNumero(int a)//Funcion para que se obtenga el numero entero 
.................... { 
*
0D77:  MOVLW  01
0D78:  SUBWF  4C,W
0D79:  MOVWF  51
*
1761:  SLEEP
....................        int r,sum,num1,num; 
....................        int y=a-1; 
....................        for(x=0;x<a;x++) 
*
0D7A:  CLRF   28
0D7B:  MOVF   4C,W
0D7C:  SUBWF  28,W
0D7D:  BTFSC  03.0
0D7E:  GOTO   7C4
....................        { 
....................         r=vector[x]; 
0D7F:  MOVLW  38
0D80:  ADDWF  28,W
0D81:  MOVWF  04
0D82:  BCF    03.7
0D83:  MOVF   00,W
0D84:  MOVWF  4D
....................         sum =r*(pow(10,y)); 
0D85:  BSF    03.5
0D86:  CLRF   3D
0D87:  BCF    03.5
0D88:  MOVF   51,W
0D89:  BSF    03.5
0D8A:  MOVWF  3C
0D8B:  BCF    0A.3
0D8C:  BCF    03.5
0D8D:  CALL   1EE
0D8E:  BSF    0A.3
0D8F:  MOVF   77,W
0D90:  MOVWF  52
0D91:  MOVF   78,W
0D92:  MOVWF  53
0D93:  MOVF   79,W
0D94:  MOVWF  54
0D95:  MOVF   7A,W
0D96:  MOVWF  55
0D97:  CLRF   59
0D98:  CLRF   58
0D99:  MOVLW  20
0D9A:  MOVWF  57
0D9B:  MOVLW  82
0D9C:  MOVWF  56
0D9D:  MOVF   55,W
0D9E:  MOVWF  5D
0D9F:  MOVF   54,W
0DA0:  MOVWF  5C
0DA1:  MOVF   53,W
0DA2:  MOVWF  5B
0DA3:  MOVF   52,W
0DA4:  MOVWF  5A
*
0F81:  MOVF   77,W
0F82:  MOVWF  52
0F83:  MOVF   78,W
0F84:  MOVWF  53
0F85:  MOVF   79,W
0F86:  MOVWF  54
0F87:  MOVF   7A,W
0F88:  MOVWF  55
0F89:  BSF    03.5
0F8A:  CLRF   3D
0F8B:  BCF    03.5
0F8C:  MOVF   4D,W
0F8D:  BSF    03.5
0F8E:  MOVWF  3C
0F8F:  BCF    0A.3
0F90:  BCF    03.5
0F91:  CALL   1EE
0F92:  BSF    0A.3
0F93:  MOVF   7A,W
0F94:  BSF    03.5
0F95:  MOVWF  3F
0F96:  MOVF   79,W
0F97:  MOVWF  3E
0F98:  MOVF   78,W
0F99:  MOVWF  3D
0F9A:  MOVF   77,W
0F9B:  MOVWF  3C
0F9C:  BCF    03.5
0F9D:  MOVF   55,W
0F9E:  BSF    03.5
0F9F:  MOVWF  43
0FA0:  BCF    03.5
0FA1:  MOVF   54,W
0FA2:  BSF    03.5
0FA3:  MOVWF  42
0FA4:  BCF    03.5
0FA5:  MOVF   53,W
0FA6:  BSF    03.5
0FA7:  MOVWF  41
0FA8:  BCF    03.5
0FA9:  MOVF   52,W
0FAA:  BSF    03.5
0FAB:  MOVWF  40
0FAC:  BCF    0A.3
0FAD:  BCF    03.5
0FAE:  CALL   481
0FAF:  BSF    0A.3
0FB0:  MOVF   7A,W
0FB1:  BSF    03.5
0FB2:  MOVWF  3B
0FB3:  MOVF   79,W
0FB4:  MOVWF  3A
0FB5:  MOVF   78,W
0FB6:  MOVWF  39
0FB7:  MOVF   77,W
0FB8:  MOVWF  38
0FB9:  BCF    0A.3
0FBA:  BCF    03.5
0FBB:  CALL   31A
0FBC:  BSF    0A.3
0FBD:  MOVF   78,W
0FBE:  MOVWF  4E
....................         num1+=sum; 
0FBF:  MOVF   4E,W
0FC0:  ADDWF  4F,F
....................         y--; 
0FC1:  DECF   51,F
....................        } 
0FC2:  INCF   28,F
0FC3:  GOTO   57B
....................        if(num1>99) 
0FC4:  MOVF   4F,W
0FC5:  SUBLW  63
0FC6:  BTFSC  03.0
0FC7:  GOTO   7CC
....................        { 
....................         num=num1+1; 
0FC8:  MOVLW  01
0FC9:  ADDWF  4F,W
0FCA:  MOVWF  50
....................        } 
....................         else 
0FCB:  GOTO   7CE
....................        { 
....................         num=num1; 
0FCC:  MOVF   4F,W
0FCD:  MOVWF  50
....................        } 
....................        return num; 
0FCE:  MOVF   50,W
0FCF:  MOVWF  78
.................... } 
0FD0:  RETURN
....................  

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
