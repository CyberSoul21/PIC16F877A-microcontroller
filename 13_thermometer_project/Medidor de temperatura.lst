CCS PCM C Compiler, Version 4.104, 5967               09-Nov-11 11:22

               Filename: C:\Documents and Settings\Administrador\Escritorio\Proyecto Termometro\Medidor de temperatura.lst

               ROM used: 3482 words (43%)
                         Largest free fragment is 2048
               RAM used: 194 (53%) at main() level
                         237 (64%) worst case
               Stack:    6 worst case (4 in main + 2 for interrupts)

*
0000:  MOVLW  0D
0001:  MOVWF  0A
0002:  GOTO   524
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BSF    0A.3
002D:  BCF    0A.4
002E:  GOTO   000
.................... #include <16f877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device adc=8 //10 
.................... #use delay(clock=4000000) 
*
0362:  MOVLW  52
0363:  MOVWF  04
0364:  BSF    03.7
0365:  MOVF   00,W
0366:  BTFSC  03.2
0367:  GOTO   376
0368:  MOVLW  01
0369:  MOVWF  78
036A:  CLRF   77
036B:  DECFSZ 77,F
036C:  GOTO   36B
036D:  DECFSZ 78,F
036E:  GOTO   36A
036F:  MOVLW  4A
0370:  MOVWF  77
0371:  DECFSZ 77,F
0372:  GOTO   371
0373:  GOTO   374
0374:  DECFSZ 00,F
0375:  GOTO   368
0376:  RETURN
.................... #fuses xt,nowdt 
.................... #include <lcd3.c> 
.................... //////////////////////////////////////////////////////////////////////////////////// 
.................... //                           LCD.C                                // 
.................... //                FUNCIONES PARA GESTION DE DISPLAY LCD                     // 
.................... //         8BITS, FUENTE 5X7, 2,3,4 LINEAS X 16, 20 CARACTERES:                // 
.................... //       lcd_init() Debe ser invocada antes que las otras funciones.            // 
.................... //       lcd_putc(c) Visualiza c en la siguiente posición del display.            // 
.................... //                Caracteres especiales de control:                        // 
.................... //                      \f Borra display                              // 
.................... //                      \n Salta a la siguiente línea                    // 
.................... //                      \b Retrocede una posición.                        // 
.................... //       lcd_gotoxy(x,y) Selecciona una nueva posición de escritura en el display. // 
.................... //                  donde x es el caracter de 1 a 16 o 20 según Display,      // 
.................... //                  donde y   es el número de la línea de 1 a 4                 // 
.................... //                   (la esquina superior izquierda es 1,1)                  // 
.................... //       lcd_getc(x,y) Devuelve el caracter de la posición x,y del display.          // 
.................... //      NOTA: Para emplear display de N*16 o N*20 Carácteres Por Línea            // 
.................... //       poner los valores correspondientes en lcd (quitar los comentarios abajo)  // 
.................... //      PINES DE CONTROL RA0(rs(pin4)),RA1(rw(pin5)),RA3(en(pin6))              // 
.................... //      PINES DE DATOS DE RB0(db0(pin7)) A RB7(db7(pin14))                    // 
.................... //                  MODIF.: ING. FRANK GIRALDO - UD                       // 
.................... //////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... //--------------------------------------------------------------------------------// 
.................... #bit lcd_enable = 9.2 
.................... #bit lcd_rw = 9.1 
.................... #bit lcd_rs = 9.0 
.................... #byte lcd_b = 6 //portb 
.................... int line; 
.................... // 
.................... //CONFIGURACION LCD 4*16 LINEAS 
.................... //#define LCD_LINEA1 0x80   // Direccion de memoria para la primera linea 
.................... //#define LCD_LINEA2 0x40   // Direccion de memoria para la segunda linea 
.................... //#define LCD_LINEA3 0x10   // Direccion de memoria para la tercera linea 
.................... //#define LCD_LINEA4 0x50   // Direccion de memoria para la cuarta linea 
.................... // 
.................... // 
.................... //CONFIGURACION LCD 4*20 LINEAS 
.................... #define LCD_LINEA1 0x80 // Direccion de memoria para la primera linea 
.................... #define LCD_LINEA2 0x40 // Direccion de memoria para la segunda linea 
.................... #define LCD_LINEA3 0x14 // Direccion de memoria para la tercera linea 
.................... #define LCD_LINEA4 0x54 // Direccion de memoria para la cuarta linea 
.................... // 
.................... // 
.................... #define LCD_DATO 1 
.................... #define LCD_COMANDO 0 
.................... #define LCD_CLEAR 0x01 
.................... #define LCD_HOME 0x02 
.................... #define LCD_DISPLAY_OFF 0x08 
.................... #define LCD_DISPLAY_ON 0x0C 
.................... #define LCD_CURSOR_ON 0x0E 
.................... #define LCD_CURSOR_OFF 0x0C 
.................... #define LCD_CURSOR_BLINK 0x0F 
.................... #define LCD_INC 0x06 
.................... #define LCD_DEC 0x04 
.................... #define LCD_CURSOR_SHIFT_LEFT 0x10 
.................... #define LCD_CURSOR_SHIFT_RIGHT 0x14 
.................... #define LCD_DISPLAY_SHIFT_RIGHT 0x1C 
.................... #define LCD_DISPLAY_SHIFT_LEFT 0x18 
.................... #define LCDCGRAM 0x40 
.................... // 
.................... int lcd_leer() 
.................... { 
.................... int valor; 
.................... set_tris_e(0xF8); 
*
037F:  BSF    03.5
0380:  BCF    09.0
0381:  BCF    09.1
0382:  BCF    09.2
.................... set_tris_b(0xFF); 
0383:  MOVLW  FF
0384:  MOVWF  06
....................  
.................... lcd_rw = 1; 
0385:  BCF    03.5
0386:  BSF    09.1
.................... delay_cycles(1); 
0387:  NOP
.................... lcd_enable = 1; 
0388:  BSF    09.2
.................... delay_cycles(1); 
0389:  NOP
.................... valor = lcd_b; 
038A:  MOVF   06,W
038B:  BSF    03.6
038C:  MOVWF  58
.................... lcd_enable = 0; 
038D:  BCF    03.6
038E:  BCF    09.2
.................... delay_us(40); 
038F:  MOVLW  0D
0390:  MOVWF  77
0391:  DECFSZ 77,F
0392:  GOTO   391
....................  
.................... set_tris_b(0x00); 
0393:  MOVLW  00
0394:  BSF    03.5
0395:  MOVWF  06
.................... return valor; 
0396:  BCF    03.5
0397:  BSF    03.6
0398:  MOVF   58,W
0399:  MOVWF  78
.................... } 
.................... // 
.................... void lcd_size(int ln, int ch){ 
....................  
.................... } 
.................... // 
.................... void lcd_enviar(int dir, int valor){ 
.................... set_tris_e(0xF8); 
*
0377:  BSF    03.5
0378:  BCF    09.0
0379:  BCF    09.1
037A:  BCF    09.2
.................... set_tris_b(0x00); 
037B:  MOVLW  00
037C:  MOVWF  06
....................  
.................... lcd_rs = 0; 
037D:  BCF    03.5
037E:  BCF    09.0
.................... while( bit_test(lcd_leer(),7) ); 
*
039A:  MOVF   78,W
039B:  MOVWF  58
039C:  BTFSS  58.7
039D:  GOTO   3A0
039E:  BCF    03.6
039F:  GOTO   37F
.................... lcd_rs = dir; 
03A0:  BTFSC  56.0
03A1:  GOTO   3A5
03A2:  BCF    03.6
03A3:  BCF    09.0
03A4:  BSF    03.6
03A5:  BTFSS  56.0
03A6:  GOTO   3AA
03A7:  BCF    03.6
03A8:  BSF    09.0
03A9:  BSF    03.6
.................... delay_cycles(1); 
03AA:  NOP
.................... lcd_rw = 0; 
03AB:  BCF    03.6
03AC:  BCF    09.1
.................... delay_cycles(1); 
03AD:  NOP
.................... lcd_enable = 0; 
03AE:  BCF    09.2
.................... lcd_b = valor; 
03AF:  BSF    03.6
03B0:  MOVF   57,W
03B1:  BCF    03.6
03B2:  MOVWF  06
.................... delay_cycles(1); 
03B3:  NOP
.................... lcd_enable = 1; 
03B4:  BSF    09.2
.................... delay_us(2); 
03B5:  GOTO   3B6
.................... lcd_enable = 0; 
03B6:  BCF    09.2
.................... delay_us(40); 
03B7:  MOVLW  0D
03B8:  MOVWF  77
03B9:  DECFSZ 77,F
03BA:  GOTO   3B9
.................... } 
03BB:  RETURN
.................... // 
.................... void lcd_init() 
.................... { 
.................... int i; 
.................... set_tris_e(0xF8); 
03BC:  BSF    03.5
03BD:  BCF    09.0
03BE:  BCF    09.1
03BF:  BCF    09.2
.................... set_tris_b(0x00); 
03C0:  MOVLW  00
03C1:  MOVWF  06
....................  
.................... lcd_enable = 0; 
03C2:  BCF    03.5
03C3:  BCF    09.2
.................... lcd_rw = 0; 
03C4:  BCF    09.1
.................... lcd_rs = 0; 
03C5:  BCF    09.0
.................... delay_ms(15); 
03C6:  MOVLW  0F
03C7:  BSF    03.6
03C8:  MOVWF  52
03C9:  BCF    03.6
03CA:  CALL   362
....................  
.................... for(i=0; i<3; i++) 
03CB:  BSF    03.6
03CC:  CLRF   44
03CD:  MOVF   44,W
03CE:  SUBLW  02
03CF:  BTFSS  03.0
03D0:  GOTO   3DE
.................... { 
.................... lcd_enviar(LCD_COMANDO,0x38); 
03D1:  CLRF   56
03D2:  MOVLW  38
03D3:  MOVWF  57
03D4:  BCF    03.6
03D5:  CALL   377
.................... delay_ms(5); 
03D6:  MOVLW  05
03D7:  BSF    03.6
03D8:  MOVWF  52
03D9:  BCF    03.6
03DA:  CALL   362
.................... } 
03DB:  BSF    03.6
03DC:  INCF   44,F
03DD:  GOTO   3CD
.................... lcd_enviar(LCD_COMANDO,LCD_DISPLAY_ON); 
03DE:  CLRF   56
03DF:  MOVLW  0C
03E0:  MOVWF  57
03E1:  BCF    03.6
03E2:  CALL   377
.................... lcd_enviar(LCD_COMANDO,0x06); 
03E3:  BSF    03.6
03E4:  CLRF   56
03E5:  MOVLW  06
03E6:  MOVWF  57
03E7:  BCF    03.6
03E8:  CALL   377
.................... lcd_enviar(LCD_COMANDO,LCD_CLEAR); 
03E9:  BSF    03.6
03EA:  CLRF   56
03EB:  MOVLW  01
03EC:  MOVWF  57
03ED:  BCF    03.6
03EE:  CALL   377
.................... lcd_enviar(LCD_COMANDO,LCD_HOME); 
03EF:  BSF    03.6
03F0:  CLRF   56
03F1:  MOVLW  02
03F2:  MOVWF  57
03F3:  BCF    03.6
03F4:  CALL   377
.................... line=0; 
03F5:  CLRF   28
.................... } 
03F6:  BSF    0A.3
03F7:  BCF    0A.4
03F8:  GOTO   53D (RETURN)
.................... // 
.................... void lcd_gotoxy( byte x, byte y) { 
.................... byte dir; 
.................... dir=0; 
03F9:  BSF    03.6
03FA:  CLRF   54
.................... line=y; 
03FB:  MOVF   53,W
03FC:  BCF    03.6
03FD:  MOVWF  28
.................... if(x==0) 
03FE:  BSF    03.6
03FF:  MOVF   52,F
0400:  BTFSS  03.2
0401:  GOTO   405
....................    x=1; 
0402:  MOVLW  01
0403:  MOVWF  52
.................... else{ 
0404:  GOTO   405
.................... } 
.................... if(y!=0){ 
0405:  MOVF   53,F
0406:  BTFSC  03.2
0407:  GOTO   42D
....................       if(y==1){ 
0408:  DECFSZ 53,W
0409:  GOTO   410
....................       dir=LCD_LINEA1; 
040A:  MOVLW  80
040B:  MOVWF  54
....................       dir+=x-1; 
040C:  MOVLW  01
040D:  SUBWF  52,W
040E:  ADDWF  54,F
....................             } 
....................       else{   if(y==2){ 
040F:  GOTO   42D
0410:  MOVF   53,W
0411:  SUBLW  02
0412:  BTFSS  03.2
0413:  GOTO   41A
....................             dir=LCD_LINEA2; 
0414:  MOVLW  40
0415:  MOVWF  54
....................             dir+=x-1; 
0416:  MOVLW  01
0417:  SUBWF  52,W
0418:  ADDWF  54,F
....................                   } 
....................                    else{   if(y==3){ 
0419:  GOTO   42D
041A:  MOVF   53,W
041B:  SUBLW  03
041C:  BTFSS  03.2
041D:  GOTO   424
....................                         dir=LCD_LINEA3; 
041E:  MOVLW  14
041F:  MOVWF  54
....................                         dir+=x-1; 
0420:  MOVLW  01
0421:  SUBWF  52,W
0422:  ADDWF  54,F
....................                               } 
....................                         else{   if(y==4){ 
0423:  GOTO   42D
0424:  MOVF   53,W
0425:  SUBLW  04
0426:  BTFSS  03.2
0427:  GOTO   42D
....................                               dir=LCD_LINEA4; 
0428:  MOVLW  54
0429:  MOVWF  54
....................                               dir+=x-1; 
042A:  MOVLW  01
042B:  SUBWF  52,W
042C:  ADDWF  54,F
....................                                     } 
....................                            } 
....................                      } 
....................          } 
....................       } 
.................... lcd_enviar(LCD_COMANDO,0x80|dir); 
042D:  MOVF   54,W
042E:  IORLW  80
042F:  MOVWF  55
0430:  CLRF   56
0431:  MOVF   55,W
0432:  MOVWF  57
0433:  BCF    03.6
0434:  CALL   377
.................... } 
0435:  RETURN
.................... // 
.................... void lcd_putc( char c) { 
.................... switch (c) { 
0436:  BSF    03.6
0437:  MOVF   51,W
0438:  XORLW  0C
0439:  BCF    03.6
043A:  BTFSC  03.2
043B:  GOTO   443
043C:  XORLW  06
043D:  BTFSC  03.2
043E:  GOTO   44F
043F:  XORLW  02
0440:  BTFSC  03.2
0441:  GOTO   46A
0442:  GOTO   471
.................... case '\f' : lcd_enviar(LCD_COMANDO,0x01); 
0443:  BSF    03.6
0444:  CLRF   56
0445:  MOVLW  01
0446:  MOVWF  57
0447:  BCF    03.6
0448:  CALL   377
....................          delay_ms(2); 
0449:  MOVLW  02
044A:  BSF    03.6
044B:  MOVWF  52
044C:  BCF    03.6
044D:  CALL   362
....................          break; 
044E:  GOTO   479
.................... case '\n' : ++line; 
044F:  INCF   28,F
....................          if(line>=1 || line<=4) 
0450:  MOVF   28,W
0451:  SUBLW  00
0452:  BTFSS  03.0
0453:  GOTO   458
0454:  MOVF   28,W
0455:  SUBLW  04
0456:  BTFSS  03.0
0457:  GOTO   462
....................             lcd_gotoxy(1,line); 
0458:  MOVLW  01
0459:  BSF    03.6
045A:  MOVWF  52
045B:  BCF    03.6
045C:  MOVF   28,W
045D:  BSF    03.6
045E:  MOVWF  53
045F:  BCF    03.6
0460:  CALL   3F9
....................          else{ 
0461:  GOTO   469
....................             line=0; 
0462:  CLRF   28
....................             lcd_gotoxy(1,1); 
0463:  MOVLW  01
0464:  BSF    03.6
0465:  MOVWF  52
0466:  MOVWF  53
0467:  BCF    03.6
0468:  CALL   3F9
....................             } 
....................          break; 
0469:  GOTO   479
.................... case '\b' : lcd_enviar(LCD_COMANDO,0x10); 
046A:  BSF    03.6
046B:  CLRF   56
046C:  MOVLW  10
046D:  MOVWF  57
046E:  BCF    03.6
046F:  CALL   377
....................          break; 
0470:  GOTO   479
.................... default :   lcd_enviar(LCD_DATO,c); 
0471:  MOVLW  01
0472:  BSF    03.6
0473:  MOVWF  56
0474:  MOVF   51,W
0475:  MOVWF  57
0476:  BCF    03.6
0477:  CALL   377
....................          break; 
0478:  GOTO   479
.................... } 
.................... } 
0479:  RETURN
.................... // 
.................... char lcd_getc( int x, int y) { 
.................... char valor; 
.................... lcd_gotoxy(x,y); 
....................  
.................... lcd_rs = 1; 
.................... valor = lcd_leer(); 
.................... lcd_rs = 0; 
.................... return valor; 
.................... } 
....................  
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... int16 value,t=0,t2=0,r=0,k=0,i,i2; //int16 para guardar resultado de 10bits 
.................... int p=0; 
.................... float volt,c,ac,max,min,prom,max2,min2,prom2,maximo,minimo,promedio,a; 
.................... float vector[15]; 
.................... float vector2[13]; 
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................  if(t==40)//Cada 2 segundos toma muestra 
*
0800:  MOVF   2B,W
0801:  SUBLW  28
0802:  BTFSS  03.2
0803:  GOTO   0A1
0804:  MOVF   2C,F
0805:  BTFSS  03.2
0806:  GOTO   0A1
....................   { 
....................    output_toggle(pin_d4); 
0807:  BSF    03.5
0808:  BCF    08.4
0809:  MOVLW  10
080A:  BCF    03.5
080B:  XORWF  08,F
....................    value=read_adc(); 
080C:  BSF    1F.2
080D:  BTFSC  1F.2
080E:  GOTO   00D
080F:  MOVF   1E,W
0810:  CLRF   2A
0811:  MOVWF  29
....................    volt=value*0.0196; 
0812:  MOVF   2A,W
0813:  BSF    03.6
0814:  MOVWF  5F
0815:  BCF    03.6
0816:  MOVF   29,W
0817:  BSF    03.6
0818:  MOVWF  5E
0819:  BCF    0A.3
081A:  BCF    03.6
081B:  CALL   02F
081C:  BSF    0A.3
081D:  MOVF   7A,W
081E:  BSF    03.6
081F:  MOVWF  61
0820:  MOVF   79,W
0821:  MOVWF  60
0822:  MOVF   78,W
0823:  MOVWF  5F
0824:  MOVF   77,W
0825:  MOVWF  5E
0826:  MOVLW  2E
0827:  MOVWF  65
0828:  MOVLW  90
0829:  MOVWF  64
082A:  MOVLW  20
082B:  MOVWF  63
082C:  MOVLW  79
082D:  MOVWF  62
082E:  BCF    0A.3
082F:  BCF    03.6
0830:  CALL   04E
0831:  BSF    0A.3
0832:  MOVF   7A,W
0833:  MOVWF  3B
0834:  MOVF   79,W
0835:  MOVWF  3A
0836:  MOVF   78,W
0837:  MOVWF  39
0838:  MOVF   77,W
0839:  MOVWF  38
....................    c = volt*100; 
083A:  MOVF   3B,W
083B:  BSF    03.6
083C:  MOVWF  61
083D:  BCF    03.6
083E:  MOVF   3A,W
083F:  BSF    03.6
0840:  MOVWF  60
0841:  BCF    03.6
0842:  MOVF   39,W
0843:  BSF    03.6
0844:  MOVWF  5F
0845:  BCF    03.6
0846:  MOVF   38,W
0847:  BSF    03.6
0848:  MOVWF  5E
0849:  CLRF   65
084A:  CLRF   64
084B:  MOVLW  48
084C:  MOVWF  63
084D:  MOVLW  85
084E:  MOVWF  62
084F:  BCF    0A.3
0850:  BCF    03.6
0851:  CALL   04E
0852:  BSF    0A.3
0853:  MOVF   7A,W
0854:  MOVWF  3F
0855:  MOVF   79,W
0856:  MOVWF  3E
0857:  MOVF   78,W
0858:  MOVWF  3D
0859:  MOVF   77,W
085A:  MOVWF  3C
....................    if(r<=15) 
085B:  MOVF   30,F
085C:  BTFSS  03.2
085D:  GOTO   07B
085E:  MOVF   2F,W
085F:  SUBLW  0F
0860:  BTFSS  03.0
0861:  GOTO   07B
....................    { 
....................    vector[r]=c; 
0862:  RLF    2F,W
0863:  MOVWF  79
0864:  RLF    30,W
0865:  MOVWF  7A
0866:  RLF    79,F
0867:  RLF    7A,F
0868:  MOVLW  FC
0869:  ANDWF  79,F
086A:  MOVF   79,W
086B:  ADDLW  A0
086C:  MOVWF  04
086D:  BCF    03.7
086E:  BTFSC  7A.0
086F:  BSF    03.7
0870:  MOVF   3C,W
0871:  MOVWF  00
0872:  INCF   04,F
0873:  MOVF   3D,W
0874:  MOVWF  00
0875:  INCF   04,F
0876:  MOVF   3E,W
0877:  MOVWF  00
0878:  INCF   04,F
0879:  MOVF   3F,W
087A:  MOVWF  00
....................    } 
....................    if(r>15){ 
087B:  MOVF   30,F
087C:  BTFSS  03.2
087D:  GOTO   082
087E:  MOVF   2F,W
087F:  SUBLW  0F
0880:  BTFSC  03.0
0881:  GOTO   09C
....................      
....................     vector2[k]=c; 
0882:  RLF    31,W
0883:  MOVWF  79
0884:  RLF    32,W
0885:  MOVWF  7A
0886:  RLF    79,F
0887:  RLF    7A,F
0888:  MOVLW  FC
0889:  ANDWF  79,F
088A:  MOVF   79,W
088B:  ADDLW  10
088C:  MOVWF  04
088D:  BSF    03.7
088E:  MOVF   3C,W
088F:  MOVWF  00
0890:  INCF   04,F
0891:  MOVF   3D,W
0892:  MOVWF  00
0893:  INCF   04,F
0894:  MOVF   3E,W
0895:  MOVWF  00
0896:  INCF   04,F
0897:  MOVF   3F,W
0898:  MOVWF  00
....................     k++; 
0899:  INCF   31,F
089A:  BTFSC  03.2
089B:  INCF   32,F
....................    } 
....................     
....................     
....................    r++; 
089C:  INCF   2F,F
089D:  BTFSC  03.2
089E:  INCF   30,F
....................    t=0; 
089F:  CLRF   2C
08A0:  CLRF   2B
....................   } 
....................   if(t2==1200)//Cuando pase el minuto 
08A1:  MOVF   2D,W
08A2:  SUBLW  B0
08A3:  BTFSS  03.2
08A4:  GOTO   518
08A5:  MOVF   2E,W
08A6:  SUBLW  04
08A7:  BTFSS  03.2
08A8:  GOTO   518
....................   { 
....................        max = vector[0]; 
08A9:  BSF    03.5
08AA:  MOVF   23,W
08AB:  BCF    03.5
08AC:  MOVWF  47
08AD:  BSF    03.5
08AE:  MOVF   22,W
08AF:  BCF    03.5
08B0:  MOVWF  46
08B1:  BSF    03.5
08B2:  MOVF   21,W
08B3:  BCF    03.5
08B4:  MOVWF  45
08B5:  BSF    03.5
08B6:  MOVF   20,W
08B7:  BCF    03.5
08B8:  MOVWF  44
....................        for (i = 0; i < 15; i++) 
08B9:  CLRF   34
08BA:  CLRF   33
08BB:  MOVF   34,F
08BC:  BTFSS  03.2
08BD:  GOTO   11C
08BE:  MOVF   33,W
08BF:  SUBLW  0E
08C0:  BTFSS  03.0
08C1:  GOTO   11C
....................        { 
....................         if (max < vector[i]) 
08C2:  RLF    33,W
08C3:  MOVWF  79
08C4:  RLF    34,W
08C5:  MOVWF  7A
08C6:  RLF    79,F
08C7:  RLF    7A,F
08C8:  MOVLW  FC
08C9:  ANDWF  79,F
08CA:  MOVF   79,W
08CB:  ADDLW  A0
08CC:  MOVWF  04
08CD:  BCF    03.7
08CE:  BTFSC  7A.0
08CF:  BSF    03.7
08D0:  MOVF   00,W
08D1:  MOVWF  77
08D2:  INCF   04,F
08D3:  MOVF   00,W
08D4:  MOVWF  78
08D5:  INCF   04,F
08D6:  MOVF   00,W
08D7:  MOVWF  79
08D8:  INCF   04,F
08D9:  MOVF   00,W
08DA:  MOVWF  7A
08DB:  MOVF   47,W
08DC:  BSF    03.6
08DD:  MOVWF  61
08DE:  BCF    03.6
08DF:  MOVF   46,W
08E0:  BSF    03.6
08E1:  MOVWF  60
08E2:  BCF    03.6
08E3:  MOVF   45,W
08E4:  BSF    03.6
08E5:  MOVWF  5F
08E6:  BCF    03.6
08E7:  MOVF   44,W
08E8:  BSF    03.6
08E9:  MOVWF  5E
08EA:  MOVF   7A,W
08EB:  MOVWF  65
08EC:  MOVF   79,W
08ED:  MOVWF  64
08EE:  MOVF   78,W
08EF:  MOVWF  63
08F0:  MOVF   77,W
08F1:  MOVWF  62
08F2:  BCF    0A.3
08F3:  BCF    03.6
08F4:  CALL   0C5
08F5:  BSF    0A.3
08F6:  BTFSS  03.0
08F7:  GOTO   118
....................         { 
....................           max = vector[i];       
08F8:  RLF    33,W
08F9:  MOVWF  79
08FA:  RLF    34,W
08FB:  MOVWF  7A
08FC:  RLF    79,F
08FD:  RLF    7A,F
08FE:  MOVLW  FC
08FF:  ANDWF  79,F
0900:  MOVF   79,W
0901:  ADDLW  A0
0902:  MOVWF  04
0903:  BCF    03.7
0904:  BTFSC  7A.0
0905:  BSF    03.7
0906:  MOVF   00,W
0907:  MOVWF  77
0908:  INCF   04,F
0909:  MOVF   00,W
090A:  MOVWF  78
090B:  INCF   04,F
090C:  MOVF   00,W
090D:  MOVWF  79
090E:  INCF   04,F
090F:  MOVF   00,W
0910:  MOVWF  7A
0911:  MOVWF  47
0912:  MOVF   79,W
0913:  MOVWF  46
0914:  MOVF   78,W
0915:  MOVWF  45
0916:  MOVF   77,W
0917:  MOVWF  44
....................         } 
....................        } 
0918:  INCF   33,F
0919:  BTFSC  03.2
091A:  INCF   34,F
091B:  GOTO   0BB
....................        min = vector[0]; 
091C:  BSF    03.5
091D:  MOVF   23,W
091E:  BCF    03.5
091F:  MOVWF  4B
0920:  BSF    03.5
0921:  MOVF   22,W
0922:  BCF    03.5
0923:  MOVWF  4A
0924:  BSF    03.5
0925:  MOVF   21,W
0926:  BCF    03.5
0927:  MOVWF  49
0928:  BSF    03.5
0929:  MOVF   20,W
092A:  BCF    03.5
092B:  MOVWF  48
....................        for (i = 0; i < 15; i++) 
092C:  CLRF   34
092D:  CLRF   33
092E:  MOVF   34,F
092F:  BTFSS  03.2
0930:  GOTO   190
0931:  MOVF   33,W
0932:  SUBLW  0E
0933:  BTFSS  03.0
0934:  GOTO   190
....................        { 
....................         if (min > vector[i]) 
0935:  RLF    33,W
0936:  MOVWF  79
0937:  RLF    34,W
0938:  MOVWF  7A
0939:  RLF    79,F
093A:  RLF    7A,F
093B:  MOVLW  FC
093C:  ANDWF  79,F
093D:  MOVF   79,W
093E:  ADDLW  A0
093F:  MOVWF  04
0940:  BCF    03.7
0941:  BTFSC  7A.0
0942:  BSF    03.7
0943:  MOVF   00,W
0944:  MOVWF  77
0945:  INCF   04,F
0946:  MOVF   00,W
0947:  MOVWF  78
0948:  INCF   04,F
0949:  MOVF   00,W
094A:  MOVWF  79
094B:  INCF   04,F
094C:  MOVF   00,W
094D:  MOVWF  7A
094E:  BSF    03.6
094F:  MOVWF  61
0950:  MOVF   79,W
0951:  MOVWF  60
0952:  MOVF   78,W
0953:  MOVWF  5F
0954:  MOVF   77,W
0955:  MOVWF  5E
0956:  BCF    03.6
0957:  MOVF   4B,W
0958:  BSF    03.6
0959:  MOVWF  65
095A:  BCF    03.6
095B:  MOVF   4A,W
095C:  BSF    03.6
095D:  MOVWF  64
095E:  BCF    03.6
095F:  MOVF   49,W
0960:  BSF    03.6
0961:  MOVWF  63
0962:  BCF    03.6
0963:  MOVF   48,W
0964:  BSF    03.6
0965:  MOVWF  62
0966:  BCF    0A.3
0967:  BCF    03.6
0968:  CALL   0C5
0969:  BSF    0A.3
096A:  BTFSS  03.0
096B:  GOTO   18C
....................         { 
....................           min = vector[i];      
096C:  RLF    33,W
096D:  MOVWF  79
096E:  RLF    34,W
096F:  MOVWF  7A
0970:  RLF    79,F
0971:  RLF    7A,F
0972:  MOVLW  FC
0973:  ANDWF  79,F
0974:  MOVF   79,W
0975:  ADDLW  A0
0976:  MOVWF  04
0977:  BCF    03.7
0978:  BTFSC  7A.0
0979:  BSF    03.7
097A:  MOVF   00,W
097B:  MOVWF  77
097C:  INCF   04,F
097D:  MOVF   00,W
097E:  MOVWF  78
097F:  INCF   04,F
0980:  MOVF   00,W
0981:  MOVWF  79
0982:  INCF   04,F
0983:  MOVF   00,W
0984:  MOVWF  7A
0985:  MOVWF  4B
0986:  MOVF   79,W
0987:  MOVWF  4A
0988:  MOVF   78,W
0989:  MOVWF  49
098A:  MOVF   77,W
098B:  MOVWF  48
....................         } 
....................        } 
098C:  INCF   33,F
098D:  BTFSC  03.2
098E:  INCF   34,F
098F:  GOTO   12E
....................        prom=0; 
0990:  CLRF   4F
0991:  CLRF   4E
0992:  CLRF   4D
0993:  CLRF   4C
....................        for (i = 0; i < 15; i++) 
0994:  CLRF   34
0995:  CLRF   33
0996:  MOVF   34,F
0997:  BTFSS  03.2
0998:  GOTO   1ED
0999:  MOVF   33,W
099A:  SUBLW  0E
099B:  BTFSS  03.0
099C:  GOTO   1ED
....................        {        
....................         prom += vector[i]; 
099D:  RLF    33,W
099E:  MOVWF  79
099F:  RLF    34,W
09A0:  MOVWF  7A
09A1:  RLF    79,F
09A2:  RLF    7A,F
09A3:  MOVLW  FC
09A4:  ANDWF  79,F
09A5:  MOVF   79,W
09A6:  ADDLW  A0
09A7:  MOVWF  04
09A8:  BCF    03.7
09A9:  BTFSC  7A.0
09AA:  BSF    03.7
09AB:  MOVF   00,W
09AC:  MOVWF  77
09AD:  INCF   04,F
09AE:  MOVF   00,W
09AF:  MOVWF  78
09B0:  INCF   04,F
09B1:  MOVF   00,W
09B2:  MOVWF  79
09B3:  INCF   04,F
09B4:  MOVF   00,W
09B5:  MOVWF  7A
09B6:  BSF    03.6
09B7:  CLRF   5F
09B8:  MOVF   04,W
09B9:  MOVWF  5E
09BA:  BCF    5F.0
09BB:  BTFSC  03.7
09BC:  BSF    5F.0
09BD:  BCF    03.1
09BE:  BCF    03.6
09BF:  MOVF   4F,W
09C0:  BSF    03.6
09C1:  MOVWF  63
09C2:  BCF    03.6
09C3:  MOVF   4E,W
09C4:  BSF    03.6
09C5:  MOVWF  62
09C6:  BCF    03.6
09C7:  MOVF   4D,W
09C8:  BSF    03.6
09C9:  MOVWF  61
09CA:  BCF    03.6
09CB:  MOVF   4C,W
09CC:  BSF    03.6
09CD:  MOVWF  60
09CE:  MOVF   7A,W
09CF:  MOVWF  67
09D0:  MOVF   79,W
09D1:  MOVWF  66
09D2:  MOVF   78,W
09D3:  MOVWF  65
09D4:  MOVF   77,W
09D5:  MOVWF  64
09D6:  BCF    0A.3
09D7:  BCF    03.6
09D8:  CALL   106
09D9:  BSF    0A.3
09DA:  BSF    03.6
09DB:  MOVF   5E,W
09DC:  MOVWF  04
09DD:  BCF    03.7
09DE:  BTFSC  5F.0
09DF:  BSF    03.7
09E0:  MOVF   7A,W
09E1:  BCF    03.6
09E2:  MOVWF  4F
09E3:  MOVF   79,W
09E4:  MOVWF  4E
09E5:  MOVF   78,W
09E6:  MOVWF  4D
09E7:  MOVF   77,W
09E8:  MOVWF  4C
....................          
....................        }prom =(prom)/15; 
09E9:  INCF   33,F
09EA:  BTFSC  03.2
09EB:  INCF   34,F
09EC:  GOTO   196
09ED:  MOVF   4F,W
09EE:  BSF    03.6
09EF:  MOVWF  65
09F0:  BCF    03.6
09F1:  MOVF   4E,W
09F2:  BSF    03.6
09F3:  MOVWF  64
09F4:  BCF    03.6
09F5:  MOVF   4D,W
09F6:  BSF    03.6
09F7:  MOVWF  63
09F8:  BCF    03.6
09F9:  MOVF   4C,W
09FA:  BSF    03.6
09FB:  MOVWF  62
09FC:  CLRF   69
09FD:  CLRF   68
09FE:  MOVLW  70
09FF:  MOVWF  67
0A00:  MOVLW  82
0A01:  MOVWF  66
0A02:  BCF    0A.3
0A03:  BCF    03.6
0A04:  CALL   24C
0A05:  BSF    0A.3
0A06:  MOVF   7A,W
0A07:  MOVWF  4F
0A08:  MOVF   79,W
0A09:  MOVWF  4E
0A0A:  MOVF   78,W
0A0B:  MOVWF  4D
0A0C:  MOVF   77,W
0A0D:  MOVWF  4C
....................        max2 = vector2[0]; 
0A0E:  BSF    03.6
0A0F:  MOVF   13,W
0A10:  BCF    03.6
0A11:  MOVWF  53
0A12:  BSF    03.6
0A13:  MOVF   12,W
0A14:  BCF    03.6
0A15:  MOVWF  52
0A16:  BSF    03.6
0A17:  MOVF   11,W
0A18:  BCF    03.6
0A19:  MOVWF  51
0A1A:  BSF    03.6
0A1B:  MOVF   10,W
0A1C:  BCF    03.6
0A1D:  MOVWF  50
....................        for (i2 = 0; i2 < 13; i2++) 
0A1E:  CLRF   36
0A1F:  CLRF   35
0A20:  MOVF   36,F
0A21:  BTFSS  03.2
0A22:  GOTO   27D
0A23:  MOVF   35,W
0A24:  SUBLW  0C
0A25:  BTFSS  03.0
0A26:  GOTO   27D
....................        { 
....................         if (max2 < vector2[i2]) 
0A27:  RLF    35,W
0A28:  MOVWF  79
0A29:  RLF    36,W
0A2A:  MOVWF  7A
0A2B:  RLF    79,F
0A2C:  RLF    7A,F
0A2D:  MOVLW  FC
0A2E:  ANDWF  79,F
0A2F:  MOVF   79,W
0A30:  ADDLW  10
0A31:  MOVWF  04
0A32:  BSF    03.7
0A33:  MOVF   00,W
0A34:  MOVWF  77
0A35:  INCF   04,F
0A36:  MOVF   00,W
0A37:  MOVWF  78
0A38:  INCF   04,F
0A39:  MOVF   00,W
0A3A:  MOVWF  79
0A3B:  INCF   04,F
0A3C:  MOVF   00,W
0A3D:  MOVWF  7A
0A3E:  MOVF   53,W
0A3F:  BSF    03.6
0A40:  MOVWF  61
0A41:  BCF    03.6
0A42:  MOVF   52,W
0A43:  BSF    03.6
0A44:  MOVWF  60
0A45:  BCF    03.6
0A46:  MOVF   51,W
0A47:  BSF    03.6
0A48:  MOVWF  5F
0A49:  BCF    03.6
0A4A:  MOVF   50,W
0A4B:  BSF    03.6
0A4C:  MOVWF  5E
0A4D:  MOVF   7A,W
0A4E:  MOVWF  65
0A4F:  MOVF   79,W
0A50:  MOVWF  64
0A51:  MOVF   78,W
0A52:  MOVWF  63
0A53:  MOVF   77,W
0A54:  MOVWF  62
0A55:  BCF    0A.3
0A56:  BCF    03.6
0A57:  CALL   0C5
0A58:  BSF    0A.3
0A59:  BTFSS  03.0
0A5A:  GOTO   279
....................         { 
....................           max = vector2[i2];       
0A5B:  RLF    35,W
0A5C:  MOVWF  79
0A5D:  RLF    36,W
0A5E:  MOVWF  7A
0A5F:  RLF    79,F
0A60:  RLF    7A,F
0A61:  MOVLW  FC
0A62:  ANDWF  79,F
0A63:  MOVF   79,W
0A64:  ADDLW  10
0A65:  MOVWF  04
0A66:  BSF    03.7
0A67:  MOVF   00,W
0A68:  MOVWF  77
0A69:  INCF   04,F
0A6A:  MOVF   00,W
0A6B:  MOVWF  78
0A6C:  INCF   04,F
0A6D:  MOVF   00,W
0A6E:  MOVWF  79
0A6F:  INCF   04,F
0A70:  MOVF   00,W
0A71:  MOVWF  7A
0A72:  MOVWF  47
0A73:  MOVF   79,W
0A74:  MOVWF  46
0A75:  MOVF   78,W
0A76:  MOVWF  45
0A77:  MOVF   77,W
0A78:  MOVWF  44
....................         } 
....................        } 
0A79:  INCF   35,F
0A7A:  BTFSC  03.2
0A7B:  INCF   36,F
0A7C:  GOTO   220
....................        min2 = vector2[0]; 
0A7D:  BSF    03.6
0A7E:  MOVF   13,W
0A7F:  BCF    03.6
0A80:  MOVWF  57
0A81:  BSF    03.6
0A82:  MOVF   12,W
0A83:  BCF    03.6
0A84:  MOVWF  56
0A85:  BSF    03.6
0A86:  MOVF   11,W
0A87:  BCF    03.6
0A88:  MOVWF  55
0A89:  BSF    03.6
0A8A:  MOVF   10,W
0A8B:  BCF    03.6
0A8C:  MOVWF  54
....................        for (i2 = 0; i2 < 13; i2++) 
0A8D:  CLRF   36
0A8E:  CLRF   35
0A8F:  MOVF   36,F
0A90:  BTFSS  03.2
0A91:  GOTO   2ED
0A92:  MOVF   35,W
0A93:  SUBLW  0C
0A94:  BTFSS  03.0
0A95:  GOTO   2ED
....................        { 
....................         if (min2 > vector2[i2]) 
0A96:  RLF    35,W
0A97:  MOVWF  79
0A98:  RLF    36,W
0A99:  MOVWF  7A
0A9A:  RLF    79,F
0A9B:  RLF    7A,F
0A9C:  MOVLW  FC
0A9D:  ANDWF  79,F
0A9E:  MOVF   79,W
0A9F:  ADDLW  10
0AA0:  MOVWF  04
0AA1:  BSF    03.7
0AA2:  MOVF   00,W
0AA3:  MOVWF  77
0AA4:  INCF   04,F
0AA5:  MOVF   00,W
0AA6:  MOVWF  78
0AA7:  INCF   04,F
0AA8:  MOVF   00,W
0AA9:  MOVWF  79
0AAA:  INCF   04,F
0AAB:  MOVF   00,W
0AAC:  MOVWF  7A
0AAD:  BSF    03.6
0AAE:  MOVWF  61
0AAF:  MOVF   79,W
0AB0:  MOVWF  60
0AB1:  MOVF   78,W
0AB2:  MOVWF  5F
0AB3:  MOVF   77,W
0AB4:  MOVWF  5E
0AB5:  BCF    03.6
0AB6:  MOVF   57,W
0AB7:  BSF    03.6
0AB8:  MOVWF  65
0AB9:  BCF    03.6
0ABA:  MOVF   56,W
0ABB:  BSF    03.6
0ABC:  MOVWF  64
0ABD:  BCF    03.6
0ABE:  MOVF   55,W
0ABF:  BSF    03.6
0AC0:  MOVWF  63
0AC1:  BCF    03.6
0AC2:  MOVF   54,W
0AC3:  BSF    03.6
0AC4:  MOVWF  62
0AC5:  BCF    0A.3
0AC6:  BCF    03.6
0AC7:  CALL   0C5
0AC8:  BSF    0A.3
0AC9:  BTFSS  03.0
0ACA:  GOTO   2E9
....................         { 
....................           min2 = vector2[i2];      
0ACB:  RLF    35,W
0ACC:  MOVWF  79
0ACD:  RLF    36,W
0ACE:  MOVWF  7A
0ACF:  RLF    79,F
0AD0:  RLF    7A,F
0AD1:  MOVLW  FC
0AD2:  ANDWF  79,F
0AD3:  MOVF   79,W
0AD4:  ADDLW  10
0AD5:  MOVWF  04
0AD6:  BSF    03.7
0AD7:  MOVF   00,W
0AD8:  MOVWF  77
0AD9:  INCF   04,F
0ADA:  MOVF   00,W
0ADB:  MOVWF  78
0ADC:  INCF   04,F
0ADD:  MOVF   00,W
0ADE:  MOVWF  79
0ADF:  INCF   04,F
0AE0:  MOVF   00,W
0AE1:  MOVWF  7A
0AE2:  MOVWF  57
0AE3:  MOVF   79,W
0AE4:  MOVWF  56
0AE5:  MOVF   78,W
0AE6:  MOVWF  55
0AE7:  MOVF   77,W
0AE8:  MOVWF  54
....................         } 
....................        } 
0AE9:  INCF   35,F
0AEA:  BTFSC  03.2
0AEB:  INCF   36,F
0AEC:  GOTO   28F
....................        prom2=0; 
0AED:  CLRF   5B
0AEE:  CLRF   5A
0AEF:  CLRF   59
0AF0:  CLRF   58
....................        for (i2 = 0; i2 < 13; i2++) 
0AF1:  CLRF   36
0AF2:  CLRF   35
0AF3:  MOVF   36,F
0AF4:  BTFSS  03.2
0AF5:  GOTO   34A
0AF6:  MOVF   35,W
0AF7:  SUBLW  0C
0AF8:  BTFSS  03.0
0AF9:  GOTO   34A
....................        { 
....................        prom2 += vector[i2]; 
0AFA:  RLF    35,W
0AFB:  MOVWF  79
0AFC:  RLF    36,W
0AFD:  MOVWF  7A
0AFE:  RLF    79,F
0AFF:  RLF    7A,F
0B00:  MOVLW  FC
0B01:  ANDWF  79,F
0B02:  MOVF   79,W
0B03:  ADDLW  A0
0B04:  MOVWF  04
0B05:  BCF    03.7
0B06:  BTFSC  7A.0
0B07:  BSF    03.7
0B08:  MOVF   00,W
0B09:  MOVWF  77
0B0A:  INCF   04,F
0B0B:  MOVF   00,W
0B0C:  MOVWF  78
0B0D:  INCF   04,F
0B0E:  MOVF   00,W
0B0F:  MOVWF  79
0B10:  INCF   04,F
0B11:  MOVF   00,W
0B12:  MOVWF  7A
0B13:  BSF    03.6
0B14:  CLRF   5F
0B15:  MOVF   04,W
0B16:  MOVWF  5E
0B17:  BCF    5F.0
0B18:  BTFSC  03.7
0B19:  BSF    5F.0
0B1A:  BCF    03.1
0B1B:  BCF    03.6
0B1C:  MOVF   5B,W
0B1D:  BSF    03.6
0B1E:  MOVWF  63
0B1F:  BCF    03.6
0B20:  MOVF   5A,W
0B21:  BSF    03.6
0B22:  MOVWF  62
0B23:  BCF    03.6
0B24:  MOVF   59,W
0B25:  BSF    03.6
0B26:  MOVWF  61
0B27:  BCF    03.6
0B28:  MOVF   58,W
0B29:  BSF    03.6
0B2A:  MOVWF  60
0B2B:  MOVF   7A,W
0B2C:  MOVWF  67
0B2D:  MOVF   79,W
0B2E:  MOVWF  66
0B2F:  MOVF   78,W
0B30:  MOVWF  65
0B31:  MOVF   77,W
0B32:  MOVWF  64
0B33:  BCF    0A.3
0B34:  BCF    03.6
0B35:  CALL   106
0B36:  BSF    0A.3
0B37:  BSF    03.6
0B38:  MOVF   5E,W
0B39:  MOVWF  04
0B3A:  BCF    03.7
0B3B:  BTFSC  5F.0
0B3C:  BSF    03.7
0B3D:  MOVF   7A,W
0B3E:  BCF    03.6
0B3F:  MOVWF  5B
0B40:  MOVF   79,W
0B41:  MOVWF  5A
0B42:  MOVF   78,W
0B43:  MOVWF  59
0B44:  MOVF   77,W
0B45:  MOVWF  58
....................          
....................        }prom2 =(prom2)/13; 
0B46:  INCF   35,F
0B47:  BTFSC  03.2
0B48:  INCF   36,F
0B49:  GOTO   2F3
0B4A:  MOVF   5B,W
0B4B:  BSF    03.6
0B4C:  MOVWF  65
0B4D:  BCF    03.6
0B4E:  MOVF   5A,W
0B4F:  BSF    03.6
0B50:  MOVWF  64
0B51:  BCF    03.6
0B52:  MOVF   59,W
0B53:  BSF    03.6
0B54:  MOVWF  63
0B55:  BCF    03.6
0B56:  MOVF   58,W
0B57:  BSF    03.6
0B58:  MOVWF  62
0B59:  CLRF   69
0B5A:  CLRF   68
0B5B:  MOVLW  50
0B5C:  MOVWF  67
0B5D:  MOVLW  82
0B5E:  MOVWF  66
0B5F:  BCF    0A.3
0B60:  BCF    03.6
0B61:  CALL   24C
0B62:  BSF    0A.3
0B63:  MOVF   7A,W
0B64:  MOVWF  5B
0B65:  MOVF   79,W
0B66:  MOVWF  5A
0B67:  MOVF   78,W
0B68:  MOVWF  59
0B69:  MOVF   77,W
0B6A:  MOVWF  58
....................        if(max>max2) 
0B6B:  MOVF   53,W
0B6C:  BSF    03.6
0B6D:  MOVWF  61
0B6E:  BCF    03.6
0B6F:  MOVF   52,W
0B70:  BSF    03.6
0B71:  MOVWF  60
0B72:  BCF    03.6
0B73:  MOVF   51,W
0B74:  BSF    03.6
0B75:  MOVWF  5F
0B76:  BCF    03.6
0B77:  MOVF   50,W
0B78:  BSF    03.6
0B79:  MOVWF  5E
0B7A:  BCF    03.6
0B7B:  MOVF   47,W
0B7C:  BSF    03.6
0B7D:  MOVWF  65
0B7E:  BCF    03.6
0B7F:  MOVF   46,W
0B80:  BSF    03.6
0B81:  MOVWF  64
0B82:  BCF    03.6
0B83:  MOVF   45,W
0B84:  BSF    03.6
0B85:  MOVWF  63
0B86:  BCF    03.6
0B87:  MOVF   44,W
0B88:  BSF    03.6
0B89:  MOVWF  62
0B8A:  BCF    0A.3
0B8B:  BCF    03.6
0B8C:  CALL   0C5
0B8D:  BSF    0A.3
0B8E:  BTFSS  03.0
0B8F:  GOTO   398
....................        { 
....................          maximo = max; 
0B90:  MOVF   47,W
0B91:  MOVWF  5F
0B92:  MOVF   46,W
0B93:  MOVWF  5E
0B94:  MOVF   45,W
0B95:  MOVWF  5D
0B96:  MOVF   44,W
0B97:  MOVWF  5C
....................        } 
....................        if(max<max2) 
0B98:  MOVF   47,W
0B99:  BSF    03.6
0B9A:  MOVWF  61
0B9B:  BCF    03.6
0B9C:  MOVF   46,W
0B9D:  BSF    03.6
0B9E:  MOVWF  60
0B9F:  BCF    03.6
0BA0:  MOVF   45,W
0BA1:  BSF    03.6
0BA2:  MOVWF  5F
0BA3:  BCF    03.6
0BA4:  MOVF   44,W
0BA5:  BSF    03.6
0BA6:  MOVWF  5E
0BA7:  BCF    03.6
0BA8:  MOVF   53,W
0BA9:  BSF    03.6
0BAA:  MOVWF  65
0BAB:  BCF    03.6
0BAC:  MOVF   52,W
0BAD:  BSF    03.6
0BAE:  MOVWF  64
0BAF:  BCF    03.6
0BB0:  MOVF   51,W
0BB1:  BSF    03.6
0BB2:  MOVWF  63
0BB3:  BCF    03.6
0BB4:  MOVF   50,W
0BB5:  BSF    03.6
0BB6:  MOVWF  62
0BB7:  BCF    0A.3
0BB8:  BCF    03.6
0BB9:  CALL   0C5
0BBA:  BSF    0A.3
0BBB:  BTFSS  03.0
0BBC:  GOTO   3C5
....................        { 
....................          maximo = max2; 
0BBD:  MOVF   53,W
0BBE:  MOVWF  5F
0BBF:  MOVF   52,W
0BC0:  MOVWF  5E
0BC1:  MOVF   51,W
0BC2:  MOVWF  5D
0BC3:  MOVF   50,W
0BC4:  MOVWF  5C
....................        } 
....................        if(max==max2) 
0BC5:  MOVF   47,W
0BC6:  BSF    03.6
0BC7:  MOVWF  61
0BC8:  BCF    03.6
0BC9:  MOVF   46,W
0BCA:  BSF    03.6
0BCB:  MOVWF  60
0BCC:  BCF    03.6
0BCD:  MOVF   45,W
0BCE:  BSF    03.6
0BCF:  MOVWF  5F
0BD0:  BCF    03.6
0BD1:  MOVF   44,W
0BD2:  BSF    03.6
0BD3:  MOVWF  5E
0BD4:  BCF    03.6
0BD5:  MOVF   53,W
0BD6:  BSF    03.6
0BD7:  MOVWF  65
0BD8:  BCF    03.6
0BD9:  MOVF   52,W
0BDA:  BSF    03.6
0BDB:  MOVWF  64
0BDC:  BCF    03.6
0BDD:  MOVF   51,W
0BDE:  BSF    03.6
0BDF:  MOVWF  63
0BE0:  BCF    03.6
0BE1:  MOVF   50,W
0BE2:  BSF    03.6
0BE3:  MOVWF  62
0BE4:  BCF    0A.3
0BE5:  BCF    03.6
0BE6:  CALL   0C5
0BE7:  BSF    0A.3
0BE8:  BTFSS  03.2
0BE9:  GOTO   3F2
....................        { 
....................          maximo = max2; 
0BEA:  MOVF   53,W
0BEB:  MOVWF  5F
0BEC:  MOVF   52,W
0BED:  MOVWF  5E
0BEE:  MOVF   51,W
0BEF:  MOVWF  5D
0BF0:  MOVF   50,W
0BF1:  MOVWF  5C
....................        } 
....................        if(min>min2) 
0BF2:  MOVF   57,W
0BF3:  BSF    03.6
0BF4:  MOVWF  61
0BF5:  BCF    03.6
0BF6:  MOVF   56,W
0BF7:  BSF    03.6
0BF8:  MOVWF  60
0BF9:  BCF    03.6
0BFA:  MOVF   55,W
0BFB:  BSF    03.6
0BFC:  MOVWF  5F
0BFD:  BCF    03.6
0BFE:  MOVF   54,W
0BFF:  BSF    03.6
0C00:  MOVWF  5E
0C01:  BCF    03.6
0C02:  MOVF   4B,W
0C03:  BSF    03.6
0C04:  MOVWF  65
0C05:  BCF    03.6
0C06:  MOVF   4A,W
0C07:  BSF    03.6
0C08:  MOVWF  64
0C09:  BCF    03.6
0C0A:  MOVF   49,W
0C0B:  BSF    03.6
0C0C:  MOVWF  63
0C0D:  BCF    03.6
0C0E:  MOVF   48,W
0C0F:  BSF    03.6
0C10:  MOVWF  62
0C11:  BCF    0A.3
0C12:  BCF    03.6
0C13:  CALL   0C5
0C14:  BSF    0A.3
0C15:  BTFSS  03.0
0C16:  GOTO   41F
....................        { 
....................          minimo = min2; 
0C17:  MOVF   57,W
0C18:  MOVWF  63
0C19:  MOVF   56,W
0C1A:  MOVWF  62
0C1B:  MOVF   55,W
0C1C:  MOVWF  61
0C1D:  MOVF   54,W
0C1E:  MOVWF  60
....................        } 
....................        if(min<min2) 
0C1F:  MOVF   4B,W
0C20:  BSF    03.6
0C21:  MOVWF  61
0C22:  BCF    03.6
0C23:  MOVF   4A,W
0C24:  BSF    03.6
0C25:  MOVWF  60
0C26:  BCF    03.6
0C27:  MOVF   49,W
0C28:  BSF    03.6
0C29:  MOVWF  5F
0C2A:  BCF    03.6
0C2B:  MOVF   48,W
0C2C:  BSF    03.6
0C2D:  MOVWF  5E
0C2E:  BCF    03.6
0C2F:  MOVF   57,W
0C30:  BSF    03.6
0C31:  MOVWF  65
0C32:  BCF    03.6
0C33:  MOVF   56,W
0C34:  BSF    03.6
0C35:  MOVWF  64
0C36:  BCF    03.6
0C37:  MOVF   55,W
0C38:  BSF    03.6
0C39:  MOVWF  63
0C3A:  BCF    03.6
0C3B:  MOVF   54,W
0C3C:  BSF    03.6
0C3D:  MOVWF  62
0C3E:  BCF    0A.3
0C3F:  BCF    03.6
0C40:  CALL   0C5
0C41:  BSF    0A.3
0C42:  BTFSS  03.0
0C43:  GOTO   44C
....................        { 
....................          minimo = min; 
0C44:  MOVF   4B,W
0C45:  MOVWF  63
0C46:  MOVF   4A,W
0C47:  MOVWF  62
0C48:  MOVF   49,W
0C49:  MOVWF  61
0C4A:  MOVF   48,W
0C4B:  MOVWF  60
....................        } 
....................        if(min==min2) 
0C4C:  MOVF   4B,W
0C4D:  BSF    03.6
0C4E:  MOVWF  61
0C4F:  BCF    03.6
0C50:  MOVF   4A,W
0C51:  BSF    03.6
0C52:  MOVWF  60
0C53:  BCF    03.6
0C54:  MOVF   49,W
0C55:  BSF    03.6
0C56:  MOVWF  5F
0C57:  BCF    03.6
0C58:  MOVF   48,W
0C59:  BSF    03.6
0C5A:  MOVWF  5E
0C5B:  BCF    03.6
0C5C:  MOVF   57,W
0C5D:  BSF    03.6
0C5E:  MOVWF  65
0C5F:  BCF    03.6
0C60:  MOVF   56,W
0C61:  BSF    03.6
0C62:  MOVWF  64
0C63:  BCF    03.6
0C64:  MOVF   55,W
0C65:  BSF    03.6
0C66:  MOVWF  63
0C67:  BCF    03.6
0C68:  MOVF   54,W
0C69:  BSF    03.6
0C6A:  MOVWF  62
0C6B:  BCF    0A.3
0C6C:  BCF    03.6
0C6D:  CALL   0C5
0C6E:  BSF    0A.3
0C6F:  BTFSS  03.2
0C70:  GOTO   479
....................        { 
....................          minimo = min; 
0C71:  MOVF   4B,W
0C72:  MOVWF  63
0C73:  MOVF   4A,W
0C74:  MOVWF  62
0C75:  MOVF   49,W
0C76:  MOVWF  61
0C77:  MOVF   48,W
0C78:  MOVWF  60
....................        } 
....................        promedio=(prom+prom2)/2; 
0C79:  BCF    03.1
0C7A:  MOVF   4F,W
0C7B:  BSF    03.6
0C7C:  MOVWF  63
0C7D:  BCF    03.6
0C7E:  MOVF   4E,W
0C7F:  BSF    03.6
0C80:  MOVWF  62
0C81:  BCF    03.6
0C82:  MOVF   4D,W
0C83:  BSF    03.6
0C84:  MOVWF  61
0C85:  BCF    03.6
0C86:  MOVF   4C,W
0C87:  BSF    03.6
0C88:  MOVWF  60
0C89:  BCF    03.6
0C8A:  MOVF   5B,W
0C8B:  BSF    03.6
0C8C:  MOVWF  67
0C8D:  BCF    03.6
0C8E:  MOVF   5A,W
0C8F:  BSF    03.6
0C90:  MOVWF  66
0C91:  BCF    03.6
0C92:  MOVF   59,W
0C93:  BSF    03.6
0C94:  MOVWF  65
0C95:  BCF    03.6
0C96:  MOVF   58,W
0C97:  BSF    03.6
0C98:  MOVWF  64
0C99:  BCF    0A.3
0C9A:  BCF    03.6
0C9B:  CALL   106
0C9C:  BSF    0A.3
0C9D:  MOVF   77,W
0C9E:  BSF    03.6
0C9F:  MOVWF  5E
0CA0:  MOVF   78,W
0CA1:  MOVWF  5F
0CA2:  MOVF   79,W
0CA3:  MOVWF  60
0CA4:  MOVF   7A,W
0CA5:  MOVWF  61
0CA6:  MOVWF  65
0CA7:  MOVF   60,W
0CA8:  MOVWF  64
0CA9:  MOVF   5F,W
0CAA:  MOVWF  63
0CAB:  MOVF   5E,W
0CAC:  MOVWF  62
0CAD:  CLRF   69
0CAE:  CLRF   68
0CAF:  CLRF   67
0CB0:  MOVLW  80
0CB1:  MOVWF  66
0CB2:  BCF    0A.3
0CB3:  BCF    03.6
0CB4:  CALL   24C
0CB5:  BSF    0A.3
0CB6:  MOVF   7A,W
0CB7:  MOVWF  67
0CB8:  MOVF   79,W
0CB9:  MOVWF  66
0CBA:  MOVF   78,W
0CBB:  MOVWF  65
0CBC:  MOVF   77,W
0CBD:  MOVWF  64
....................        ac = vector2[13]; 
0CBE:  BSF    03.6
0CBF:  MOVF   47,W
0CC0:  BCF    03.6
0CC1:  MOVWF  43
0CC2:  BSF    03.6
0CC3:  MOVF   46,W
0CC4:  BCF    03.6
0CC5:  MOVWF  42
0CC6:  BSF    03.6
0CC7:  MOVF   45,W
0CC8:  BCF    03.6
0CC9:  MOVWF  41
0CCA:  BSF    03.6
0CCB:  MOVF   44,W
0CCC:  BCF    03.6
0CCD:  MOVWF  40
....................        t2=0; 
0CCE:  CLRF   2E
0CCF:  CLRF   2D
....................        for(i=0;i<15;i++) 
0CD0:  CLRF   34
0CD1:  CLRF   33
0CD2:  MOVF   34,F
0CD3:  BTFSS  03.2
0CD4:  GOTO   4F2
0CD5:  MOVF   33,W
0CD6:  SUBLW  0E
0CD7:  BTFSS  03.0
0CD8:  GOTO   4F2
....................        { 
....................         vector[i]=0; 
0CD9:  RLF    33,W
0CDA:  MOVWF  79
0CDB:  RLF    34,W
0CDC:  MOVWF  7A
0CDD:  RLF    79,F
0CDE:  RLF    7A,F
0CDF:  MOVLW  FC
0CE0:  ANDWF  79,F
0CE1:  MOVF   79,W
0CE2:  ADDLW  A0
0CE3:  MOVWF  04
0CE4:  BCF    03.7
0CE5:  BTFSC  7A.0
0CE6:  BSF    03.7
0CE7:  CLRF   00
0CE8:  INCF   04,F
0CE9:  CLRF   00
0CEA:  INCF   04,F
0CEB:  CLRF   00
0CEC:  INCF   04,F
0CED:  CLRF   00
....................        } 
0CEE:  INCF   33,F
0CEF:  BTFSC  03.2
0CF0:  INCF   34,F
0CF1:  GOTO   4D2
....................        for(i2=0;i2<15;i2++) 
0CF2:  CLRF   36
0CF3:  CLRF   35
0CF4:  MOVF   36,F
0CF5:  BTFSS  03.2
0CF6:  GOTO   512
0CF7:  MOVF   35,W
0CF8:  SUBLW  0E
0CF9:  BTFSS  03.0
0CFA:  GOTO   512
....................        { 
....................         vector2[i2]=0; 
0CFB:  RLF    35,W
0CFC:  MOVWF  79
0CFD:  RLF    36,W
0CFE:  MOVWF  7A
0CFF:  RLF    79,F
0D00:  RLF    7A,F
0D01:  MOVLW  FC
0D02:  ANDWF  79,F
0D03:  MOVF   79,W
0D04:  ADDLW  10
0D05:  MOVWF  04
0D06:  BSF    03.7
0D07:  CLRF   00
0D08:  INCF   04,F
0D09:  CLRF   00
0D0A:  INCF   04,F
0D0B:  CLRF   00
0D0C:  INCF   04,F
0D0D:  CLRF   00
....................        } 
0D0E:  INCF   35,F
0D0F:  BTFSC  03.2
0D10:  INCF   36,F
0D11:  GOTO   4F4
....................        t2=0; 
0D12:  CLRF   2E
0D13:  CLRF   2D
....................        r=0; 
0D14:  CLRF   30
0D15:  CLRF   2F
....................        k=0; 
0D16:  CLRF   32
0D17:  CLRF   31
....................        
....................   } 
....................   t2++; 
0D18:  INCF   2D,F
0D19:  BTFSC  03.2
0D1A:  INCF   2E,F
....................   t++; 
0D1B:  INCF   2B,F
0D1C:  BTFSC  03.2
0D1D:  INCF   2C,F
....................   set_timer0(61);//Carga valor para conteo 
0D1E:  MOVLW  3D
0D1F:  MOVWF  01
.................... } 
0D20:  BCF    0B.2
0D21:  BCF    0A.3
0D22:  BCF    0A.4
0D23:  GOTO   01B
.................... void main() 
.................... { 
0D24:  CLRF   04
0D25:  BCF    03.7
0D26:  MOVLW  1F
0D27:  ANDWF  03,F
0D28:  CLRF   2C
0D29:  CLRF   2B
0D2A:  CLRF   2E
0D2B:  CLRF   2D
0D2C:  CLRF   30
0D2D:  CLRF   2F
0D2E:  CLRF   32
0D2F:  CLRF   31
0D30:  CLRF   37
0D31:  BSF    03.5
0D32:  BSF    1F.0
0D33:  BSF    1F.1
0D34:  BSF    1F.2
0D35:  BCF    1F.3
0D36:  MOVLW  07
0D37:  MOVWF  1C
....................  set_tris_d(0x0f); 
0D38:  MOVLW  0F
0D39:  MOVWF  08
....................  lcd_init();  
0D3A:  BCF    0A.3
0D3B:  BCF    03.5
0D3C:  GOTO   3BC
0D3D:  BSF    0A.3
....................  lcd_enviar(lcd_comando,lcd_home);//cursor a casa   
0D3E:  BSF    03.6
0D3F:  CLRF   56
0D40:  MOVLW  02
0D41:  MOVWF  57
0D42:  BCF    0A.3
0D43:  BCF    03.6
0D44:  CALL   377
0D45:  BSF    0A.3
....................  lcd_gotoxy(4,1); 
0D46:  MOVLW  04
0D47:  BSF    03.6
0D48:  MOVWF  52
0D49:  MOVLW  01
0D4A:  MOVWF  53
0D4B:  BCF    0A.3
0D4C:  BCF    03.6
0D4D:  CALL   3F9
0D4E:  BSF    0A.3
....................  printf(lcd_putc,"Termometro");//Mensaje 
0D4F:  MOVLW  18
0D50:  BSF    03.6
0D51:  MOVWF  0D
0D52:  MOVLW  03
0D53:  MOVWF  0F
0D54:  BCF    0A.3
0D55:  BCF    03.6
0D56:  CALL   47A
0D57:  BSF    0A.3
....................  lcd_gotoxy(5,2);  
0D58:  MOVLW  05
0D59:  BSF    03.6
0D5A:  MOVWF  52
0D5B:  MOVLW  02
0D5C:  MOVWF  53
0D5D:  BCF    0A.3
0D5E:  BCF    03.6
0D5F:  CALL   3F9
0D60:  BSF    0A.3
....................  printf(lcd_putc,"Digital"); 
0D61:  MOVLW  1E
0D62:  BSF    03.6
0D63:  MOVWF  0D
0D64:  MOVLW  03
0D65:  MOVWF  0F
0D66:  BCF    0A.3
0D67:  BCF    03.6
0D68:  CALL   47A
0D69:  BSF    0A.3
....................  delay_ms(800); 
0D6A:  MOVLW  04
0D6B:  BSF    03.6
0D6C:  MOVWF  44
0D6D:  MOVLW  C8
0D6E:  MOVWF  52
0D6F:  BCF    0A.3
0D70:  BCF    03.6
0D71:  CALL   362
0D72:  BSF    0A.3
0D73:  BSF    03.6
0D74:  DECFSZ 44,F
0D75:  GOTO   56D
....................  lcd_enviar(lcd_comando,lcd_clear);  
0D76:  CLRF   56
0D77:  MOVLW  01
0D78:  MOVWF  57
0D79:  BCF    0A.3
0D7A:  BCF    03.6
0D7B:  CALL   377
0D7C:  BSF    0A.3
....................  lcd_gotoxy(1,1); 
0D7D:  MOVLW  01
0D7E:  BSF    03.6
0D7F:  MOVWF  52
0D80:  MOVWF  53
0D81:  BCF    0A.3
0D82:  BCF    03.6
0D83:  CALL   3F9
0D84:  BSF    0A.3
....................  printf(lcd_putc,"Temperatura:");//Mensaje 
0D85:  MOVLW  22
0D86:  BSF    03.6
0D87:  MOVWF  0D
0D88:  MOVLW  03
0D89:  MOVWF  0F
0D8A:  BCF    0A.3
0D8B:  BCF    03.6
0D8C:  CALL   47A
0D8D:  BSF    0A.3
....................  SETUP_ADC_PORTS(AN0_AN1_AN3); 
0D8E:  BSF    03.5
0D8F:  BCF    1F.0
0D90:  BCF    1F.1
0D91:  BSF    1F.2
0D92:  BCF    1F.3
....................  setup_adc(ADC_CLOCK_DIV_32); 
0D93:  BCF    1F.6
0D94:  BCF    03.5
0D95:  BCF    1F.6
0D96:  BSF    1F.7
0D97:  BSF    03.5
0D98:  BCF    1F.7
0D99:  BCF    03.5
0D9A:  BSF    1F.0
....................  set_adc_channel( 0 );  
0D9B:  MOVLW  00
0D9C:  MOVWF  78
0D9D:  MOVF   1F,W
0D9E:  ANDLW  C7
0D9F:  IORWF  78,W
0DA0:  MOVWF  1F
....................   
....................  setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256);//Configura timer0 
0DA1:  BSF    03.5
0DA2:  MOVF   01,W
0DA3:  ANDLW  C0
0DA4:  IORLW  07
0DA5:  MOVWF  01
....................  enable_interrupts(INT_TIMER0);//Habilita interrupcion por timer0 
0DA6:  BCF    03.5
0DA7:  BSF    0B.5
....................  enable_interrupts(GLOBAL);//Interrrupciones externas 
0DA8:  MOVLW  C0
0DA9:  IORWF  0B,F
....................  set_timer0(61);//Carga valor para conteo 
0DAA:  MOVLW  3D
0DAB:  MOVWF  01
....................  while(true) 
....................  { 
....................  if(t2<1200) 
0DAC:  MOVF   2E,W
0DAD:  SUBLW  04
0DAE:  BTFSS  03.0
0DAF:  GOTO   637
0DB0:  BTFSS  03.2
0DB1:  GOTO   5B6
0DB2:  MOVF   2D,W
0DB3:  SUBLW  AF
0DB4:  BTFSS  03.0
0DB5:  GOTO   637
....................  { 
....................    value=read_adc(); 
0DB6:  BSF    1F.2
0DB7:  BTFSC  1F.2
0DB8:  GOTO   5B7
0DB9:  MOVF   1E,W
0DBA:  CLRF   2A
0DBB:  MOVWF  29
0DBC:  CLRF   27
0DBD:  BTFSC  0B.7
0DBE:  BSF    27.7
0DBF:  BCF    0B.7
....................    volt=value*0.0196; 
0DC0:  MOVF   2A,W
0DC1:  BSF    03.6
0DC2:  MOVWF  5F
0DC3:  BCF    03.6
0DC4:  MOVF   29,W
0DC5:  BSF    03.6
0DC6:  MOVWF  5E
0DC7:  BCF    0A.3
0DC8:  BCF    03.6
0DC9:  CALL   02F
0DCA:  BSF    0A.3
0DCB:  BTFSC  27.7
0DCC:  BSF    0B.7
0DCD:  CLRF   27
0DCE:  BTFSC  0B.7
0DCF:  BSF    27.7
0DD0:  BCF    0B.7
0DD1:  MOVF   7A,W
0DD2:  BSF    03.6
0DD3:  MOVWF  61
0DD4:  MOVF   79,W
0DD5:  MOVWF  60
0DD6:  MOVF   78,W
0DD7:  MOVWF  5F
0DD8:  MOVF   77,W
0DD9:  MOVWF  5E
0DDA:  MOVLW  2E
0DDB:  MOVWF  65
0DDC:  MOVLW  90
0DDD:  MOVWF  64
0DDE:  MOVLW  20
0DDF:  MOVWF  63
0DE0:  MOVLW  79
0DE1:  MOVWF  62
0DE2:  BCF    0A.3
0DE3:  BCF    03.6
0DE4:  CALL   04E
0DE5:  BSF    0A.3
0DE6:  BTFSC  27.7
0DE7:  BSF    0B.7
0DE8:  MOVF   7A,W
0DE9:  MOVWF  3B
0DEA:  MOVF   79,W
0DEB:  MOVWF  3A
0DEC:  MOVF   78,W
0DED:  MOVWF  39
0DEE:  MOVF   77,W
0DEF:  MOVWF  38
0DF0:  CLRF   27
0DF1:  BTFSC  0B.7
0DF2:  BSF    27.7
0DF3:  BCF    0B.7
....................    a = volt*100; 
0DF4:  MOVF   3B,W
0DF5:  BSF    03.6
0DF6:  MOVWF  61
0DF7:  BCF    03.6
0DF8:  MOVF   3A,W
0DF9:  BSF    03.6
0DFA:  MOVWF  60
0DFB:  BCF    03.6
0DFC:  MOVF   39,W
0DFD:  BSF    03.6
0DFE:  MOVWF  5F
0DFF:  BCF    03.6
0E00:  MOVF   38,W
0E01:  BSF    03.6
0E02:  MOVWF  5E
0E03:  CLRF   65
0E04:  CLRF   64
0E05:  MOVLW  48
0E06:  MOVWF  63
0E07:  MOVLW  85
0E08:  MOVWF  62
0E09:  BCF    0A.3
0E0A:  BCF    03.6
0E0B:  CALL   04E
0E0C:  BSF    0A.3
0E0D:  BTFSC  27.7
0E0E:  BSF    0B.7
0E0F:  MOVF   7A,W
0E10:  MOVWF  6B
0E11:  MOVF   79,W
0E12:  MOVWF  6A
0E13:  MOVF   78,W
0E14:  MOVWF  69
0E15:  MOVF   77,W
0E16:  MOVWF  68
....................   lcd_gotoxy(13,1); 
0E17:  MOVLW  0D
0E18:  BSF    03.6
0E19:  MOVWF  52
0E1A:  MOVLW  01
0E1B:  MOVWF  53
0E1C:  BCF    0A.3
0E1D:  BCF    03.6
0E1E:  CALL   3F9
0E1F:  BSF    0A.3
....................   printf(lcd_putc,"%f",a);//Mensaje 
0E20:  MOVLW  89
0E21:  MOVWF  04
0E22:  MOVF   6B,W
0E23:  BSF    03.6
0E24:  MOVWF  47
0E25:  BCF    03.6
0E26:  MOVF   6A,W
0E27:  BSF    03.6
0E28:  MOVWF  46
0E29:  BCF    03.6
0E2A:  MOVF   69,W
0E2B:  BSF    03.6
0E2C:  MOVWF  45
0E2D:  BCF    03.6
0E2E:  MOVF   68,W
0E2F:  BSF    03.6
0E30:  MOVWF  44
0E31:  MOVLW  02
0E32:  MOVWF  48
0E33:  BCF    0A.3
0E34:  BCF    03.6
0E35:  CALL   4F8
0E36:  BSF    0A.3
....................  } 
....................   if((input(Pin_d0)==1))  
0E37:  BSF    03.5
0E38:  BSF    08.0
0E39:  BCF    03.5
0E3A:  BTFSS  08.0
0E3B:  GOTO   651
....................   { 
....................     delay_ms(10); 
0E3C:  MOVLW  0A
0E3D:  BSF    03.6
0E3E:  MOVWF  52
0E3F:  BCF    0A.3
0E40:  BCF    03.6
0E41:  CALL   362
0E42:  BSF    0A.3
....................     while((input(pin_d0)==1)) 
....................     { 
0E43:  BSF    03.5
0E44:  BSF    08.0
0E45:  BCF    03.5
0E46:  BTFSS  08.0
0E47:  GOTO   650
....................      delay_ms(10); 
0E48:  MOVLW  0A
0E49:  BSF    03.6
0E4A:  MOVWF  52
0E4B:  BCF    0A.3
0E4C:  BCF    03.6
0E4D:  CALL   362
0E4E:  BSF    0A.3
....................     } 
0E4F:  GOTO   643
....................     p++; 
0E50:  INCF   37,F
....................   } 
....................   switch(p) 
....................    { 
0E51:  MOVF   37,W
0E52:  XORLW  01
0E53:  BTFSC  03.2
0E54:  GOTO   65F
0E55:  XORLW  02
0E56:  BTFSC  03.2
0E57:  GOTO   69F
0E58:  XORLW  06
0E59:  BTFSC  03.2
0E5A:  GOTO   6DF
0E5B:  XORLW  02
0E5C:  BTFSC  03.2
0E5D:  GOTO   71F
0E5E:  GOTO   75F
....................    case 1:  
....................    lcd_gotoxy(1,2); 
0E5F:  MOVLW  01
0E60:  BSF    03.6
0E61:  MOVWF  52
0E62:  MOVLW  02
0E63:  MOVWF  53
0E64:  BCF    0A.3
0E65:  BCF    03.6
0E66:  CALL   3F9
0E67:  BSF    0A.3
....................    printf(lcd_putc,"                 "); 
0E68:  MOVLW  29
0E69:  BSF    03.6
0E6A:  MOVWF  0D
0E6B:  MOVLW  03
0E6C:  MOVWF  0F
0E6D:  BCF    0A.3
0E6E:  BCF    03.6
0E6F:  CALL   47A
0E70:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0E71:  MOVLW  01
0E72:  BSF    03.6
0E73:  MOVWF  52
0E74:  MOVLW  02
0E75:  MOVWF  53
0E76:  BCF    0A.3
0E77:  BCF    03.6
0E78:  CALL   3F9
0E79:  BSF    0A.3
....................    printf(lcd_putc,"Ultima:%f",ac); 
0E7A:  MOVLW  32
0E7B:  BSF    03.6
0E7C:  MOVWF  0D
0E7D:  MOVLW  03
0E7E:  MOVWF  0F
0E7F:  BCF    03.0
0E80:  MOVLW  07
0E81:  MOVWF  44
0E82:  BCF    0A.3
0E83:  BCF    03.6
0E84:  CALL   5F7
0E85:  BSF    0A.3
0E86:  MOVLW  89
0E87:  MOVWF  04
0E88:  MOVF   43,W
0E89:  BSF    03.6
0E8A:  MOVWF  47
0E8B:  BCF    03.6
0E8C:  MOVF   42,W
0E8D:  BSF    03.6
0E8E:  MOVWF  46
0E8F:  BCF    03.6
0E90:  MOVF   41,W
0E91:  BSF    03.6
0E92:  MOVWF  45
0E93:  BCF    03.6
0E94:  MOVF   40,W
0E95:  BSF    03.6
0E96:  MOVWF  44
0E97:  MOVLW  02
0E98:  MOVWF  48
0E99:  BCF    0A.3
0E9A:  BCF    03.6
0E9B:  CALL   4F8
0E9C:  BSF    0A.3
....................    P++; 
0E9D:  INCF   37,F
....................    break; 
0E9E:  GOTO   75F
....................    case 3:   
....................    lcd_gotoxy(1,2); 
0E9F:  MOVLW  01
0EA0:  BSF    03.6
0EA1:  MOVWF  52
0EA2:  MOVLW  02
0EA3:  MOVWF  53
0EA4:  BCF    0A.3
0EA5:  BCF    03.6
0EA6:  CALL   3F9
0EA7:  BSF    0A.3
....................    printf(lcd_putc,"                 "); 
0EA8:  MOVLW  37
0EA9:  BSF    03.6
0EAA:  MOVWF  0D
0EAB:  MOVLW  03
0EAC:  MOVWF  0F
0EAD:  BCF    0A.3
0EAE:  BCF    03.6
0EAF:  CALL   47A
0EB0:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0EB1:  MOVLW  01
0EB2:  BSF    03.6
0EB3:  MOVWF  52
0EB4:  MOVLW  02
0EB5:  MOVWF  53
0EB6:  BCF    0A.3
0EB7:  BCF    03.6
0EB8:  CALL   3F9
0EB9:  BSF    0A.3
....................    printf(lcd_putc,"Maxima:%f",maximo); 
0EBA:  MOVLW  40
0EBB:  BSF    03.6
0EBC:  MOVWF  0D
0EBD:  MOVLW  03
0EBE:  MOVWF  0F
0EBF:  BCF    03.0
0EC0:  MOVLW  07
0EC1:  MOVWF  44
0EC2:  BCF    0A.3
0EC3:  BCF    03.6
0EC4:  CALL   5F7
0EC5:  BSF    0A.3
0EC6:  MOVLW  89
0EC7:  MOVWF  04
0EC8:  MOVF   5F,W
0EC9:  BSF    03.6
0ECA:  MOVWF  47
0ECB:  BCF    03.6
0ECC:  MOVF   5E,W
0ECD:  BSF    03.6
0ECE:  MOVWF  46
0ECF:  BCF    03.6
0ED0:  MOVF   5D,W
0ED1:  BSF    03.6
0ED2:  MOVWF  45
0ED3:  BCF    03.6
0ED4:  MOVF   5C,W
0ED5:  BSF    03.6
0ED6:  MOVWF  44
0ED7:  MOVLW  02
0ED8:  MOVWF  48
0ED9:  BCF    0A.3
0EDA:  BCF    03.6
0EDB:  CALL   4F8
0EDC:  BSF    0A.3
....................    P++; 
0EDD:  INCF   37,F
....................    break; 
0EDE:  GOTO   75F
....................    case 5: 
....................    lcd_gotoxy(1,2); 
0EDF:  MOVLW  01
0EE0:  BSF    03.6
0EE1:  MOVWF  52
0EE2:  MOVLW  02
0EE3:  MOVWF  53
0EE4:  BCF    0A.3
0EE5:  BCF    03.6
0EE6:  CALL   3F9
0EE7:  BSF    0A.3
....................    printf(lcd_putc,"                "); 
0EE8:  MOVLW  45
0EE9:  BSF    03.6
0EEA:  MOVWF  0D
0EEB:  MOVLW  03
0EEC:  MOVWF  0F
0EED:  BCF    0A.3
0EEE:  BCF    03.6
0EEF:  CALL   47A
0EF0:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0EF1:  MOVLW  01
0EF2:  BSF    03.6
0EF3:  MOVWF  52
0EF4:  MOVLW  02
0EF5:  MOVWF  53
0EF6:  BCF    0A.3
0EF7:  BCF    03.6
0EF8:  CALL   3F9
0EF9:  BSF    0A.3
....................    printf(lcd_putc,"Minima:%f",minimo); 
0EFA:  MOVLW  4E
0EFB:  BSF    03.6
0EFC:  MOVWF  0D
0EFD:  MOVLW  03
0EFE:  MOVWF  0F
0EFF:  BCF    03.0
0F00:  MOVLW  07
0F01:  MOVWF  44
0F02:  BCF    0A.3
0F03:  BCF    03.6
0F04:  CALL   5F7
0F05:  BSF    0A.3
0F06:  MOVLW  89
0F07:  MOVWF  04
0F08:  MOVF   63,W
0F09:  BSF    03.6
0F0A:  MOVWF  47
0F0B:  BCF    03.6
0F0C:  MOVF   62,W
0F0D:  BSF    03.6
0F0E:  MOVWF  46
0F0F:  BCF    03.6
0F10:  MOVF   61,W
0F11:  BSF    03.6
0F12:  MOVWF  45
0F13:  BCF    03.6
0F14:  MOVF   60,W
0F15:  BSF    03.6
0F16:  MOVWF  44
0F17:  MOVLW  02
0F18:  MOVWF  48
0F19:  BCF    0A.3
0F1A:  BCF    03.6
0F1B:  CALL   4F8
0F1C:  BSF    0A.3
....................    P++; 
0F1D:  INCF   37,F
....................    break; 
0F1E:  GOTO   75F
....................    case 7: 
....................    lcd_gotoxy(1,2); 
0F1F:  MOVLW  01
0F20:  BSF    03.6
0F21:  MOVWF  52
0F22:  MOVLW  02
0F23:  MOVWF  53
0F24:  BCF    0A.3
0F25:  BCF    03.6
0F26:  CALL   3F9
0F27:  BSF    0A.3
....................    printf(lcd_putc,"                "); 
0F28:  MOVLW  53
0F29:  BSF    03.6
0F2A:  MOVWF  0D
0F2B:  MOVLW  03
0F2C:  MOVWF  0F
0F2D:  BCF    0A.3
0F2E:  BCF    03.6
0F2F:  CALL   47A
0F30:  BSF    0A.3
....................    lcd_gotoxy(1,2); 
0F31:  MOVLW  01
0F32:  BSF    03.6
0F33:  MOVWF  52
0F34:  MOVLW  02
0F35:  MOVWF  53
0F36:  BCF    0A.3
0F37:  BCF    03.6
0F38:  CALL   3F9
0F39:  BSF    0A.3
....................    printf(lcd_putc,"Promedio:%f",promedio); 
0F3A:  MOVLW  5C
0F3B:  BSF    03.6
0F3C:  MOVWF  0D
0F3D:  MOVLW  03
0F3E:  MOVWF  0F
0F3F:  BCF    03.0
0F40:  MOVLW  09
0F41:  MOVWF  44
0F42:  BCF    0A.3
0F43:  BCF    03.6
0F44:  CALL   5F7
0F45:  BSF    0A.3
0F46:  MOVLW  89
0F47:  MOVWF  04
0F48:  MOVF   67,W
0F49:  BSF    03.6
0F4A:  MOVWF  47
0F4B:  BCF    03.6
0F4C:  MOVF   66,W
0F4D:  BSF    03.6
0F4E:  MOVWF  46
0F4F:  BCF    03.6
0F50:  MOVF   65,W
0F51:  BSF    03.6
0F52:  MOVWF  45
0F53:  BCF    03.6
0F54:  MOVF   64,W
0F55:  BSF    03.6
0F56:  MOVWF  44
0F57:  MOVLW  02
0F58:  MOVWF  48
0F59:  BCF    0A.3
0F5A:  BCF    03.6
0F5B:  CALL   4F8
0F5C:  BSF    0A.3
....................    p=0; 
0F5D:  CLRF   37
....................    break; 
0F5E:  GOTO   75F
....................    } 
....................    
....................     
....................     
....................    
....................  } 
0F5F:  GOTO   5AC
.................... } 
....................  
0F60:  SLEEP

Configuration Fuses:
   Word  1: 3F71   XT NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
